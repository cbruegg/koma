{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview Koma is a scientific computing library written in Kotlin, designed to allow development of multiplatform numerical applications targeting JavaScript, Java (JVM), and/or embedded (native) platforms. Project goals: Create a scientific programming environment that is similar in style to NumPy or MATLAB Enable writing numerical applications which can be deployed on JVM, JS, and native platforms Avoid reinventing the wheel by delegating to platform specific back-ends when available To get started, try the quickstart instructions below for your desired platform. After that, take a look at the linear algebra or N-D arrays sections to see some usage examples. Quickstart (Using from Kotlin/JVM or Kotlin/JS) Koma is hosted on bintray. First add the koma repository to your repo list. If using gradle: repositories { maven { url \"http://dl.bintray.com/kyonifer/maven\" jcenter () } } Now add a dependency on the koma-core artifact: dependencies { compile group: \"com.kyonifer\" , name: \"koma-core-ejml\" , version: \"0.12\" } dependencies { compile group: \"com.kyonifer\" , name: \"koma-core-js\" , version: \"0.12\" } And we're ready to go. Do a quick test: import koma.* import koma.extensions.* fun main ( args : Array < String >) { // Create some normal random noise var a = randn ( 100 , 2 ) var b = cumsum ( a ) figure ( 1 ) // Second parameter is color plot ( a , 'b' , \"First Run\" ) plot ( a + 1 , 'y' , \"First Run Offset\" ) xlabel ( \"Time (s)\" ) ylabel ( \"Magnitude\" ) title ( \"White Noise\" ) figure ( 2 ) plot ( b , 'g' ) // green xlabel ( \"Velocity (lightweeks/minute)\" ) ylabel ( \"Intelligence\" ) title ( \"Random Walk\" ) } import koma.* import koma.extensions.* fun main ( args : Array < String >) { // Create some normal random noise var a = randn ( 100 , 2 ) var b = cumsum ( a ) // On js, koma doesn't have built-in plotting, so we'll just print the value println ( b [ 99 , 0 ]) } On the JVM you should see: Quickstart (Raw JS) You can also use Koma directly from JavaScript. Begin by building Koma from source . After doing so, you should see CommonJs modules for Koma in the ./node_modules/ folder. You can then use these modules from an installation of Node.js. For example, to run the toy example main function defined at examples/js/example.js you would run the following in the Koma root folder: node examples/js/example.js Quickstart (Native) You can use Koma in a native executable without either a JS or JVM runtime available. Begin by building Koma from source . This will produce an executable called build/native/komaExample.kexe which includes the Koma library as well as the toy example main function defined at examples/native/main.kt . You can run the executable directly, without any js or java runtime dependency: ./build/konan/bin/linux/komaExample.kexe You can edit the binary by making modifications to examples/native/main.kt in the source tree. See the build from source section above for instructions on building shared or static libraries which can be used from an application.","title":"Overview"},{"location":"index.html#overview","text":"Koma is a scientific computing library written in Kotlin, designed to allow development of multiplatform numerical applications targeting JavaScript, Java (JVM), and/or embedded (native) platforms. Project goals: Create a scientific programming environment that is similar in style to NumPy or MATLAB Enable writing numerical applications which can be deployed on JVM, JS, and native platforms Avoid reinventing the wheel by delegating to platform specific back-ends when available To get started, try the quickstart instructions below for your desired platform. After that, take a look at the linear algebra or N-D arrays sections to see some usage examples.","title":"Overview"},{"location":"index.html#quickstart-using-from-kotlinjvm-or-kotlinjs","text":"Koma is hosted on bintray. First add the koma repository to your repo list. If using gradle: repositories { maven { url \"http://dl.bintray.com/kyonifer/maven\" jcenter () } } Now add a dependency on the koma-core artifact: dependencies { compile group: \"com.kyonifer\" , name: \"koma-core-ejml\" , version: \"0.12\" } dependencies { compile group: \"com.kyonifer\" , name: \"koma-core-js\" , version: \"0.12\" } And we're ready to go. Do a quick test: import koma.* import koma.extensions.* fun main ( args : Array < String >) { // Create some normal random noise var a = randn ( 100 , 2 ) var b = cumsum ( a ) figure ( 1 ) // Second parameter is color plot ( a , 'b' , \"First Run\" ) plot ( a + 1 , 'y' , \"First Run Offset\" ) xlabel ( \"Time (s)\" ) ylabel ( \"Magnitude\" ) title ( \"White Noise\" ) figure ( 2 ) plot ( b , 'g' ) // green xlabel ( \"Velocity (lightweeks/minute)\" ) ylabel ( \"Intelligence\" ) title ( \"Random Walk\" ) } import koma.* import koma.extensions.* fun main ( args : Array < String >) { // Create some normal random noise var a = randn ( 100 , 2 ) var b = cumsum ( a ) // On js, koma doesn't have built-in plotting, so we'll just print the value println ( b [ 99 , 0 ]) } On the JVM you should see:","title":"Quickstart (Using from Kotlin/JVM or Kotlin/JS)"},{"location":"index.html#quickstart-raw-js","text":"You can also use Koma directly from JavaScript. Begin by building Koma from source . After doing so, you should see CommonJs modules for Koma in the ./node_modules/ folder. You can then use these modules from an installation of Node.js. For example, to run the toy example main function defined at examples/js/example.js you would run the following in the Koma root folder: node examples/js/example.js","title":"Quickstart (Raw JS)"},{"location":"index.html#quickstart-native","text":"You can use Koma in a native executable without either a JS or JVM runtime available. Begin by building Koma from source . This will produce an executable called build/native/komaExample.kexe which includes the Koma library as well as the toy example main function defined at examples/native/main.kt . You can run the executable directly, without any js or java runtime dependency: ./build/konan/bin/linux/komaExample.kexe You can edit the binary by making modifications to examples/native/main.kt in the source tree. See the build from source section above for instructions on building shared or static libraries which can be used from an application.","title":"Quickstart (Native)"},{"location":"General_Usage_Guide/Matrices_&_Linear_Algebra.html","text":"Matrices & Linear Algebra While it is always possible to use the underlying container classes directly (see Modules for more information on backends), Koma provides a set of top-level convenience functions to make the experience more similar to other scientific environments. All these functions reside in the koma namespace and use the underlying object-oriented hierarchy internally. When working with matrices in Koma you'll almost always want to import koma.extensions.* This namespace defines some extension functions which would ordinarily be defined on Matrix itself but can't be for performance reasons. Since there are only Matrix extension functions defined in koma.extensions , it should be safe to star import it without polluting your workspace. If you don't import koma.extensions you'll be missing a lot of functionality including basic things like getters and setters. Creating Matrices Koma provides several functions for creating new matrices: // x is a 3x3 identity matrix var x = eye ( 3 ) // x is a 3x3 matrix of zeros x = zeros ( 3 , 3 ) // x is a 3x3 with Gaussian random noise, distribution 0,1 x = randn ( 3 , 3 ) // x is a 3x3 with uniform random noise x = rand ( 3 , 3 ) // x is a 4x5 matrix where the ith row and jth column has the value i+j*2 x = fill ( 4 , 5 ) { row , col -> row + col * 2.0 } val someData = arrayOf ( doubleArrayOf ( 1.0 , 2.0 , 3.0 ), doubleArrayOf ( 4.0 , 5.0 , 6.0 )) // x is a 2x3 matrix constructed from the data in a java array of arrays x = create ( someData ) See here for a complete list of available creators. There is also a DSL for matrix literals: // a is a 2x3 matrix filled with the numbers passed in val a = mat [ 1 , 2 , 3.3 end 4 , 5 , 6 ] Math Functions Matrices have useful map functions that return matrices for chaining operations (see here for a complete list). // Create a 3x3 identity and then add 0.1 to all elements val x = eye ( 3 ) + 0.1 // Map each element through a function that adds .01 val y = x . map { it + . 01 } // Map each element through a function that adds or subtracts depending on the element index val z = x . mapIndexed { row , col , ele -> if ( row > col ) ele + 1 else ele - 1 } // Are there any elements greater than 1? val hasGreater = x . any { it > 1 } // Are all elements greater than 1? val allGreater = x . all { it > 1 } // Print all the elements in row-order x . forEach { println ( it ) } // Print all the elements including their column number x . forEachIndexed { row , col , ele -> println ( \"$col $it\" ) } // Apply a function to a row at a time and store the outputs in a contiguous matrix val sins = x . mapRows { row -> sin ( row ) } // Print all elements greater than 1 x . each { if ( it > 1 ) println ( it ) } We can also do some linear algebra: // Matrix literal syntax, see creators.kt for // convenience functions like zeros(5,5) var A = mat [ 1 , 0 , 0 end 0 , 3 , 0 end 0 , 0 , 4 ] // Calculate the matrix inverse var Ainv = A . inv () var b = mat [ 2 , 2 , 4 ]. T // Use overloaded operators: // * is matrix multiplication var c = A * b + 1 // emul is element-wise multiplication var d = ( A emul A ) + 1 // Number of decimals to show format ( \"short\" ) println ( c ) Which produces: Output : mat [ 3.00 end 7.00 end 17.00 ] Many special functions are supported (see the matrix interface for a complete list): val a = 2 * eye ( 3 )+. 01 // eye is identity matrix a . chol () // Cholesky decomposition a . det () // Determinant a . diag () // Diagonal vector a . inv () // Matrix inverse a . norm () // Matrix norm Scalar functions can be applied elementwise to matrices (see here for a complete list): val x = create ( 0. . 100 )/ 5.0 // Matrix of 0, 1/5, 2/5, ... val y = sin ( x ) // Sin applied elementwise plot ( y ) // Plot of sin function Matrix indexing and slicing is supported (see here for a list of operators as well as the Matrix type): val x = randn ( 5 , 5 ) val y = x [ 0 , 0. . 4 ] // Grab the first row x [ 0. . 2 , 0. . 3 ] = zeros ( 3 , 4 ) // Set the upper-left 3x4 sub-matrix of x to zero A Matrix is convertible to an Iterable: val x = randn ( 5 , 5 ). toIterable () // Adds all elements and returns sum x . reduce { x , y -> x + y } // Returns list of all elements greater than 4 x . find { it > 4 }","title":"Matrices & Linear Algebra"},{"location":"General_Usage_Guide/Matrices_&_Linear_Algebra.html#matrices-linear-algebra","text":"While it is always possible to use the underlying container classes directly (see Modules for more information on backends), Koma provides a set of top-level convenience functions to make the experience more similar to other scientific environments. All these functions reside in the koma namespace and use the underlying object-oriented hierarchy internally. When working with matrices in Koma you'll almost always want to import koma.extensions.* This namespace defines some extension functions which would ordinarily be defined on Matrix itself but can't be for performance reasons. Since there are only Matrix extension functions defined in koma.extensions , it should be safe to star import it without polluting your workspace. If you don't import koma.extensions you'll be missing a lot of functionality including basic things like getters and setters.","title":"Matrices &amp; Linear Algebra"},{"location":"General_Usage_Guide/Matrices_&_Linear_Algebra.html#creating-matrices","text":"Koma provides several functions for creating new matrices: // x is a 3x3 identity matrix var x = eye ( 3 ) // x is a 3x3 matrix of zeros x = zeros ( 3 , 3 ) // x is a 3x3 with Gaussian random noise, distribution 0,1 x = randn ( 3 , 3 ) // x is a 3x3 with uniform random noise x = rand ( 3 , 3 ) // x is a 4x5 matrix where the ith row and jth column has the value i+j*2 x = fill ( 4 , 5 ) { row , col -> row + col * 2.0 } val someData = arrayOf ( doubleArrayOf ( 1.0 , 2.0 , 3.0 ), doubleArrayOf ( 4.0 , 5.0 , 6.0 )) // x is a 2x3 matrix constructed from the data in a java array of arrays x = create ( someData ) See here for a complete list of available creators. There is also a DSL for matrix literals: // a is a 2x3 matrix filled with the numbers passed in val a = mat [ 1 , 2 , 3.3 end 4 , 5 , 6 ]","title":"Creating Matrices"},{"location":"General_Usage_Guide/Matrices_&_Linear_Algebra.html#math-functions","text":"Matrices have useful map functions that return matrices for chaining operations (see here for a complete list). // Create a 3x3 identity and then add 0.1 to all elements val x = eye ( 3 ) + 0.1 // Map each element through a function that adds .01 val y = x . map { it + . 01 } // Map each element through a function that adds or subtracts depending on the element index val z = x . mapIndexed { row , col , ele -> if ( row > col ) ele + 1 else ele - 1 } // Are there any elements greater than 1? val hasGreater = x . any { it > 1 } // Are all elements greater than 1? val allGreater = x . all { it > 1 } // Print all the elements in row-order x . forEach { println ( it ) } // Print all the elements including their column number x . forEachIndexed { row , col , ele -> println ( \"$col $it\" ) } // Apply a function to a row at a time and store the outputs in a contiguous matrix val sins = x . mapRows { row -> sin ( row ) } // Print all elements greater than 1 x . each { if ( it > 1 ) println ( it ) } We can also do some linear algebra: // Matrix literal syntax, see creators.kt for // convenience functions like zeros(5,5) var A = mat [ 1 , 0 , 0 end 0 , 3 , 0 end 0 , 0 , 4 ] // Calculate the matrix inverse var Ainv = A . inv () var b = mat [ 2 , 2 , 4 ]. T // Use overloaded operators: // * is matrix multiplication var c = A * b + 1 // emul is element-wise multiplication var d = ( A emul A ) + 1 // Number of decimals to show format ( \"short\" ) println ( c ) Which produces: Output : mat [ 3.00 end 7.00 end 17.00 ] Many special functions are supported (see the matrix interface for a complete list): val a = 2 * eye ( 3 )+. 01 // eye is identity matrix a . chol () // Cholesky decomposition a . det () // Determinant a . diag () // Diagonal vector a . inv () // Matrix inverse a . norm () // Matrix norm Scalar functions can be applied elementwise to matrices (see here for a complete list): val x = create ( 0. . 100 )/ 5.0 // Matrix of 0, 1/5, 2/5, ... val y = sin ( x ) // Sin applied elementwise plot ( y ) // Plot of sin function Matrix indexing and slicing is supported (see here for a list of operators as well as the Matrix type): val x = randn ( 5 , 5 ) val y = x [ 0 , 0. . 4 ] // Grab the first row x [ 0. . 2 , 0. . 3 ] = zeros ( 3 , 4 ) // Set the upper-left 3x4 sub-matrix of x to zero A Matrix is convertible to an Iterable: val x = randn ( 5 , 5 ). toIterable () // Adds all elements and returns sum x . reduce { x , y -> x + y } // Returns list of all elements greater than 4 x . find { it > 4 }","title":"Math Functions"},{"location":"General_Usage_Guide/Modules.html","text":"Modules Koma consists of several modules: koma-core-api : Definition of fundamental Matrix and NDArray containers and top-level convenience functions that mimic Numpy/MATLAB functionality koma-core : Implementations of koma-core-api , with varying implementations available depending on platform koma-plotting : Implementation of 2D plotting of data in koma-core containers koma-logging : (deprecated now that alternative multiplatform logging libraries exist) koma-core-api Koma has two core interfaces that define the available data containers: Interface Dimensions Non-numerical Elements Math Operations Convenience Methods for Generation koma.matrix.Matrix<T> 2 N LinAlg + Elementwise Matrix.doubleFactory Matrix.floatFactory ... koma.ndarray.NDArray<T> Arbitrary Y Elementwise NDArray.createGeneric(...) NDArray.doubleFactory NDArray.floatFactory ... NDArray is a N-dimensional container that can hold arbitrary data types, with optimized implementations provided if they contain primitives. Matrix is a container that is restricted to 2D and numerical types, but enables linear algebra operations which can be accelerated by available platform libraries. The koma-core-api module defines all of the functionality that a koma-core implementation must provide. If you are writing a library that uses Koma and wish to allow the user to select their own core implementation, you can depend on the API artifact ( com.kyonifer:koma-core-api-{platform}:{version} ) only, thus allowing the user to select the core implementation when they depend on your library. koma-core Implementations An implementation of koma-core will provide implementations of the koma-core-api ; more specifically, it must implement Matrix , MatrixFactory , and NDArray . Koma provides a set of koma-core implementations you can choose from. All of the implementations currently share an implementation of NDArray , but delegate to different platform-specific libraries for linear algebra operations on Matrix . Here's a summary of the currently available backends: Artifact Supported Platforms Provided Classes ...which implement (respectively) koma-core-js JS DefaultDoubleMatrix * DefaultDoubleMatrixFactory Matrix<Double> MatrixFactory<Double> koma-core-mtj JVM MTJMatrix MTJMatrixFactory Matrix<Double> MatrixFactory<Double> koma-core-ejml JVM EJMLMatrix EJMLMatrixFactory Matrix<Double> MatrixFactory<Double> koma-core-jblas JVM JBlasMatrix JBlasMatrixFactory Matrix<Double> MatrixFactory<Double> koma-core-cblas Native CBlasMatrix CBlasMatrixFactory Matrix<Double> MatrixFactory<Double> Each of the backends uses an external library optimized for the platform to do the actual computation. For example, backend-matrix-ejml uses the EJML library for matrix operations. Thus the core interfaces above serve as a facade for dispatching work to platform-specific libraries in the backends. * Only contains support for basic functionality like additions or multiplications. koma-plotting Currently a WIP and only on the JVM, koma-plotting provides a barebones plotting capability. Enabling Backends On Kotlin/Native On Kotlin/Native the CBlas matrix backend is automatically included in the built artifacts by default, so no additional action is needed. The CBlasMatrix it provides will delegate work to the available blas and lapack libraries on your system. On Kotlin/JVM or Kotlin/JS Once you've chosen which backend you want to use, you can enable it by adding it to your gradle dependencies. For example, if you would like to use the Matrix container based on MTJ, you can add the corresponding artifact listed above to your build.gradle dependencies: dependencies { compile group: \"com.kyonifer\", name:\"koma-core-mtj\", version: $komaVersion } Koma should now pick up the new backend and use it for the top-level functions with no further action required. Continue to the next section if you are interested in forcing which backend is used. Multiple Backends at Once Koma supports using multiple backends simultaneously. This is useful if e.g. you need to work with multiple libraries which require different matrix containers. To begin, list more than one backend in your build.gradle dependencies. For example, to have both EJML and MTJ available you might write: dependencies { compile group: \"koma\", name:\"koma-core-mtj\", version: $komaVersion compile group: \"koma\", name:\"koma-core-ejml\", version: $komaVersion } You can now change the backend being used by koma's top-level functions at any time by setting a property in the koma namespace. In Kotlin this looks like: import koma.matrix.ejml.EJMLMatrixFactory import koma.matrix.mtj.MTJMatrixFactory // Make subsequent function calls use the EJML backend koma . factory = EJMLMatrixFactory () val a = zeros ( 3 , 3 ) // An EJMLMatrix // Make subsequent function calls use the MTJ backend // (doesnt affect previous returns) koma . factory = MTJMatrixFactory () val b = zeros ( 3 , 3 ) // Now returns an MTJMatrix This property can be set from Java and other languages via koma.Options.setFactory(...) . If not set, koma will default to using MTJ, EJML, and then JBlas in that order. It is also possible to create any matrix type manually by using the corresponding factory. For example, even if koma.factory is set to MTJMatrixFactory, you could write val eFac = EJMLMatrixFactory () val a = eFac . eye ( 3 , 3 ) val b = eFac . ones ( 3 , 3 ) println ( a + b ) // Uses EJML's addition algorithm, not MTJ's Interoperating with Other Linear Algebra Libraries Suppose you are using the EJML backend, and you need to use some code that is expecting to receive EJML's SimpleMatrix type. You can get ahold of the underlying SimpleMatrix by using the storage property: val a = EJMLMatrixFactory (). ones ( 3 , 3 ) somethingThatNeedsSimpleMatrices ( a . storage ) This makes it easy to use libraries requiring different matrix containers simultaneously.","title":"Modules"},{"location":"General_Usage_Guide/Modules.html#modules","text":"Koma consists of several modules: koma-core-api : Definition of fundamental Matrix and NDArray containers and top-level convenience functions that mimic Numpy/MATLAB functionality koma-core : Implementations of koma-core-api , with varying implementations available depending on platform koma-plotting : Implementation of 2D plotting of data in koma-core containers koma-logging : (deprecated now that alternative multiplatform logging libraries exist)","title":"Modules"},{"location":"General_Usage_Guide/Modules.html#koma-core-api","text":"Koma has two core interfaces that define the available data containers: Interface Dimensions Non-numerical Elements Math Operations Convenience Methods for Generation koma.matrix.Matrix<T> 2 N LinAlg + Elementwise Matrix.doubleFactory Matrix.floatFactory ... koma.ndarray.NDArray<T> Arbitrary Y Elementwise NDArray.createGeneric(...) NDArray.doubleFactory NDArray.floatFactory ... NDArray is a N-dimensional container that can hold arbitrary data types, with optimized implementations provided if they contain primitives. Matrix is a container that is restricted to 2D and numerical types, but enables linear algebra operations which can be accelerated by available platform libraries. The koma-core-api module defines all of the functionality that a koma-core implementation must provide. If you are writing a library that uses Koma and wish to allow the user to select their own core implementation, you can depend on the API artifact ( com.kyonifer:koma-core-api-{platform}:{version} ) only, thus allowing the user to select the core implementation when they depend on your library.","title":"koma-core-api"},{"location":"General_Usage_Guide/Modules.html#koma-core-implementations","text":"An implementation of koma-core will provide implementations of the koma-core-api ; more specifically, it must implement Matrix , MatrixFactory , and NDArray . Koma provides a set of koma-core implementations you can choose from. All of the implementations currently share an implementation of NDArray , but delegate to different platform-specific libraries for linear algebra operations on Matrix . Here's a summary of the currently available backends: Artifact Supported Platforms Provided Classes ...which implement (respectively) koma-core-js JS DefaultDoubleMatrix * DefaultDoubleMatrixFactory Matrix<Double> MatrixFactory<Double> koma-core-mtj JVM MTJMatrix MTJMatrixFactory Matrix<Double> MatrixFactory<Double> koma-core-ejml JVM EJMLMatrix EJMLMatrixFactory Matrix<Double> MatrixFactory<Double> koma-core-jblas JVM JBlasMatrix JBlasMatrixFactory Matrix<Double> MatrixFactory<Double> koma-core-cblas Native CBlasMatrix CBlasMatrixFactory Matrix<Double> MatrixFactory<Double> Each of the backends uses an external library optimized for the platform to do the actual computation. For example, backend-matrix-ejml uses the EJML library for matrix operations. Thus the core interfaces above serve as a facade for dispatching work to platform-specific libraries in the backends. * Only contains support for basic functionality like additions or multiplications.","title":"koma-core Implementations"},{"location":"General_Usage_Guide/Modules.html#koma-plotting","text":"Currently a WIP and only on the JVM, koma-plotting provides a barebones plotting capability.","title":"koma-plotting"},{"location":"General_Usage_Guide/Modules.html#enabling-backends","text":"","title":"Enabling Backends"},{"location":"General_Usage_Guide/Modules.html#on-kotlinnative","text":"On Kotlin/Native the CBlas matrix backend is automatically included in the built artifacts by default, so no additional action is needed. The CBlasMatrix it provides will delegate work to the available blas and lapack libraries on your system.","title":"On Kotlin/Native"},{"location":"General_Usage_Guide/Modules.html#on-kotlinjvm-or-kotlinjs","text":"Once you've chosen which backend you want to use, you can enable it by adding it to your gradle dependencies. For example, if you would like to use the Matrix container based on MTJ, you can add the corresponding artifact listed above to your build.gradle dependencies: dependencies { compile group: \"com.kyonifer\", name:\"koma-core-mtj\", version: $komaVersion } Koma should now pick up the new backend and use it for the top-level functions with no further action required. Continue to the next section if you are interested in forcing which backend is used.","title":"On Kotlin/JVM or Kotlin/JS"},{"location":"General_Usage_Guide/Modules.html#multiple-backends-at-once","text":"Koma supports using multiple backends simultaneously. This is useful if e.g. you need to work with multiple libraries which require different matrix containers. To begin, list more than one backend in your build.gradle dependencies. For example, to have both EJML and MTJ available you might write: dependencies { compile group: \"koma\", name:\"koma-core-mtj\", version: $komaVersion compile group: \"koma\", name:\"koma-core-ejml\", version: $komaVersion } You can now change the backend being used by koma's top-level functions at any time by setting a property in the koma namespace. In Kotlin this looks like: import koma.matrix.ejml.EJMLMatrixFactory import koma.matrix.mtj.MTJMatrixFactory // Make subsequent function calls use the EJML backend koma . factory = EJMLMatrixFactory () val a = zeros ( 3 , 3 ) // An EJMLMatrix // Make subsequent function calls use the MTJ backend // (doesnt affect previous returns) koma . factory = MTJMatrixFactory () val b = zeros ( 3 , 3 ) // Now returns an MTJMatrix This property can be set from Java and other languages via koma.Options.setFactory(...) . If not set, koma will default to using MTJ, EJML, and then JBlas in that order. It is also possible to create any matrix type manually by using the corresponding factory. For example, even if koma.factory is set to MTJMatrixFactory, you could write val eFac = EJMLMatrixFactory () val a = eFac . eye ( 3 , 3 ) val b = eFac . ones ( 3 , 3 ) println ( a + b ) // Uses EJML's addition algorithm, not MTJ's","title":"Multiple Backends at Once"},{"location":"General_Usage_Guide/Modules.html#interoperating-with-other-linear-algebra-libraries","text":"Suppose you are using the EJML backend, and you need to use some code that is expecting to receive EJML's SimpleMatrix type. You can get ahold of the underlying SimpleMatrix by using the storage property: val a = EJMLMatrixFactory (). ones ( 3 , 3 ) somethingThatNeedsSimpleMatrices ( a . storage ) This makes it easy to use libraries requiring different matrix containers simultaneously.","title":"Interoperating with Other Linear Algebra Libraries"},{"location":"General_Usage_Guide/N-Dimensional_Arrays.html","text":"N-Dimensional Containers Creating NDArrays NDArray is designed to hold high dimensional data of arbitrary type. Koma provides several functions for creating new NDArray s: // Creates a 3x4x5 container of type NDArray<String> filled with nulls NDArray . createGenericNulls < String >( 3 , 4 , 5 ) // Creates a 3x4x5 container of type NDArray<String> filled with \"hello\" NDArray . createGeneric ( 3 , 4 , 5 ) { \"hello\" } // Creates a 1x2 container of type NDArray<String> where each element's value is \"hi\" concatenated with the sum of its indices NDArray . createGeneric ( 1 , 2 ) { indices -> \"hi ${indices.sum()}\" } // Creates a 3x4x5 container of type NDArray<Float> with each element set to 4.5 NDArray . createGeneric ( 3 , 4 , 5 ) { 4.5f } As you can see, NDArray is capable of storing numerical and non-numerical data. However, storing numerical data the way that was shown in the last example is very inefficient as each element is boxed. You should therefore use the optimized factories if your NDArray is known to contain numerical primitives: // Creates a 3x5x6 NDArray<Double> filled with zeros backed by a non-boxing Array<Double> NDArray . doubleFactory . zeros ( 3 , 5 , 6 ) // Creates a 3x5x6 NDArray<Float> filled with uniformly random numbers backed by a non-boxing Array<Float> NDArray . floatFactory . rand ( 3 , 5 , 6 ) // Creates a 1x2x3x4x5 NDArray<Double> filled with ones backed by a non-boxing Array<Int> NDArray . intFactory . ones ( 1 , 2 , 3 , 4 , 5 ) // Creates a 8x8 NDArray<Double> filled with normally distributed random numbers backed by a non-boxing Array<Double> NDArray . doubleFactory . randn ( 8 , 8 ) Iteration Each element in an NDArray has two indices: Its N-dimensional index, which is an array of N numbers specifying the its N-dimensional location in the array Its linear index, which is a single number specifying its location in a flattened 1-dimensional version of the array You can iterate over NDArray s with either index: val a : NDArray < Double > = NDArray . doubleFactory . randn ( 3 , 5 , 6 ) // Iterate without an index present a . forEach { println ( \"Element is $it\" ) } // Iterate with the linear index available a . forEachIndexed { idx , ele -> println ( \"Element at $idx is $ele\" ) } // Iterate with the N-dimensional index array available a . forEachIndexedN { indices , value -> println ( \"Element at ${indices.joinToString(\" , \")} is $value\" ) } You can also map elements to another NDArray with either the full N-D index or a linear index: val a : NDArray < Float > = NDArray . floatFactory . ones ( 3 , 5 , 6 ) // Adds one to all elements a . map { ele -> ele + 1.0f } // Adds the linear index to the element's value a . mapIndexed { idx , ele -> ele + idx } // Sums the element's N-dimensional index and sets the value to it a . mapIndexedN { idx , ele -> idx . sum (). toFloat () } The full set of functionality can be seen here . For map and forEach , IndexedN at the end of the function name indicates you'd like to receive a N dimensional index, and Indexed indicates you'd like a linear index. You can also convert an NDArray into an iterator (this will produce each element in the same order as the linear index forEach would have): val a : NDArray < Float > = NDArray . floatFactory . ones ( 3 , 5 , 6 ) a . toIterable () Array Shape You can easily request the shape of the current container: val a : NDArray < Float > = NDArray . floatFactory . ones ( 3 , 5 , 6 ) a . shape () // arrayOf(3,5,6) You can also reshape the current container: val a : NDArray < Float > = NDArray . floatFactory . rand ( 3 , 5 , 6 ) val b = a . reshape ( 6 , 3 , 5 ) println ( a . shape ()) // arrayOf(3,5,6) println ( b . shape ()) // arrayOf(6,3,5) However, you cannot reshape if the number of elements in the new shape doesn't match the original: val a : NDArray < Float > = NDArray . floatFactory . rand ( 3 , 5 , 6 ) a . reshape ( 6 , 6 , 6 ) // Error: Not enough elements in the original to populate this one Reshaping always maintains the linear index of elements, but reinterprets the N-dimensional index of each element to fit the new shape. Thus a linear iteration of a reshaped container will be exactly the same as the original container: val a : NDArray < Float > = NDArray . floatFactory . rand ( 3 , 5 , 6 ) val b = a . reshape ( 6 , 3 , 5 ). toIterable (). iterator () val c = a . reshape ( 1 , 6 * 3 * 5 ). toIterable (). iterator () a . toIterable (). forEach { assert ( it == b . next () && it == c . next ()) } Numerical Operations If an NDArray's element type is numerical, numerical operations will be available to you. If you created your NDArray using the optimized factories mentioned previously these operations will also be non-boxing: val a = NDArray . floatFactory . rand ( 3 , 5 , 6 ) val b = 3 * a + a * a Note that linear algebra operations are not available as NDArray is not guaranteed to be 2D. If you know your container is 2D, you'll want to convert it to a Matrix . Conversions between types As NDArray is a supertype of Matrix , any Matrix can be passed into a method expecting an NDArray . To convert NDArray s to Matrix , you may use the toMatrix extension function: val a = NDArray . floatFactory . rand ( 3 , 6 ) a . toMatrix () Note that toMatrix is only available if the element type is known (i.e. NDArray is okay, NDArray is not) and will only be successful if the input NDArray has 1 or 2 dimensions. If you have a generic NDArray or are unsure how many dimensions the container has, you can use the toMatrixOrNull form: // Returns null, too many dimensions println ( NDArray . floatFactory . rand ( 3 , 5 , 6 ). toMatrixOrNull ()) // OK, 2 dimensions and numerical println ( NDArray . doubleFactory . rand ( 3 , 6 ). toMatrixOrNull ()) // Returns null, String is not numeric println ( NDArray . createGenericNulls < String >( 3 , 4 ). toMatrixOrNull ()) // Returns null, String is not numeric println ( NDArray . createGeneric ( 3 , 4 ){ \"hi\" }. toMatrixOrNull ()) // OK, 2 dimensions and numerical println ( NDArray . createGeneric ( 3 , 4 ){ 1.4 }. toMatrixOrNull ()) // OK, toMatrixOrNull available for generic Matrices fun < T > foo ( a : Matrix < T >) = a . toMatrixOrNull () // Error, \"a\" isn't known to be numeric fun < T > foo ( a : Matrix < T >) = a . toMatrix ()","title":"N-Dimensional Containers"},{"location":"General_Usage_Guide/N-Dimensional_Arrays.html#n-dimensional-containers","text":"","title":"N-Dimensional Containers"},{"location":"General_Usage_Guide/N-Dimensional_Arrays.html#creating-ndarrays","text":"NDArray is designed to hold high dimensional data of arbitrary type. Koma provides several functions for creating new NDArray s: // Creates a 3x4x5 container of type NDArray<String> filled with nulls NDArray . createGenericNulls < String >( 3 , 4 , 5 ) // Creates a 3x4x5 container of type NDArray<String> filled with \"hello\" NDArray . createGeneric ( 3 , 4 , 5 ) { \"hello\" } // Creates a 1x2 container of type NDArray<String> where each element's value is \"hi\" concatenated with the sum of its indices NDArray . createGeneric ( 1 , 2 ) { indices -> \"hi ${indices.sum()}\" } // Creates a 3x4x5 container of type NDArray<Float> with each element set to 4.5 NDArray . createGeneric ( 3 , 4 , 5 ) { 4.5f } As you can see, NDArray is capable of storing numerical and non-numerical data. However, storing numerical data the way that was shown in the last example is very inefficient as each element is boxed. You should therefore use the optimized factories if your NDArray is known to contain numerical primitives: // Creates a 3x5x6 NDArray<Double> filled with zeros backed by a non-boxing Array<Double> NDArray . doubleFactory . zeros ( 3 , 5 , 6 ) // Creates a 3x5x6 NDArray<Float> filled with uniformly random numbers backed by a non-boxing Array<Float> NDArray . floatFactory . rand ( 3 , 5 , 6 ) // Creates a 1x2x3x4x5 NDArray<Double> filled with ones backed by a non-boxing Array<Int> NDArray . intFactory . ones ( 1 , 2 , 3 , 4 , 5 ) // Creates a 8x8 NDArray<Double> filled with normally distributed random numbers backed by a non-boxing Array<Double> NDArray . doubleFactory . randn ( 8 , 8 )","title":"Creating NDArrays"},{"location":"General_Usage_Guide/N-Dimensional_Arrays.html#iteration","text":"Each element in an NDArray has two indices: Its N-dimensional index, which is an array of N numbers specifying the its N-dimensional location in the array Its linear index, which is a single number specifying its location in a flattened 1-dimensional version of the array You can iterate over NDArray s with either index: val a : NDArray < Double > = NDArray . doubleFactory . randn ( 3 , 5 , 6 ) // Iterate without an index present a . forEach { println ( \"Element is $it\" ) } // Iterate with the linear index available a . forEachIndexed { idx , ele -> println ( \"Element at $idx is $ele\" ) } // Iterate with the N-dimensional index array available a . forEachIndexedN { indices , value -> println ( \"Element at ${indices.joinToString(\" , \")} is $value\" ) } You can also map elements to another NDArray with either the full N-D index or a linear index: val a : NDArray < Float > = NDArray . floatFactory . ones ( 3 , 5 , 6 ) // Adds one to all elements a . map { ele -> ele + 1.0f } // Adds the linear index to the element's value a . mapIndexed { idx , ele -> ele + idx } // Sums the element's N-dimensional index and sets the value to it a . mapIndexedN { idx , ele -> idx . sum (). toFloat () } The full set of functionality can be seen here . For map and forEach , IndexedN at the end of the function name indicates you'd like to receive a N dimensional index, and Indexed indicates you'd like a linear index. You can also convert an NDArray into an iterator (this will produce each element in the same order as the linear index forEach would have): val a : NDArray < Float > = NDArray . floatFactory . ones ( 3 , 5 , 6 ) a . toIterable ()","title":"Iteration"},{"location":"General_Usage_Guide/N-Dimensional_Arrays.html#array-shape","text":"You can easily request the shape of the current container: val a : NDArray < Float > = NDArray . floatFactory . ones ( 3 , 5 , 6 ) a . shape () // arrayOf(3,5,6) You can also reshape the current container: val a : NDArray < Float > = NDArray . floatFactory . rand ( 3 , 5 , 6 ) val b = a . reshape ( 6 , 3 , 5 ) println ( a . shape ()) // arrayOf(3,5,6) println ( b . shape ()) // arrayOf(6,3,5) However, you cannot reshape if the number of elements in the new shape doesn't match the original: val a : NDArray < Float > = NDArray . floatFactory . rand ( 3 , 5 , 6 ) a . reshape ( 6 , 6 , 6 ) // Error: Not enough elements in the original to populate this one Reshaping always maintains the linear index of elements, but reinterprets the N-dimensional index of each element to fit the new shape. Thus a linear iteration of a reshaped container will be exactly the same as the original container: val a : NDArray < Float > = NDArray . floatFactory . rand ( 3 , 5 , 6 ) val b = a . reshape ( 6 , 3 , 5 ). toIterable (). iterator () val c = a . reshape ( 1 , 6 * 3 * 5 ). toIterable (). iterator () a . toIterable (). forEach { assert ( it == b . next () && it == c . next ()) }","title":"Array Shape"},{"location":"General_Usage_Guide/N-Dimensional_Arrays.html#numerical-operations","text":"If an NDArray's element type is numerical, numerical operations will be available to you. If you created your NDArray using the optimized factories mentioned previously these operations will also be non-boxing: val a = NDArray . floatFactory . rand ( 3 , 5 , 6 ) val b = 3 * a + a * a Note that linear algebra operations are not available as NDArray is not guaranteed to be 2D. If you know your container is 2D, you'll want to convert it to a Matrix .","title":"Numerical Operations"},{"location":"General_Usage_Guide/N-Dimensional_Arrays.html#conversions-between-types","text":"As NDArray is a supertype of Matrix , any Matrix can be passed into a method expecting an NDArray . To convert NDArray s to Matrix , you may use the toMatrix extension function: val a = NDArray . floatFactory . rand ( 3 , 6 ) a . toMatrix () Note that toMatrix is only available if the element type is known (i.e. NDArray is okay, NDArray is not) and will only be successful if the input NDArray has 1 or 2 dimensions. If you have a generic NDArray or are unsure how many dimensions the container has, you can use the toMatrixOrNull form: // Returns null, too many dimensions println ( NDArray . floatFactory . rand ( 3 , 5 , 6 ). toMatrixOrNull ()) // OK, 2 dimensions and numerical println ( NDArray . doubleFactory . rand ( 3 , 6 ). toMatrixOrNull ()) // Returns null, String is not numeric println ( NDArray . createGenericNulls < String >( 3 , 4 ). toMatrixOrNull ()) // Returns null, String is not numeric println ( NDArray . createGeneric ( 3 , 4 ){ \"hi\" }. toMatrixOrNull ()) // OK, 2 dimensions and numerical println ( NDArray . createGeneric ( 3 , 4 ){ 1.4 }. toMatrixOrNull ()) // OK, toMatrixOrNull available for generic Matrices fun < T > foo ( a : Matrix < T >) = a . toMatrixOrNull () // Error, \"a\" isn't known to be numeric fun < T > foo ( a : Matrix < T >) = a . toMatrix ()","title":"Conversions between types"},{"location":"General_Usage_Guide/Plotting.html","text":"Plotting Koma has limited plotting support via xchart (JVM only for now). The basic functionality mimics that of matplotlib and matlab: // Create some normal random noise var a = randn ( 100 , 2 ) var b = cumsum ( a ) figure ( 1 ) // Second parameter is color plot ( a , 'b' , \"First Run\" ) plot ( a + 1 , 'y' , \"First Run Offset\" ) xlabel ( \"Time (s)\" ) ylabel ( \"Magnitude\" ) title ( \"White Noise\" ) An imshow command is also available for 2D plotting: imshow ( randn ( 100 , 100 )) imshow ( randn ( 100 , 100 ), BufferedImage . TYPE_BYTE_INDEXED )","title":"Plotting"},{"location":"General_Usage_Guide/Plotting.html#plotting","text":"Koma has limited plotting support via xchart (JVM only for now). The basic functionality mimics that of matplotlib and matlab: // Create some normal random noise var a = randn ( 100 , 2 ) var b = cumsum ( a ) figure ( 1 ) // Second parameter is color plot ( a , 'b' , \"First Run\" ) plot ( a + 1 , 'y' , \"First Run Offset\" ) xlabel ( \"Time (s)\" ) ylabel ( \"Magnitude\" ) title ( \"White Noise\" ) An imshow command is also available for 2D plotting: imshow ( randn ( 100 , 100 )) imshow ( randn ( 100 , 100 ), BufferedImage . TYPE_BYTE_INDEXED )","title":"Plotting"},{"location":"General_Usage_Guide/Validation_DSL.html","text":"Matrix Validation DSL Koma provides definitions for a domain-specific language that you can use to validate matrices used as inputs to your functions in a consistent way. The rules throw detailed, human-readable exceptions using an appropriate Java exception class based on rules that look like this: import koma.* import koma.extensions.* import koma.util.validation.* fun mFunction ( foo : Matrix < Double >, bar : Matrix < Double >, baz : Matrix < Double >) { validate { foo ( \"foo\" ) { 1 x 'N' ; transposable } bar ( \"bar\" ) { 'N' x 'N' ; symmetric } baz ( \"baz\" ) { 'N' x 1 ; max = 5 } } /* Your code here */ } Some of the exceptions the above code could generate include: java.lang.IndexOutOfBoundsException: Invalid matrix dimensions. Matrix Required Actual ====== ======== ====== foo 1xN 1x2 bar NxN 2x2 baz Nx1 2x3 baz must have the same number of rows as foo has columns baz must have the same number of rows as bar has rows baz must have the same number of rows as bar has columns baz must have exactly 1 columns (has 3) or java.lang.IndexOutOfBoundsException: bar must be symmetric, but has dimensions 1x2 or java.lang.IllegalArgumentException: baz[0, 0] > 5.0 (value was 15.0) Annotated Syntax fun myFunction ( foo : Matrix < Double >, bar : Matrix < Double >, baz : Matrix < Double >) { validate { /* vvv ------------------------------------ Matrix to examine. vvvvv ------------------------------ Name to use in the exception. vvvvvvvvvvvvvvvvvvvvvvvv --- Rules to check the matrix */ foo ( \"foo\" ) { 1 x 'N' ; transposable } } } Rules Rules are regular Kotlin statements, which can be separated either by semicolons or newlines. The rules block will be evaluated with an instance of ValidaitonContext as its receiver. Syntax Description 1 x 2 or dim(1, 2) Verify the matrix has 1 row and 2 columns. Values can be any expression that evaluates to Int . The latter syntax is provided as an alternative if the order-of-operations for infix functions does something weird. 1 x 'N' Verify the matrix has 1 row and any number of columns; compare the column count to other things that use the character 'N' transposable The given dimensions can be in either order. So, a 1 x 3; transposable matrix can have either 1 row and 3 columns or 3 rows and 1 column. symmetric Verify that the matrix is symmetric max = 4.0 Specify a maximum allowable value for individual coefficients in the matrix. Can be any expression that evaluates to Double min = 2.0 Specify a minimum allowable value for individual coefficients in the matrix. Can be any expression that evaluates to Double Shorthand for a single Matrix If you've written a function that only has a single Matrix argument, you can use this shorthand syntax instead of a full validate block. fun myFunction ( foo : Matrix < Double >) { foo . validate ( \"foo\" ) { 1 x 3 ; transposable } /* Your code here */ } A Cautionary Example If you have more than one matrix, you should avoid the shorthand syntax because dimensions variables will not \"stick\" as you might expect. For example: fun myFunction ( foo : Matrix < Double >, bar : Matrix < Double >) { foo . validate ( \"foo\" ) { 1 x 'N' ; transposable } bar . validate ( \"bar\" ) { 'N' x 'N' } // <-- WILL NOT WORK /* Your code here */ } In that example, it will validate that bar is square, but not that its dimensions correspond with the number of columns in foo as you might expect. This is because each validate block allocates a separate ValidationContext that performs some of its validations at the end of the block. How it works Behind the scenes, the validation code uses kotlin extension methods to enable a syntax inspired by Kotlin's \"Type-safe builders\" feature . Each of the validation rules you define is calling an extension method on the ValidationContext class. If you'd like to extend the validation syntax yourself, you can do so by adding more extension methods to ValidationContext . bounds.kt probably offers the best example to work from.","title":"Matrix Validation DSL"},{"location":"General_Usage_Guide/Validation_DSL.html#matrix-validation-dsl","text":"Koma provides definitions for a domain-specific language that you can use to validate matrices used as inputs to your functions in a consistent way. The rules throw detailed, human-readable exceptions using an appropriate Java exception class based on rules that look like this: import koma.* import koma.extensions.* import koma.util.validation.* fun mFunction ( foo : Matrix < Double >, bar : Matrix < Double >, baz : Matrix < Double >) { validate { foo ( \"foo\" ) { 1 x 'N' ; transposable } bar ( \"bar\" ) { 'N' x 'N' ; symmetric } baz ( \"baz\" ) { 'N' x 1 ; max = 5 } } /* Your code here */ } Some of the exceptions the above code could generate include: java.lang.IndexOutOfBoundsException: Invalid matrix dimensions. Matrix Required Actual ====== ======== ====== foo 1xN 1x2 bar NxN 2x2 baz Nx1 2x3 baz must have the same number of rows as foo has columns baz must have the same number of rows as bar has rows baz must have the same number of rows as bar has columns baz must have exactly 1 columns (has 3) or java.lang.IndexOutOfBoundsException: bar must be symmetric, but has dimensions 1x2 or java.lang.IllegalArgumentException: baz[0, 0] > 5.0 (value was 15.0)","title":"Matrix Validation DSL"},{"location":"General_Usage_Guide/Validation_DSL.html#annotated-syntax","text":"fun myFunction ( foo : Matrix < Double >, bar : Matrix < Double >, baz : Matrix < Double >) { validate { /* vvv ------------------------------------ Matrix to examine. vvvvv ------------------------------ Name to use in the exception. vvvvvvvvvvvvvvvvvvvvvvvv --- Rules to check the matrix */ foo ( \"foo\" ) { 1 x 'N' ; transposable } } }","title":"Annotated Syntax"},{"location":"General_Usage_Guide/Validation_DSL.html#rules","text":"Rules are regular Kotlin statements, which can be separated either by semicolons or newlines. The rules block will be evaluated with an instance of ValidaitonContext as its receiver. Syntax Description 1 x 2 or dim(1, 2) Verify the matrix has 1 row and 2 columns. Values can be any expression that evaluates to Int . The latter syntax is provided as an alternative if the order-of-operations for infix functions does something weird. 1 x 'N' Verify the matrix has 1 row and any number of columns; compare the column count to other things that use the character 'N' transposable The given dimensions can be in either order. So, a 1 x 3; transposable matrix can have either 1 row and 3 columns or 3 rows and 1 column. symmetric Verify that the matrix is symmetric max = 4.0 Specify a maximum allowable value for individual coefficients in the matrix. Can be any expression that evaluates to Double min = 2.0 Specify a minimum allowable value for individual coefficients in the matrix. Can be any expression that evaluates to Double","title":"Rules"},{"location":"General_Usage_Guide/Validation_DSL.html#shorthand-for-a-single-matrix","text":"If you've written a function that only has a single Matrix argument, you can use this shorthand syntax instead of a full validate block. fun myFunction ( foo : Matrix < Double >) { foo . validate ( \"foo\" ) { 1 x 3 ; transposable } /* Your code here */ }","title":"Shorthand for a single Matrix"},{"location":"General_Usage_Guide/Validation_DSL.html#a-cautionary-example","text":"If you have more than one matrix, you should avoid the shorthand syntax because dimensions variables will not \"stick\" as you might expect. For example: fun myFunction ( foo : Matrix < Double >, bar : Matrix < Double >) { foo . validate ( \"foo\" ) { 1 x 'N' ; transposable } bar . validate ( \"bar\" ) { 'N' x 'N' } // <-- WILL NOT WORK /* Your code here */ } In that example, it will validate that bar is square, but not that its dimensions correspond with the number of columns in foo as you might expect. This is because each validate block allocates a separate ValidationContext that performs some of its validations at the end of the block.","title":"A Cautionary Example"},{"location":"General_Usage_Guide/Validation_DSL.html#how-it-works","text":"Behind the scenes, the validation code uses kotlin extension methods to enable a syntax inspired by Kotlin's \"Type-safe builders\" feature . Each of the validation rules you define is calling an extension method on the ValidationContext class. If you'd like to extend the validation syntax yourself, you can do so by adding more extension methods to ValidationContext . bounds.kt probably offers the best example to work from.","title":"How it works"},{"location":"General_Usage_Guide/Advanced/Build_From_Source.html","text":"Building Koma from Source Prerequisites Building Koma from source requires: A JDK targeting Java 8 on the system path git Building Grab a copy of the latest Koma code and enter the checked out directory: git clone https://github.com/kyonifer/koma.git cd koma Now run the gradle build command, passing in a parameter specifying which platform you are building for: # Produces .jars for all koma artifacts in ./build/jvm ./gradlew buildJvm # Outputs commonjs modules in ./node_modules/ ./gradlew buildJs # Outputs the following into ./build/native/<your_platform>: # - komaKlib.klib, a bundle which can be used by other Kotlin/native projects # - libkoma.so/.dll/.dylib, a native library that can be used by native applications # - libkoma_api.h, a C header file which can be used to link against libkoma # - komaExample.kexe, a native executable that can be run directly and embeds Koma ./gradlew buildNative To verify success, run some test code: # Runs the unit tests ./gradlew clean test # Runs a toy example assuming node is installed node examples/js/example.js # Runs the previously built example executable ./build/native/<your_platform>/komaExample.kexe Note About IDEs Koma JS and JVM can be imported into the Intellij IDEA IDE. Koma Native can be imported into CLion. In all cases, you can load Koma into the IDE by choosing to import an existing project and then selecting the settings.gradle file in the Koma root folder.","title":"Building Koma from Source"},{"location":"General_Usage_Guide/Advanced/Build_From_Source.html#building-koma-from-source","text":"","title":"Building Koma from Source"},{"location":"General_Usage_Guide/Advanced/Build_From_Source.html#prerequisites","text":"Building Koma from source requires: A JDK targeting Java 8 on the system path git","title":"Prerequisites"},{"location":"General_Usage_Guide/Advanced/Build_From_Source.html#building","text":"Grab a copy of the latest Koma code and enter the checked out directory: git clone https://github.com/kyonifer/koma.git cd koma Now run the gradle build command, passing in a parameter specifying which platform you are building for: # Produces .jars for all koma artifacts in ./build/jvm ./gradlew buildJvm # Outputs commonjs modules in ./node_modules/ ./gradlew buildJs # Outputs the following into ./build/native/<your_platform>: # - komaKlib.klib, a bundle which can be used by other Kotlin/native projects # - libkoma.so/.dll/.dylib, a native library that can be used by native applications # - libkoma_api.h, a C header file which can be used to link against libkoma # - komaExample.kexe, a native executable that can be run directly and embeds Koma ./gradlew buildNative To verify success, run some test code: # Runs the unit tests ./gradlew clean test # Runs a toy example assuming node is installed node examples/js/example.js # Runs the previously built example executable ./build/native/<your_platform>/komaExample.kexe","title":"Building"},{"location":"General_Usage_Guide/Advanced/Build_From_Source.html#note-about-ides","text":"Koma JS and JVM can be imported into the Intellij IDEA IDE. Koma Native can be imported into CLion. In all cases, you can load Koma into the IDE by choosing to import an existing project and then selecting the settings.gradle file in the Koma root folder.","title":"Note About IDEs"},{"location":"General_Usage_Guide/Advanced/Contributing.html","text":"Building the source Please see the instructions for building from source Unit Tests Koma's unit tests are located here . You can verify that the project still builds successfully on all three targets by running ./gradlew build Unit tests on platforms other than the JVM aren't currently available. Building docs To build the docs, you'll first need the python mkdocs and themes packages: pip install mkdocs pip install mkdocs-bootswatch Then run the following in the Koma root folder: ./build_docs","title":"Contributing"},{"location":"General_Usage_Guide/Advanced/Contributing.html#building-the-source","text":"Please see the instructions for building from source","title":"Building the source"},{"location":"General_Usage_Guide/Advanced/Contributing.html#unit-tests","text":"Koma's unit tests are located here . You can verify that the project still builds successfully on all three targets by running ./gradlew build Unit tests on platforms other than the JVM aren't currently available.","title":"Unit Tests"},{"location":"General_Usage_Guide/Advanced/Contributing.html#building-docs","text":"To build the docs, you'll first need the python mkdocs and themes packages: pip install mkdocs pip install mkdocs-bootswatch Then run the following in the Koma root folder: ./build_docs","title":"Building docs"},{"location":"Reference_API_Docs/index.html","text":"api Packages Name Summary koma koma.extensions koma.internal koma.internal.default.generated.matrix koma.internal.default.generated.ndarray koma.internal.default.utils koma.internal.ports koma.matrix koma.matrix.cblas koma.matrix.common koma.matrix.ejml koma.matrix.ejml.backend koma.matrix.jblas koma.matrix.jblas.backend koma.matrix.mtj koma.matrix.mtj.backend koma.ndarray koma.ndarray.default koma.util koma.util.test koma.util.validation Index All Types","title":"Index"},{"location":"Reference_API_Docs/index.html#packages","text":"Name Summary koma koma.extensions koma.internal koma.internal.default.generated.matrix koma.internal.default.generated.ndarray koma.internal.default.utils koma.internal.ports koma.matrix koma.matrix.cblas koma.matrix.common koma.matrix.ejml koma.matrix.ejml.backend koma.matrix.jblas koma.matrix.jblas.backend koma.matrix.mtj koma.matrix.mtj.backend koma.ndarray koma.ndarray.default koma.util koma.util.test koma.util.validation","title":"Packages"},{"location":"Reference_API_Docs/index.html#index","text":"All Types","title":"Index"},{"location":"Reference_API_Docs/alltypes/index.html","text":"All Types Name Summary koma.matrix.cblas.CBlasMatrix An implementation of the Matrix interface using raw cblas calls. koma.matrix.cblas.CBlasMatrixFactory koma.internal.default.generated.ndarray.DefaultByteNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.internal.default.generated.ndarray.DefaultByteNDArrayFactory koma.internal.default.generated.matrix.DefaultDoubleMatrix koma.internal.default.generated.matrix.DefaultDoubleMatrixFactory koma.internal.default.generated.ndarray.DefaultDoubleNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.ndarray.default.DefaultDoubleNDArray koma.internal.default.generated.ndarray.DefaultDoubleNDArrayFactory koma.internal.default.generated.matrix.DefaultFloatMatrix koma.internal.default.generated.matrix.DefaultFloatMatrixFactory koma.internal.default.generated.ndarray.DefaultFloatNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.ndarray.default.DefaultFloatNDArray koma.internal.default.generated.ndarray.DefaultFloatNDArrayFactory koma.internal.default.generated.ndarray.DefaultGenericNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.internal.default.generated.ndarray.DefaultGenericNDArrayFactory koma.internal.default.generated.matrix.DefaultIntMatrix koma.internal.default.generated.matrix.DefaultIntMatrixFactory koma.internal.default.generated.ndarray.DefaultIntNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.ndarray.default.DefaultIntNDArray koma.internal.default.generated.ndarray.DefaultIntNDArrayFactory koma.internal.default.generated.ndarray.DefaultLongNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.internal.default.generated.ndarray.DefaultLongNDArrayFactory koma.ndarray.default.DefaultNDArray koma.internal.default.generated.ndarray.DefaultShortNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.internal.default.generated.ndarray.DefaultShortNDArrayFactory no.uib.cipr.matrix.DenseMatrix (extensions in package koma.matrix.mtj.backend) kotlin.Double (extensions in package koma) kotlin.Double (extensions in package koma.extensions) kotlin.Double (extensions in package koma.matrix.ejml.backend) kotlin.Double (extensions in package koma.matrix.jblas.backend) kotlin.Double (extensions in package koma.matrix.mtj.backend) koma.matrix.common.DoubleFactoryBase Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. org.jblas.DoubleMatrix (extensions in package koma.matrix.jblas.backend) koma.matrix.common.DoubleMatrixBase Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. koma.matrix.ejml.EJMLMatrix An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . koma.matrix.ejml.EJMLMatrixFactory koma.ndarray.GenericNDArrayFactory A set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of the element. koma.util.IndexIterator An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data. kotlin.Int (extensions in package koma) kotlin.Int (extensions in package koma.extensions) kotlin.Int (extensions in package koma.matrix.ejml.backend) kotlin.Int (extensions in package koma.matrix.jblas.backend) kotlin.Int (extensions in package koma.matrix.mtj.backend) koma.matrix.jblas.JBlasMatrix An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . koma.matrix.jblas.JBlasMatrixFactory koma.internal.JvmMultifileClass koma.internal.JvmName koma.internal.KomaJsName koma.internal.KomaJvmMultifileClass koma.internal.KomaJvmName koma.internal.KomaRandom kotlin.collections.List (extensions in package koma.internal.default.utils) koma.matrix.mtj.MTJMatrix An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory . koma.matrix.mtj.MTJMatrixFactory koma.matrix.Matrix A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see koma.ndarray.NDArray . no.uib.cipr.matrix.Matrix (extensions in package koma.matrix.mtj.backend) koma.matrix.common.MatrixBase koma.matrix.MatrixFactory A set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc. koma.matrix.MatrixType koma.matrix.MatrixTypes Intended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T). koma.ndarray.NDArray A general N-dimensional container for arbitrary types. For this container to be useful, you'll probably want to import koma.extensions.*, which includes e.g. element getter/setters which are non boxed for primitives. koma.ndarray.NumericalNDArray An NDArray that holds a numerical type, such that math operations are available. koma.ndarray.NumericalNDArrayFactory A set of constructors for a koma NDArray containing numerical data. For generic factories, see GenericNDArrayFactory . org.ejml.simple.SimpleMatrix (extensions in package koma.matrix.ejml.backend) koma.UInt8 koma.util.validation.ValidationContext A lambda receiver with state and convenience methods for validating a group of matrices. koma.util.validation.Validator Callback used by ValidationContext after evaluating all rules. Subclass this if your validation plugin needs to hold all validation until the end. koma.matrix.ejml.backend.arr koma.matrix.jblas.backend.arr koma.mat A helper object that allows for quick construction of matrix literals. koma.matrix.ejml.backend.mat koma.matrix.jblas.backend.mat koma.matrix.mtj.backend.mat","title":"Index"},{"location":"Reference_API_Docs/alltypes/index.html#all-types","text":"Name Summary koma.matrix.cblas.CBlasMatrix An implementation of the Matrix interface using raw cblas calls. koma.matrix.cblas.CBlasMatrixFactory koma.internal.default.generated.ndarray.DefaultByteNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.internal.default.generated.ndarray.DefaultByteNDArrayFactory koma.internal.default.generated.matrix.DefaultDoubleMatrix koma.internal.default.generated.matrix.DefaultDoubleMatrixFactory koma.internal.default.generated.ndarray.DefaultDoubleNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.ndarray.default.DefaultDoubleNDArray koma.internal.default.generated.ndarray.DefaultDoubleNDArrayFactory koma.internal.default.generated.matrix.DefaultFloatMatrix koma.internal.default.generated.matrix.DefaultFloatMatrixFactory koma.internal.default.generated.ndarray.DefaultFloatNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.ndarray.default.DefaultFloatNDArray koma.internal.default.generated.ndarray.DefaultFloatNDArrayFactory koma.internal.default.generated.ndarray.DefaultGenericNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.internal.default.generated.ndarray.DefaultGenericNDArrayFactory koma.internal.default.generated.matrix.DefaultIntMatrix koma.internal.default.generated.matrix.DefaultIntMatrixFactory koma.internal.default.generated.ndarray.DefaultIntNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.ndarray.default.DefaultIntNDArray koma.internal.default.generated.ndarray.DefaultIntNDArrayFactory koma.internal.default.generated.ndarray.DefaultLongNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.internal.default.generated.ndarray.DefaultLongNDArrayFactory koma.ndarray.default.DefaultNDArray koma.internal.default.generated.ndarray.DefaultShortNDArray An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. koma.internal.default.generated.ndarray.DefaultShortNDArrayFactory no.uib.cipr.matrix.DenseMatrix (extensions in package koma.matrix.mtj.backend) kotlin.Double (extensions in package koma) kotlin.Double (extensions in package koma.extensions) kotlin.Double (extensions in package koma.matrix.ejml.backend) kotlin.Double (extensions in package koma.matrix.jblas.backend) kotlin.Double (extensions in package koma.matrix.mtj.backend) koma.matrix.common.DoubleFactoryBase Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. org.jblas.DoubleMatrix (extensions in package koma.matrix.jblas.backend) koma.matrix.common.DoubleMatrixBase Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. koma.matrix.ejml.EJMLMatrix An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . koma.matrix.ejml.EJMLMatrixFactory koma.ndarray.GenericNDArrayFactory A set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of the element. koma.util.IndexIterator An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data. kotlin.Int (extensions in package koma) kotlin.Int (extensions in package koma.extensions) kotlin.Int (extensions in package koma.matrix.ejml.backend) kotlin.Int (extensions in package koma.matrix.jblas.backend) kotlin.Int (extensions in package koma.matrix.mtj.backend) koma.matrix.jblas.JBlasMatrix An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . koma.matrix.jblas.JBlasMatrixFactory koma.internal.JvmMultifileClass koma.internal.JvmName koma.internal.KomaJsName koma.internal.KomaJvmMultifileClass koma.internal.KomaJvmName koma.internal.KomaRandom kotlin.collections.List (extensions in package koma.internal.default.utils) koma.matrix.mtj.MTJMatrix An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory . koma.matrix.mtj.MTJMatrixFactory koma.matrix.Matrix A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see koma.ndarray.NDArray . no.uib.cipr.matrix.Matrix (extensions in package koma.matrix.mtj.backend) koma.matrix.common.MatrixBase koma.matrix.MatrixFactory A set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc. koma.matrix.MatrixType koma.matrix.MatrixTypes Intended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T). koma.ndarray.NDArray A general N-dimensional container for arbitrary types. For this container to be useful, you'll probably want to import koma.extensions.*, which includes e.g. element getter/setters which are non boxed for primitives. koma.ndarray.NumericalNDArray An NDArray that holds a numerical type, such that math operations are available. koma.ndarray.NumericalNDArrayFactory A set of constructors for a koma NDArray containing numerical data. For generic factories, see GenericNDArrayFactory . org.ejml.simple.SimpleMatrix (extensions in package koma.matrix.ejml.backend) koma.UInt8 koma.util.validation.ValidationContext A lambda receiver with state and convenience methods for validating a group of matrices. koma.util.validation.Validator Callback used by ValidationContext after evaluating all rules. Subclass this if your validation plugin needs to hold all validation until the end. koma.matrix.ejml.backend.arr koma.matrix.jblas.backend.arr koma.mat A helper object that allows for quick construction of matrix literals. koma.matrix.ejml.backend.mat koma.matrix.jblas.backend.mat koma.matrix.mtj.backend.mat","title":"All Types"},{"location":"Reference_API_Docs/koma/index.html","text":"api / koma Package koma Types Name Summary UInt8 class ~~UInt8~~ mat object mat A helper object that allows for quick construction of matrix literals. Extensions for External Classes Name Summary kotlin.Double kotlin.Int Properties Name Summary E val E: Double LONG_NUMBER val LONG_NUMBER: String PI val PI: Double SCIENTIFIC_LONG_NUMBER val SCIENTIFIC_LONG_NUMBER: String SCIENTIFIC_NUMBER val SCIENTIFIC_NUMBER: String SCIENTIFIC_VERY_LONG_NUMBER val SCIENTIFIC_VERY_LONG_NUMBER: String SHORT_NUMBER val SHORT_NUMBER: String VERY_LONG_NUMBER val VERY_LONG_NUMBER: String all val all: IntRange doubleFactory var ~~doubleFactory~~: MatrixFactory < Matrix < Double >> end val end: Int factory var ~~factory~~: MatrixFactory < Matrix < Double >> floatFactory var ~~floatFactory~~: MatrixFactory < Matrix < Float >> intFactory var ~~intFactory~~: MatrixFactory < Matrix < Int >> matFormat var matFormat: String validateMatrices var validateMatrices: Boolean Whether to validate the dimensions, symmetry, and values of input matrices. false is faster, and should be used for realtime applications. true gives you much more useful errors when your matrices are shaped differently than your code expects. Functions Name Summary abs fun abs(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the absolute value of each element in the input matrix. fun abs(arr: Double ): Double A convenience function performing the abs operation via the kotlin.math equivalent call. fun abs(arr: Int ): Double A convenience function performing the abs via the kotlin.math equivalent call. acos fun acos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arccos of each element in the input matrix. fun acos(arr: Double ): Double fun acos(arr: Int ): Double A convenience function performing the acos operation via the kotlin.math equivalent call. allclose fun allclose(arr1: Matrix < Double >, arr2: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean Returns true if all elements are close to equal, as defined by two tolerance values. The matrices are considered equal if arange fun arange(start: Double , stop: Double , step: Double ): Matrix < Double > Creates an vector filled in by the given range information. The filled values will start at start and end at stop , with the interval between each value step . fun <T> arange(start: Double , stop: Double , step: Double , dtype: MatrixType < T >): Matrix < T > argMax fun argMax(arr: Matrix < Double >): Int Returns the index of the max element in the input matrix argMin fun argMin(arr: Matrix < Double >): Int Returns the index of the min element in the input matrix asin fun asin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arcsin of each element in the input matrix. fun asin(arr: Double ): Double fun asin(arr: Int ): Double A convenience function performing the asin operation via the kotlin.math equivalent call. atan fun atan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arctan of each element in the input matrix. fun atan(arr: Double ): Double fun atan(arr: Int ): Double A convenience function performing the atan operation via the kotlin.math equivalent call. atan2 fun atan2(x: Double , y: Double ): Double fun atan2(x: Int , y: Int ): Double A convenience function performing the atan2 operation via the kotlin.math equivalent call. ceil fun ceil(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation). fun ceil(num: Double ): Int A convenience function performing the ceil via the kotlin.math equivalent call. fun ceil(num: Int ): Double A convenience function performing the ceil operation via the kotlin.math equivalent call. cos fun cos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the cos of each element in the input matrix. fun cos(arr: Double ): Double fun cos(arr: Int ): Double A convenience function performing the cos operation via the kotlin.math equivalent call. create fun create(data: IntRange ): Matrix < Double > Creates a matrix filled with the given range of values. fun <T> create(data: IntRange , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: DoubleArray , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: DoubleArray , numRows: Int , numCols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: Array < DoubleArray >, dtype: MatrixType < T >): Matrix < T >``fun create(data: DoubleArray ): Matrix < Double > Creates a matrix filled with the given set of values as a row-vector. fun create(data: DoubleArray , numRows: Int , numCols: Int ): Matrix < Double > Creates a matrix filled with the given set of values in row-major order. fun create(data: Array < DoubleArray >): Matrix < Double > Creates a matrix filled with the given data, assuming input is row major. cross fun cross(vec1: Matrix < Double >, vec2: Matrix < Double >): Matrix < Double > Calculates the cross product of two vectors cumsum fun cumsum(arr: Matrix < Double >): Matrix < Double > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . diag fun diag(arr: Matrix < Double >): Matrix < Double > Extracts the diagonal of the matrix. dot fun dot(vec1: Matrix < Double >, vec2: Matrix < Double >): Double Calculates the cross product of two vectors epow fun epow(arr: Matrix < Double >, num: Double ): Matrix < Double > Returns a matrix consisting of each element in the input matrix raised to the given power. exp fun exp(arr: Matrix < Double >): Matrix < Double > Returns a matrix of E.pow(element) for each element in the input matrix. fun exp(arr: Double ): Double fun exp(arr: Int ): Double A convenience function performing the exp operation via the kotlin.math equivalent call. expm fun expm(A: Matrix < Double >): Matrix < Double > Calculates the matrix exponential of the input matrix. Note that this is NOT the same thing as the elementwise exponential function. eye fun eye(size: Int ): Matrix < Double > Creates a square identity matrix with the given size fun <T> eye(size: Int , dtype: MatrixType < T >): Matrix < T > fun <T> eye(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T >``fun eye(rows: Int , cols: Int ): Matrix < Double > Creates an identity matrix with the given size fill fun fill(rows: Int , cols: Int , func: ( Int , Int ) -> Double ): Matrix < Double > Creates a new matrix that fills all the values with the return values of func(row,val) fun <T> fill(rows: Int , cols: Int , dtype: MatrixType < T >, func: ( Int , Int ) -> T ): Matrix < T > fun <T> fill(rows: Int , cols: Int , value: T , dtype: MatrixType < T >): Matrix < T >``fun fill(rows: Int , cols: Int , value: Double ): Matrix < Double > Creates a new matrix that fills all the values with value floor fun floor(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation). fun floor(arr: Double ): Int fun floor(arr: Int ): Double A convenience function performing the floor operation via the kotlin.math equivalent call. format fun format(formatStr: String ): Unit Sets the format for Koma to display numbers in. For example, calling hstack fun hstack(vararg arrs: Matrix < Double >): Matrix < Double > ln fun ln(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the natural logarithm of each element in the input matrix. fun ln(arr: Double ): Double fun ln(arr: Int ): Double A convenience function performing the log operation via the kotlin.math equivalent call. log fun ~~log~~(arr: Matrix < Double >): Matrix < Double > fun ~~log~~(arr: Double ): Double fun ~~log~~(arr: Int ): Double logb fun logb(base: Int , arr: Matrix < Double >): Matrix < Double > Returns a matrix of the log-base-b of each element in the input matrix fun logb(base: Double , num: Double ): Double fun logb(base: Int , num: Int ): Double fun logb(base: Int , num: Double ): Double fun logb(base: Double , num: Int ): Double A convenience function performing the logb operation via the kotlin.math equivalent call. max fun max(arr: Matrix < Double >): Double Returns the max element in the input matrix fun max(num1: Double , num2: Double ): Double fun max(num1: Int , num2: Int ): Int fun max(num1: Double , num2: Int ): Double fun max(num1: Int , num2: Double ): Double A convenience function performing the max operation via the kotlin.math equivalent call. mean fun mean(arr: Matrix < Double >): Double Returns the mean element in the input matrix min fun min(arr: Matrix < Double >): Double Returns the min element in the input matrix fun min(num1: Double , num2: Double ): Double fun min(num1: Int , num2: Int ): Int fun min(num1: Int , num2: Double ): Double fun min(num1: Double , num2: Int ): Double A convenience function performing the min operation via the kotlin.math equivalent call. ones fun ones(rows: Int , columns: Int ): Matrix < Double > Creates a one-filled matrix with the given size fun <T> ones(rows: Int , columns: Int , dtype: MatrixType < T >): Matrix < T > pow fun pow(arr: Matrix < Double >, num: Int ): Matrix < Double > Returns a matrix which is the input matrix multiplied by itself num times (NOT elementwise multiplication!!). For elementwise see epow . fun pow(num: Double , exp: Double ): Double fun pow(num: Int , exp: Int ): Double fun pow(num: Double , exp: Int ): Double fun pow(num: Int , exp: Double ): Double A convenience function performing the pow operation via the kotlin.math equivalent call. rand fun rand(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit uniform random numbers fun <T> rand(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> ~~rand~~(rows: Int , cols: Int , seed: Long , dtype: MatrixType < T >): Matrix < T >``fun ~~rand~~(rows: Int , cols: Int , seed: Long ): Matrix < Double > Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers. randn fun randn(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit normal random numbers fun <T> randn(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> ~~randn~~(rows: Int , cols: Int , seed: Long , dtype: MatrixType < T >): Matrix < T >``fun ~~randn~~(rows: Int , cols: Int , seed: Long ): Matrix < Double > Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers. round fun round(arr: Matrix < Double >): Matrix < Double > Rounds each element to the nearest integer value. For elements exactly between integers, choose the highest value. fun round(arr: Double ): Double fun round(arr: Int ): Double A convenience function performing the round operation via the kotlin.math equivalent call. setSeed fun setSeed(seed: Long ): Unit sign fun sign(arr: Matrix < Double >): Matrix < Double > Calculates a matrix consisting of the sign of each element in the input matrix. Returns -1 for positive values, -1 for negative values, 0 for 0. fun sign(arr: Double ): Double fun sign(arr: Int ): Double A convenience function performing the sign operation via the kotlin.math equivalent call. sin fun sin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sin of each element in the input matrix fun sin(arr: Double ): Double fun sin(arr: Int ): Double A convenience function performing the sin operation via the kotlin.math equivalent call. skew fun skew(angles: Matrix < Double >): Matrix < Double > Converts a 3x1 or 1x3 vector of angles into the skew symmetric matrix equivalent. sqrt fun sqrt(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sqrt of each element in the input matrix. Does not yet support complex numbers. fun sqrt(arr: Double ): Double fun sqrt(arr: Int ): Double A convenience function performing the sqrt operation via the kotlin.math equivalent call. tan fun tan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the tan of each element in the input matrix fun tan(arr: Double ): Double fun tan(arr: Int ): Double A convenience function performing the tan operation via the kotlin.math equivalent call. vstack fun vstack(vararg arrs: Matrix < Double >): Matrix < Double > zeros fun zeros(rows: Int , cols: Int ): Matrix < Double > Creates a zero-filled matrix with the given size fun <T> zeros(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T >","title":"Index"},{"location":"Reference_API_Docs/koma/index.html#package-koma","text":"","title":"Package koma"},{"location":"Reference_API_Docs/koma/index.html#types","text":"Name Summary UInt8 class ~~UInt8~~ mat object mat A helper object that allows for quick construction of matrix literals.","title":"Types"},{"location":"Reference_API_Docs/koma/index.html#extensions-for-external-classes","text":"Name Summary kotlin.Double kotlin.Int","title":"Extensions for External Classes"},{"location":"Reference_API_Docs/koma/index.html#properties","text":"Name Summary E val E: Double LONG_NUMBER val LONG_NUMBER: String PI val PI: Double SCIENTIFIC_LONG_NUMBER val SCIENTIFIC_LONG_NUMBER: String SCIENTIFIC_NUMBER val SCIENTIFIC_NUMBER: String SCIENTIFIC_VERY_LONG_NUMBER val SCIENTIFIC_VERY_LONG_NUMBER: String SHORT_NUMBER val SHORT_NUMBER: String VERY_LONG_NUMBER val VERY_LONG_NUMBER: String all val all: IntRange doubleFactory var ~~doubleFactory~~: MatrixFactory < Matrix < Double >> end val end: Int factory var ~~factory~~: MatrixFactory < Matrix < Double >> floatFactory var ~~floatFactory~~: MatrixFactory < Matrix < Float >> intFactory var ~~intFactory~~: MatrixFactory < Matrix < Int >> matFormat var matFormat: String validateMatrices var validateMatrices: Boolean Whether to validate the dimensions, symmetry, and values of input matrices. false is faster, and should be used for realtime applications. true gives you much more useful errors when your matrices are shaped differently than your code expects.","title":"Properties"},{"location":"Reference_API_Docs/koma/index.html#functions","text":"Name Summary abs fun abs(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the absolute value of each element in the input matrix. fun abs(arr: Double ): Double A convenience function performing the abs operation via the kotlin.math equivalent call. fun abs(arr: Int ): Double A convenience function performing the abs via the kotlin.math equivalent call. acos fun acos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arccos of each element in the input matrix. fun acos(arr: Double ): Double fun acos(arr: Int ): Double A convenience function performing the acos operation via the kotlin.math equivalent call. allclose fun allclose(arr1: Matrix < Double >, arr2: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean Returns true if all elements are close to equal, as defined by two tolerance values. The matrices are considered equal if arange fun arange(start: Double , stop: Double , step: Double ): Matrix < Double > Creates an vector filled in by the given range information. The filled values will start at start and end at stop , with the interval between each value step . fun <T> arange(start: Double , stop: Double , step: Double , dtype: MatrixType < T >): Matrix < T > argMax fun argMax(arr: Matrix < Double >): Int Returns the index of the max element in the input matrix argMin fun argMin(arr: Matrix < Double >): Int Returns the index of the min element in the input matrix asin fun asin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arcsin of each element in the input matrix. fun asin(arr: Double ): Double fun asin(arr: Int ): Double A convenience function performing the asin operation via the kotlin.math equivalent call. atan fun atan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arctan of each element in the input matrix. fun atan(arr: Double ): Double fun atan(arr: Int ): Double A convenience function performing the atan operation via the kotlin.math equivalent call. atan2 fun atan2(x: Double , y: Double ): Double fun atan2(x: Int , y: Int ): Double A convenience function performing the atan2 operation via the kotlin.math equivalent call. ceil fun ceil(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation). fun ceil(num: Double ): Int A convenience function performing the ceil via the kotlin.math equivalent call. fun ceil(num: Int ): Double A convenience function performing the ceil operation via the kotlin.math equivalent call. cos fun cos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the cos of each element in the input matrix. fun cos(arr: Double ): Double fun cos(arr: Int ): Double A convenience function performing the cos operation via the kotlin.math equivalent call. create fun create(data: IntRange ): Matrix < Double > Creates a matrix filled with the given range of values. fun <T> create(data: IntRange , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: DoubleArray , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: DoubleArray , numRows: Int , numCols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: Array < DoubleArray >, dtype: MatrixType < T >): Matrix < T >``fun create(data: DoubleArray ): Matrix < Double > Creates a matrix filled with the given set of values as a row-vector. fun create(data: DoubleArray , numRows: Int , numCols: Int ): Matrix < Double > Creates a matrix filled with the given set of values in row-major order. fun create(data: Array < DoubleArray >): Matrix < Double > Creates a matrix filled with the given data, assuming input is row major. cross fun cross(vec1: Matrix < Double >, vec2: Matrix < Double >): Matrix < Double > Calculates the cross product of two vectors cumsum fun cumsum(arr: Matrix < Double >): Matrix < Double > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . diag fun diag(arr: Matrix < Double >): Matrix < Double > Extracts the diagonal of the matrix. dot fun dot(vec1: Matrix < Double >, vec2: Matrix < Double >): Double Calculates the cross product of two vectors epow fun epow(arr: Matrix < Double >, num: Double ): Matrix < Double > Returns a matrix consisting of each element in the input matrix raised to the given power. exp fun exp(arr: Matrix < Double >): Matrix < Double > Returns a matrix of E.pow(element) for each element in the input matrix. fun exp(arr: Double ): Double fun exp(arr: Int ): Double A convenience function performing the exp operation via the kotlin.math equivalent call. expm fun expm(A: Matrix < Double >): Matrix < Double > Calculates the matrix exponential of the input matrix. Note that this is NOT the same thing as the elementwise exponential function. eye fun eye(size: Int ): Matrix < Double > Creates a square identity matrix with the given size fun <T> eye(size: Int , dtype: MatrixType < T >): Matrix < T > fun <T> eye(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T >``fun eye(rows: Int , cols: Int ): Matrix < Double > Creates an identity matrix with the given size fill fun fill(rows: Int , cols: Int , func: ( Int , Int ) -> Double ): Matrix < Double > Creates a new matrix that fills all the values with the return values of func(row,val) fun <T> fill(rows: Int , cols: Int , dtype: MatrixType < T >, func: ( Int , Int ) -> T ): Matrix < T > fun <T> fill(rows: Int , cols: Int , value: T , dtype: MatrixType < T >): Matrix < T >``fun fill(rows: Int , cols: Int , value: Double ): Matrix < Double > Creates a new matrix that fills all the values with value floor fun floor(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation). fun floor(arr: Double ): Int fun floor(arr: Int ): Double A convenience function performing the floor operation via the kotlin.math equivalent call. format fun format(formatStr: String ): Unit Sets the format for Koma to display numbers in. For example, calling hstack fun hstack(vararg arrs: Matrix < Double >): Matrix < Double > ln fun ln(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the natural logarithm of each element in the input matrix. fun ln(arr: Double ): Double fun ln(arr: Int ): Double A convenience function performing the log operation via the kotlin.math equivalent call. log fun ~~log~~(arr: Matrix < Double >): Matrix < Double > fun ~~log~~(arr: Double ): Double fun ~~log~~(arr: Int ): Double logb fun logb(base: Int , arr: Matrix < Double >): Matrix < Double > Returns a matrix of the log-base-b of each element in the input matrix fun logb(base: Double , num: Double ): Double fun logb(base: Int , num: Int ): Double fun logb(base: Int , num: Double ): Double fun logb(base: Double , num: Int ): Double A convenience function performing the logb operation via the kotlin.math equivalent call. max fun max(arr: Matrix < Double >): Double Returns the max element in the input matrix fun max(num1: Double , num2: Double ): Double fun max(num1: Int , num2: Int ): Int fun max(num1: Double , num2: Int ): Double fun max(num1: Int , num2: Double ): Double A convenience function performing the max operation via the kotlin.math equivalent call. mean fun mean(arr: Matrix < Double >): Double Returns the mean element in the input matrix min fun min(arr: Matrix < Double >): Double Returns the min element in the input matrix fun min(num1: Double , num2: Double ): Double fun min(num1: Int , num2: Int ): Int fun min(num1: Int , num2: Double ): Double fun min(num1: Double , num2: Int ): Double A convenience function performing the min operation via the kotlin.math equivalent call. ones fun ones(rows: Int , columns: Int ): Matrix < Double > Creates a one-filled matrix with the given size fun <T> ones(rows: Int , columns: Int , dtype: MatrixType < T >): Matrix < T > pow fun pow(arr: Matrix < Double >, num: Int ): Matrix < Double > Returns a matrix which is the input matrix multiplied by itself num times (NOT elementwise multiplication!!). For elementwise see epow . fun pow(num: Double , exp: Double ): Double fun pow(num: Int , exp: Int ): Double fun pow(num: Double , exp: Int ): Double fun pow(num: Int , exp: Double ): Double A convenience function performing the pow operation via the kotlin.math equivalent call. rand fun rand(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit uniform random numbers fun <T> rand(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> ~~rand~~(rows: Int , cols: Int , seed: Long , dtype: MatrixType < T >): Matrix < T >``fun ~~rand~~(rows: Int , cols: Int , seed: Long ): Matrix < Double > Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers. randn fun randn(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit normal random numbers fun <T> randn(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> ~~randn~~(rows: Int , cols: Int , seed: Long , dtype: MatrixType < T >): Matrix < T >``fun ~~randn~~(rows: Int , cols: Int , seed: Long ): Matrix < Double > Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers. round fun round(arr: Matrix < Double >): Matrix < Double > Rounds each element to the nearest integer value. For elements exactly between integers, choose the highest value. fun round(arr: Double ): Double fun round(arr: Int ): Double A convenience function performing the round operation via the kotlin.math equivalent call. setSeed fun setSeed(seed: Long ): Unit sign fun sign(arr: Matrix < Double >): Matrix < Double > Calculates a matrix consisting of the sign of each element in the input matrix. Returns -1 for positive values, -1 for negative values, 0 for 0. fun sign(arr: Double ): Double fun sign(arr: Int ): Double A convenience function performing the sign operation via the kotlin.math equivalent call. sin fun sin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sin of each element in the input matrix fun sin(arr: Double ): Double fun sin(arr: Int ): Double A convenience function performing the sin operation via the kotlin.math equivalent call. skew fun skew(angles: Matrix < Double >): Matrix < Double > Converts a 3x1 or 1x3 vector of angles into the skew symmetric matrix equivalent. sqrt fun sqrt(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sqrt of each element in the input matrix. Does not yet support complex numbers. fun sqrt(arr: Double ): Double fun sqrt(arr: Int ): Double A convenience function performing the sqrt operation via the kotlin.math equivalent call. tan fun tan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the tan of each element in the input matrix fun tan(arr: Double ): Double fun tan(arr: Int ): Double A convenience function performing the tan operation via the kotlin.math equivalent call. vstack fun vstack(vararg arrs: Matrix < Double >): Matrix < Double > zeros fun zeros(rows: Int , cols: Int ): Matrix < Double > Creates a zero-filled matrix with the given size fun <T> zeros(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T >","title":"Functions"},{"location":"Reference_API_Docs/koma/-e.html","text":"api / koma / E E val E: Double","title":" e"},{"location":"Reference_API_Docs/koma/-e.html#e","text":"val E: Double","title":"E"},{"location":"Reference_API_Docs/koma/-l-o-n-g_-n-u-m-b-e-r.html","text":"api / koma / LONG_NUMBER LONG_NUMBER val LONG_NUMBER: String","title":" l o n g  n u m b e r"},{"location":"Reference_API_Docs/koma/-l-o-n-g_-n-u-m-b-e-r.html#long_number","text":"val LONG_NUMBER: String","title":"LONG_NUMBER"},{"location":"Reference_API_Docs/koma/-p-i.html","text":"api / koma / PI PI val PI: Double","title":" p i"},{"location":"Reference_API_Docs/koma/-p-i.html#pi","text":"val PI: Double","title":"PI"},{"location":"Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-l-o-n-g_-n-u-m-b-e-r.html","text":"api / koma / SCIENTIFIC_LONG_NUMBER SCIENTIFIC_LONG_NUMBER val SCIENTIFIC_LONG_NUMBER: String","title":" s c i e n t i f i c  l o n g  n u m b e r"},{"location":"Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-l-o-n-g_-n-u-m-b-e-r.html#scientific_long_number","text":"val SCIENTIFIC_LONG_NUMBER: String","title":"SCIENTIFIC_LONG_NUMBER"},{"location":"Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-n-u-m-b-e-r.html","text":"api / koma / SCIENTIFIC_NUMBER SCIENTIFIC_NUMBER val SCIENTIFIC_NUMBER: String","title":" s c i e n t i f i c  n u m b e r"},{"location":"Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-n-u-m-b-e-r.html#scientific_number","text":"val SCIENTIFIC_NUMBER: String","title":"SCIENTIFIC_NUMBER"},{"location":"Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-v-e-r-y_-l-o-n-g_-n-u-m-b-e-r.html","text":"api / koma / SCIENTIFIC_VERY_LONG_NUMBER SCIENTIFIC_VERY_LONG_NUMBER val SCIENTIFIC_VERY_LONG_NUMBER: String","title":" s c i e n t i f i c  v e r y  l o n g  n u m b e r"},{"location":"Reference_API_Docs/koma/-s-c-i-e-n-t-i-f-i-c_-v-e-r-y_-l-o-n-g_-n-u-m-b-e-r.html#scientific_very_long_number","text":"val SCIENTIFIC_VERY_LONG_NUMBER: String","title":"SCIENTIFIC_VERY_LONG_NUMBER"},{"location":"Reference_API_Docs/koma/-s-h-o-r-t_-n-u-m-b-e-r.html","text":"api / koma / SHORT_NUMBER SHORT_NUMBER val SHORT_NUMBER: String","title":" s h o r t  n u m b e r"},{"location":"Reference_API_Docs/koma/-s-h-o-r-t_-n-u-m-b-e-r.html#short_number","text":"val SHORT_NUMBER: String","title":"SHORT_NUMBER"},{"location":"Reference_API_Docs/koma/-v-e-r-y_-l-o-n-g_-n-u-m-b-e-r.html","text":"api / koma / VERY_LONG_NUMBER VERY_LONG_NUMBER val VERY_LONG_NUMBER: String","title":" v e r y  l o n g  n u m b e r"},{"location":"Reference_API_Docs/koma/-v-e-r-y_-l-o-n-g_-n-u-m-b-e-r.html#very_long_number","text":"val VERY_LONG_NUMBER: String","title":"VERY_LONG_NUMBER"},{"location":"Reference_API_Docs/koma/abs.html","text":"api / koma / abs abs fun abs(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the absolute value of each element in the input matrix. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun abs(arr: Double ): Double A convenience function performing the abs operation via the kotlin.math equivalent call. fun abs(arr: Int ): Double A convenience function performing the abs via the kotlin.math equivalent call.","title":"Abs"},{"location":"Reference_API_Docs/koma/abs.html#abs","text":"fun abs(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the absolute value of each element in the input matrix.","title":"abs"},{"location":"Reference_API_Docs/koma/abs.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun abs(arr: Double ): Double A convenience function performing the abs operation via the kotlin.math equivalent call. fun abs(arr: Int ): Double A convenience function performing the abs via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/acos.html","text":"api / koma / acos acos fun acos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arccos of each element in the input matrix. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun acos(arr: Double ): Double fun acos(arr: Int ): Double A convenience function performing the acos operation via the kotlin.math equivalent call.","title":"Acos"},{"location":"Reference_API_Docs/koma/acos.html#acos","text":"fun acos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arccos of each element in the input matrix.","title":"acos"},{"location":"Reference_API_Docs/koma/acos.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun acos(arr: Double ): Double fun acos(arr: Int ): Double A convenience function performing the acos operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/all.html","text":"api / koma / all all val all: IntRange","title":"All"},{"location":"Reference_API_Docs/koma/all.html#all","text":"val all: IntRange","title":"all"},{"location":"Reference_API_Docs/koma/allclose.html","text":"api / koma / allclose allclose fun allclose(arr1: Matrix < Double >, arr2: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean Returns true if all elements are close to equal, as defined by two tolerance values. The matrices are considered equal if abs(ele1 - ele2) < (atol + rtol * abs(ele1)) is true elementwise for all elements ele1 in arr1 , koma.matrix.Matrix((kotlin.Double)), kotlin.Double, kotlin.Double)/arr1) and all elements ele2 in arr2 , koma.matrix.Matrix((kotlin.Double)), kotlin.Double, kotlin.Double)/arr2). Parameters arr1 - The first matrix to compare arr2 - The second matrix to compare rtol - The relative tolerance value atol - The absolute tolerance value","title":"Allclose"},{"location":"Reference_API_Docs/koma/allclose.html#allclose","text":"fun allclose(arr1: Matrix < Double >, arr2: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean Returns true if all elements are close to equal, as defined by two tolerance values. The matrices are considered equal if abs(ele1 - ele2) < (atol + rtol * abs(ele1)) is true elementwise for all elements ele1 in arr1 , koma.matrix.Matrix((kotlin.Double)), kotlin.Double, kotlin.Double)/arr1) and all elements ele2 in arr2 , koma.matrix.Matrix((kotlin.Double)), kotlin.Double, kotlin.Double)/arr2).","title":"allclose"},{"location":"Reference_API_Docs/koma/allclose.html#parameters","text":"arr1 - The first matrix to compare arr2 - The second matrix to compare rtol - The relative tolerance value atol - The absolute tolerance value","title":"Parameters"},{"location":"Reference_API_Docs/koma/arange.html","text":"api / koma / arange arange fun arange(start: Double , stop: Double , step: Double ): Matrix < Double > Creates an vector filled in by the given range information. The filled values will start at start and end at stop , with the interval between each value step . fun <T> arange(start: Double , stop: Double , step: Double , dtype: MatrixType < T >): Matrix < T >","title":"Arange"},{"location":"Reference_API_Docs/koma/arange.html#arange","text":"fun arange(start: Double , stop: Double , step: Double ): Matrix < Double > Creates an vector filled in by the given range information. The filled values will start at start and end at stop , with the interval between each value step . fun <T> arange(start: Double , stop: Double , step: Double , dtype: MatrixType < T >): Matrix < T >","title":"arange"},{"location":"Reference_API_Docs/koma/arg-max.html","text":"api / koma / argMax argMax fun argMax(arr: Matrix < Double >): Int Returns the index of the max element in the input matrix Parameters arr - An arbitrarily sized matrix Return The maximum value","title":"Arg max"},{"location":"Reference_API_Docs/koma/arg-max.html#argmax","text":"fun argMax(arr: Matrix < Double >): Int Returns the index of the max element in the input matrix","title":"argMax"},{"location":"Reference_API_Docs/koma/arg-max.html#parameters","text":"arr - An arbitrarily sized matrix Return The maximum value","title":"Parameters"},{"location":"Reference_API_Docs/koma/arg-min.html","text":"api / koma / argMin argMin fun argMin(arr: Matrix < Double >): Int Returns the index of the min element in the input matrix Parameters arr - An arbitrarily sized matrix Return The maximum value","title":"Arg min"},{"location":"Reference_API_Docs/koma/arg-min.html#argmin","text":"fun argMin(arr: Matrix < Double >): Int Returns the index of the min element in the input matrix","title":"argMin"},{"location":"Reference_API_Docs/koma/arg-min.html#parameters","text":"arr - An arbitrarily sized matrix Return The maximum value","title":"Parameters"},{"location":"Reference_API_Docs/koma/asin.html","text":"api / koma / asin asin fun asin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arcsin of each element in the input matrix. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun asin(arr: Double ): Double fun asin(arr: Int ): Double A convenience function performing the asin operation via the kotlin.math equivalent call.","title":"Asin"},{"location":"Reference_API_Docs/koma/asin.html#asin","text":"fun asin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arcsin of each element in the input matrix.","title":"asin"},{"location":"Reference_API_Docs/koma/asin.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun asin(arr: Double ): Double fun asin(arr: Int ): Double A convenience function performing the asin operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/atan.html","text":"api / koma / atan atan fun atan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arctan of each element in the input matrix. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun atan(arr: Double ): Double fun atan(arr: Int ): Double A convenience function performing the atan operation via the kotlin.math equivalent call.","title":"Atan"},{"location":"Reference_API_Docs/koma/atan.html#atan","text":"fun atan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the arctan of each element in the input matrix.","title":"atan"},{"location":"Reference_API_Docs/koma/atan.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun atan(arr: Double ): Double fun atan(arr: Int ): Double A convenience function performing the atan operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/atan2.html","text":"api / koma / atan2 atan2 fun atan2(x: Double , y: Double ): Double fun atan2(x: Int , y: Int ): Double A convenience function performing the atan2 operation via the kotlin.math equivalent call.","title":"Atan2"},{"location":"Reference_API_Docs/koma/atan2.html#atan2","text":"fun atan2(x: Double , y: Double ): Double fun atan2(x: Int , y: Int ): Double A convenience function performing the atan2 operation via the kotlin.math equivalent call.","title":"atan2"},{"location":"Reference_API_Docs/koma/ceil.html","text":"api / koma / ceil ceil fun ceil(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation). Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun ceil(num: Double ): Int A convenience function performing the ceil via the kotlin.math equivalent call. fun ceil(num: Int ): Double A convenience function performing the ceil operation via the kotlin.math equivalent call.","title":"Ceil"},{"location":"Reference_API_Docs/koma/ceil.html#ceil","text":"fun ceil(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation).","title":"ceil"},{"location":"Reference_API_Docs/koma/ceil.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun ceil(num: Double ): Int A convenience function performing the ceil via the kotlin.math equivalent call. fun ceil(num: Int ): Double A convenience function performing the ceil operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/cos.html","text":"api / koma / cos cos fun cos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the cos of each element in the input matrix. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun cos(arr: Double ): Double fun cos(arr: Int ): Double A convenience function performing the cos operation via the kotlin.math equivalent call.","title":"Cos"},{"location":"Reference_API_Docs/koma/cos.html#cos","text":"fun cos(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the cos of each element in the input matrix.","title":"cos"},{"location":"Reference_API_Docs/koma/cos.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun cos(arr: Double ): Double fun cos(arr: Int ): Double A convenience function performing the cos operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/create.html","text":"api / koma / create create fun create(data: IntRange ): Matrix < Double > Creates a matrix filled with the given range of values. fun <T> create(data: IntRange , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: DoubleArray , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: DoubleArray , numRows: Int , numCols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: Array < DoubleArray >, dtype: MatrixType < T >): Matrix < T >``fun create(data: DoubleArray ): Matrix < Double > Creates a matrix filled with the given set of values as a row-vector. fun create(data: DoubleArray , numRows: Int , numCols: Int ): Matrix < Double > Creates a matrix filled with the given set of values in row-major order. fun create(data: Array < DoubleArray >): Matrix < Double > Creates a matrix filled with the given data, assuming input is row major.","title":"Create"},{"location":"Reference_API_Docs/koma/create.html#create","text":"fun create(data: IntRange ): Matrix < Double > Creates a matrix filled with the given range of values. fun <T> create(data: IntRange , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: DoubleArray , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: DoubleArray , numRows: Int , numCols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> create(data: Array < DoubleArray >, dtype: MatrixType < T >): Matrix < T >``fun create(data: DoubleArray ): Matrix < Double > Creates a matrix filled with the given set of values as a row-vector. fun create(data: DoubleArray , numRows: Int , numCols: Int ): Matrix < Double > Creates a matrix filled with the given set of values in row-major order. fun create(data: Array < DoubleArray >): Matrix < Double > Creates a matrix filled with the given data, assuming input is row major.","title":"create"},{"location":"Reference_API_Docs/koma/cross.html","text":"api / koma / cross cross fun cross(vec1: Matrix < Double >, vec2: Matrix < Double >): Matrix < Double > Calculates the cross product of two vectors","title":"Cross"},{"location":"Reference_API_Docs/koma/cross.html#cross","text":"fun cross(vec1: Matrix < Double >, vec2: Matrix < Double >): Matrix < Double > Calculates the cross product of two vectors","title":"cross"},{"location":"Reference_API_Docs/koma/cumsum.html","text":"api / koma / cumsum cumsum fun cumsum(arr: Matrix < Double >): Matrix < Double > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . @param arr The matrix to calculate the cumsum on. Sum will be computed in row-major order. @return A 1x(arr.numRows*arr.numCols) vector storing the ongoing cumsum.","title":"Cumsum"},{"location":"Reference_API_Docs/koma/cumsum.html#cumsum","text":"fun cumsum(arr: Matrix < Double >): Matrix < Double > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . @param arr The matrix to calculate the cumsum on. Sum will be computed in row-major order. @return A 1x(arr.numRows*arr.numCols) vector storing the ongoing cumsum.","title":"cumsum"},{"location":"Reference_API_Docs/koma/diag.html","text":"api / koma / diag diag fun diag(arr: Matrix < Double >): Matrix < Double > Extracts the diagonal of the matrix. Parameters arr - An arbitrarily sized matrix Return a Nx1 column vector.","title":"Diag"},{"location":"Reference_API_Docs/koma/diag.html#diag","text":"fun diag(arr: Matrix < Double >): Matrix < Double > Extracts the diagonal of the matrix.","title":"diag"},{"location":"Reference_API_Docs/koma/diag.html#parameters","text":"arr - An arbitrarily sized matrix Return a Nx1 column vector.","title":"Parameters"},{"location":"Reference_API_Docs/koma/dot.html","text":"api / koma / dot dot fun dot(vec1: Matrix < Double >, vec2: Matrix < Double >): Double Calculates the cross product of two vectors","title":"Dot"},{"location":"Reference_API_Docs/koma/dot.html#dot","text":"fun dot(vec1: Matrix < Double >, vec2: Matrix < Double >): Double Calculates the cross product of two vectors","title":"dot"},{"location":"Reference_API_Docs/koma/double-factory.html","text":"api / koma / doubleFactory doubleFactory var ~~doubleFactory~~: MatrixFactory < Matrix < Double >> Deprecated: Use koma.matrix.Matrix.doubleFactory property instead","title":"Double factory"},{"location":"Reference_API_Docs/koma/double-factory.html#doublefactory","text":"var ~~doubleFactory~~: MatrixFactory < Matrix < Double >> Deprecated: Use koma.matrix.Matrix.doubleFactory property instead","title":"doubleFactory"},{"location":"Reference_API_Docs/koma/end.html","text":"api / koma / end end val end: Int","title":"End"},{"location":"Reference_API_Docs/koma/end.html#end","text":"val end: Int","title":"end"},{"location":"Reference_API_Docs/koma/epow.html","text":"api / koma / epow epow fun epow(arr: Matrix < Double >, num: Double ): Matrix < Double > Returns a matrix consisting of each element in the input matrix raised to the given power. Parameters arr - An arbitrarily sized matrix num - the power to raise the matrix to. Return A matrix consisting of the operation performed element-wise.","title":"Epow"},{"location":"Reference_API_Docs/koma/epow.html#epow","text":"fun epow(arr: Matrix < Double >, num: Double ): Matrix < Double > Returns a matrix consisting of each element in the input matrix raised to the given power.","title":"epow"},{"location":"Reference_API_Docs/koma/epow.html#parameters","text":"arr - An arbitrarily sized matrix num - the power to raise the matrix to. Return A matrix consisting of the operation performed element-wise.","title":"Parameters"},{"location":"Reference_API_Docs/koma/exp.html","text":"api / koma / exp exp fun exp(arr: Matrix < Double >): Matrix < Double > Returns a matrix of E.pow(element) for each element in the input matrix. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun exp(arr: Double ): Double fun exp(arr: Int ): Double A convenience function performing the exp operation via the kotlin.math equivalent call.","title":"Exp"},{"location":"Reference_API_Docs/koma/exp.html#exp","text":"fun exp(arr: Matrix < Double >): Matrix < Double > Returns a matrix of E.pow(element) for each element in the input matrix.","title":"exp"},{"location":"Reference_API_Docs/koma/exp.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun exp(arr: Double ): Double fun exp(arr: Int ): Double A convenience function performing the exp operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/expm.html","text":"api / koma / expm expm fun expm(A: Matrix < Double >): Matrix < Double > Calculates the matrix exponential of the input matrix. Note that this is NOT the same thing as the elementwise exponential function. Parameters A - The input matrix Return e to the A","title":"Expm"},{"location":"Reference_API_Docs/koma/expm.html#expm","text":"fun expm(A: Matrix < Double >): Matrix < Double > Calculates the matrix exponential of the input matrix. Note that this is NOT the same thing as the elementwise exponential function.","title":"expm"},{"location":"Reference_API_Docs/koma/expm.html#parameters","text":"A - The input matrix Return e to the A","title":"Parameters"},{"location":"Reference_API_Docs/koma/eye.html","text":"api / koma / eye eye fun eye(size: Int ): Matrix < Double > Creates a square identity matrix with the given size fun <T> eye(size: Int , dtype: MatrixType < T >): Matrix < T > fun <T> eye(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T >``fun eye(rows: Int , cols: Int ): Matrix < Double > Creates an identity matrix with the given size","title":"Eye"},{"location":"Reference_API_Docs/koma/eye.html#eye","text":"fun eye(size: Int ): Matrix < Double > Creates a square identity matrix with the given size fun <T> eye(size: Int , dtype: MatrixType < T >): Matrix < T > fun <T> eye(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T >``fun eye(rows: Int , cols: Int ): Matrix < Double > Creates an identity matrix with the given size","title":"eye"},{"location":"Reference_API_Docs/koma/factory.html","text":"api / koma / factory factory var ~~factory~~: MatrixFactory < Matrix < Double >> Deprecated: Use koma.matrix.Matrix.doubleFactory property instead","title":"Factory"},{"location":"Reference_API_Docs/koma/factory.html#factory","text":"var ~~factory~~: MatrixFactory < Matrix < Double >> Deprecated: Use koma.matrix.Matrix.doubleFactory property instead","title":"factory"},{"location":"Reference_API_Docs/koma/fill.html","text":"api / koma / fill fill fun fill(rows: Int , cols: Int , func: ( Int , Int ) -> Double ): Matrix < Double > Creates a new matrix that fills all the values with the return values of func(row,val) fun <T> fill(rows: Int , cols: Int , dtype: MatrixType < T >, func: ( Int , Int ) -> T ): Matrix < T > fun <T> fill(rows: Int , cols: Int , value: T , dtype: MatrixType < T >): Matrix < T >``fun fill(rows: Int , cols: Int , value: Double ): Matrix < Double > Creates a new matrix that fills all the values with value","title":"Fill"},{"location":"Reference_API_Docs/koma/fill.html#fill","text":"fun fill(rows: Int , cols: Int , func: ( Int , Int ) -> Double ): Matrix < Double > Creates a new matrix that fills all the values with the return values of func(row,val) fun <T> fill(rows: Int , cols: Int , dtype: MatrixType < T >, func: ( Int , Int ) -> T ): Matrix < T > fun <T> fill(rows: Int , cols: Int , value: T , dtype: MatrixType < T >): Matrix < T >``fun fill(rows: Int , cols: Int , value: Double ): Matrix < Double > Creates a new matrix that fills all the values with value","title":"fill"},{"location":"Reference_API_Docs/koma/float-factory.html","text":"api / koma / floatFactory floatFactory var ~~floatFactory~~: MatrixFactory < Matrix < Float >> Deprecated: Use koma.matrix.Matrix.floatFactory property instead","title":"Float factory"},{"location":"Reference_API_Docs/koma/float-factory.html#floatfactory","text":"var ~~floatFactory~~: MatrixFactory < Matrix < Float >> Deprecated: Use koma.matrix.Matrix.floatFactory property instead","title":"floatFactory"},{"location":"Reference_API_Docs/koma/floor.html","text":"api / koma / floor floor fun floor(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation). Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun floor(arr: Double ): Int fun floor(arr: Int ): Double A convenience function performing the floor operation via the kotlin.math equivalent call.","title":"Floor"},{"location":"Reference_API_Docs/koma/floor.html#floor","text":"fun floor(arr: Matrix < Double >): Matrix < Double > Rounds each element to the integer which is nearest to the element and still less than the element (i.e. truncation).","title":"floor"},{"location":"Reference_API_Docs/koma/floor.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun floor(arr: Double ): Int fun floor(arr: Int ): Double A convenience function performing the floor operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/format.html","text":"api / koma / format format fun format(formatStr: String ): Unit Sets the format for Koma to display numbers in. For example, calling format(\"long\") println(randn(3)) will cause println(someMatrix) to show more decimals (precision) than format(\"short\") println(randn(3)) format() must be called before a .toString() request to a Koma matrix in order to have any effect, but setting it will persist for all printing of matrices until called again with a different format string. The default setting is \"long\". Supported options are \"long\", \"short\", \"verylong\".","title":"Format"},{"location":"Reference_API_Docs/koma/format.html#format","text":"fun format(formatStr: String ): Unit Sets the format for Koma to display numbers in. For example, calling format(\"long\") println(randn(3)) will cause println(someMatrix) to show more decimals (precision) than format(\"short\") println(randn(3)) format() must be called before a .toString() request to a Koma matrix in order to have any effect, but setting it will persist for all printing of matrices until called again with a different format string. The default setting is \"long\". Supported options are \"long\", \"short\", \"verylong\".","title":"format"},{"location":"Reference_API_Docs/koma/hstack.html","text":"api / koma / hstack hstack fun hstack(vararg arrs: Matrix < Double >): Matrix < Double >","title":"Hstack"},{"location":"Reference_API_Docs/koma/hstack.html#hstack","text":"fun hstack(vararg arrs: Matrix < Double >): Matrix < Double >","title":"hstack"},{"location":"Reference_API_Docs/koma/int-factory.html","text":"api / koma / intFactory intFactory var ~~intFactory~~: MatrixFactory < Matrix < Int >> Deprecated: Use koma.matrix.Matrix.intFactory property instead","title":"Int factory"},{"location":"Reference_API_Docs/koma/int-factory.html#intfactory","text":"var ~~intFactory~~: MatrixFactory < Matrix < Int >> Deprecated: Use koma.matrix.Matrix.intFactory property instead","title":"intFactory"},{"location":"Reference_API_Docs/koma/ln.html","text":"api / koma / ln ln fun ln(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the natural logarithm of each element in the input matrix. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun ln(arr: Double ): Double fun ln(arr: Int ): Double A convenience function performing the log operation via the kotlin.math equivalent call.","title":"Ln"},{"location":"Reference_API_Docs/koma/ln.html#ln","text":"fun ln(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the natural logarithm of each element in the input matrix.","title":"ln"},{"location":"Reference_API_Docs/koma/ln.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun ln(arr: Double ): Double fun ln(arr: Int ): Double A convenience function performing the log operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/log.html","text":"api / koma / log log fun ~~log~~(arr: Matrix < Double >): Matrix < Double > Deprecated: Use ln() fun ~~log~~(arr: Double ): Double Deprecated: Please use ln() instead fun ~~log~~(arr: Int ): Double Deprecated: Use ln()","title":"Log"},{"location":"Reference_API_Docs/koma/log.html#log","text":"fun ~~log~~(arr: Matrix < Double >): Matrix < Double > Deprecated: Use ln() fun ~~log~~(arr: Double ): Double Deprecated: Please use ln() instead fun ~~log~~(arr: Int ): Double Deprecated: Use ln()","title":"log"},{"location":"Reference_API_Docs/koma/logb.html","text":"api / koma / logb logb fun logb(base: Int , arr: Matrix < Double >): Matrix < Double > Returns a matrix of the log-base-b of each element in the input matrix Parameters arr - An arbitrarily sized matrix base - the base of the log (i.e. performs log-base- base )/base) of arr )/arr) Return A matrix consisting of the operation performed element-wise. fun logb(base: Double , num: Double ): Double fun logb(base: Int , num: Int ): Double fun logb(base: Int , num: Double ): Double fun logb(base: Double , num: Int ): Double A convenience function performing the logb operation via the kotlin.math equivalent call.","title":"Logb"},{"location":"Reference_API_Docs/koma/logb.html#logb","text":"fun logb(base: Int , arr: Matrix < Double >): Matrix < Double > Returns a matrix of the log-base-b of each element in the input matrix","title":"logb"},{"location":"Reference_API_Docs/koma/logb.html#parameters","text":"arr - An arbitrarily sized matrix base - the base of the log (i.e. performs log-base- base )/base) of arr )/arr) Return A matrix consisting of the operation performed element-wise. fun logb(base: Double , num: Double ): Double fun logb(base: Int , num: Int ): Double fun logb(base: Int , num: Double ): Double fun logb(base: Double , num: Int ): Double A convenience function performing the logb operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/mat-format.html","text":"api / koma / matFormat matFormat var matFormat: String","title":"Mat format"},{"location":"Reference_API_Docs/koma/mat-format.html#matformat","text":"var matFormat: String","title":"matFormat"},{"location":"Reference_API_Docs/koma/max.html","text":"api / koma / max max fun max(arr: Matrix < Double >): Double Returns the max element in the input matrix Parameters arr - An arbitrarily sized matrix Return The maximum value fun max(num1: Double , num2: Double ): Double fun max(num1: Int , num2: Int ): Int fun max(num1: Double , num2: Int ): Double fun max(num1: Int , num2: Double ): Double A convenience function performing the max operation via the kotlin.math equivalent call.","title":"Max"},{"location":"Reference_API_Docs/koma/max.html#max","text":"fun max(arr: Matrix < Double >): Double Returns the max element in the input matrix","title":"max"},{"location":"Reference_API_Docs/koma/max.html#parameters","text":"arr - An arbitrarily sized matrix Return The maximum value fun max(num1: Double , num2: Double ): Double fun max(num1: Int , num2: Int ): Int fun max(num1: Double , num2: Int ): Double fun max(num1: Int , num2: Double ): Double A convenience function performing the max operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/mean.html","text":"api / koma / mean mean fun mean(arr: Matrix < Double >): Double Returns the mean element in the input matrix Parameters arr - An arbitrarily sized matrix Return The maximum value","title":"Mean"},{"location":"Reference_API_Docs/koma/mean.html#mean","text":"fun mean(arr: Matrix < Double >): Double Returns the mean element in the input matrix","title":"mean"},{"location":"Reference_API_Docs/koma/mean.html#parameters","text":"arr - An arbitrarily sized matrix Return The maximum value","title":"Parameters"},{"location":"Reference_API_Docs/koma/min.html","text":"api / koma / min min fun min(arr: Matrix < Double >): Double Returns the min element in the input matrix Parameters arr - An arbitrarily sized matrix Return The maximum value fun min(num1: Double , num2: Double ): Double fun min(num1: Int , num2: Int ): Int fun min(num1: Int , num2: Double ): Double fun min(num1: Double , num2: Int ): Double A convenience function performing the min operation via the kotlin.math equivalent call.","title":"Min"},{"location":"Reference_API_Docs/koma/min.html#min","text":"fun min(arr: Matrix < Double >): Double Returns the min element in the input matrix","title":"min"},{"location":"Reference_API_Docs/koma/min.html#parameters","text":"arr - An arbitrarily sized matrix Return The maximum value fun min(num1: Double , num2: Double ): Double fun min(num1: Int , num2: Int ): Int fun min(num1: Int , num2: Double ): Double fun min(num1: Double , num2: Int ): Double A convenience function performing the min operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/ones.html","text":"api / koma / ones ones fun ones(rows: Int , columns: Int ): Matrix < Double > Creates a one-filled matrix with the given size fun <T> ones(rows: Int , columns: Int , dtype: MatrixType < T >): Matrix < T >","title":"Ones"},{"location":"Reference_API_Docs/koma/ones.html#ones","text":"fun ones(rows: Int , columns: Int ): Matrix < Double > Creates a one-filled matrix with the given size fun <T> ones(rows: Int , columns: Int , dtype: MatrixType < T >): Matrix < T >","title":"ones"},{"location":"Reference_API_Docs/koma/pow.html","text":"api / koma / pow pow fun pow(arr: Matrix < Double >, num: Int ): Matrix < Double > Returns a matrix which is the input matrix multiplied by itself num times (NOT elementwise multiplication!!). For elementwise see epow . Parameters arr - An arbitrarily sized matrix num - The integer power Return A matrix consisting of num matrix multiplies of the input. fun pow(num: Double , exp: Double ): Double fun pow(num: Int , exp: Int ): Double fun pow(num: Double , exp: Int ): Double fun pow(num: Int , exp: Double ): Double A convenience function performing the pow operation via the kotlin.math equivalent call.","title":"Pow"},{"location":"Reference_API_Docs/koma/pow.html#pow","text":"fun pow(arr: Matrix < Double >, num: Int ): Matrix < Double > Returns a matrix which is the input matrix multiplied by itself num times (NOT elementwise multiplication!!). For elementwise see epow .","title":"pow"},{"location":"Reference_API_Docs/koma/pow.html#parameters","text":"arr - An arbitrarily sized matrix num - The integer power Return A matrix consisting of num matrix multiplies of the input. fun pow(num: Double , exp: Double ): Double fun pow(num: Int , exp: Int ): Double fun pow(num: Double , exp: Int ): Double fun pow(num: Int , exp: Double ): Double A convenience function performing the pow operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/rand.html","text":"api / koma / rand rand fun rand(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit uniform random numbers fun <T> rand(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> ~~rand~~(rows: Int , cols: Int , seed: Long , dtype: MatrixType < T >): Matrix < T > Deprecated: Call setSeed and randn separately fun ~~rand~~(rows: Int , cols: Int , seed: Long ): Matrix < Double > Deprecated: Call setSeed and randn separately Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers.","title":"Rand"},{"location":"Reference_API_Docs/koma/rand.html#rand","text":"fun rand(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit uniform random numbers fun <T> rand(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> ~~rand~~(rows: Int , cols: Int , seed: Long , dtype: MatrixType < T >): Matrix < T > Deprecated: Call setSeed and randn separately fun ~~rand~~(rows: Int , cols: Int , seed: Long ): Matrix < Double > Deprecated: Call setSeed and randn separately Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers.","title":"rand"},{"location":"Reference_API_Docs/koma/randn.html","text":"api / koma / randn randn fun randn(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit normal random numbers fun <T> randn(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> ~~randn~~(rows: Int , cols: Int , seed: Long , dtype: MatrixType < T >): Matrix < T > Deprecated: Call setSeed and randn separately fun ~~randn~~(rows: Int , cols: Int , seed: Long ): Matrix < Double > Deprecated: Call setSeed and randn separately Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers.","title":"Randn"},{"location":"Reference_API_Docs/koma/randn.html#randn","text":"fun randn(rows: Int , cols: Int ): Matrix < Double > Creates an matrix filled with unit normal random numbers fun <T> randn(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T > fun <T> ~~randn~~(rows: Int , cols: Int , seed: Long , dtype: MatrixType < T >): Matrix < T > Deprecated: Call setSeed and randn separately fun ~~randn~~(rows: Int , cols: Int , seed: Long ): Matrix < Double > Deprecated: Call setSeed and randn separately Creates an matrix filled with unit normal random numbers, using the given seed for the RNG. Subsequent calls with the same seed will produce identical numbers.","title":"randn"},{"location":"Reference_API_Docs/koma/round.html","text":"api / koma / round round fun round(arr: Matrix < Double >): Matrix < Double > Rounds each element to the nearest integer value. For elements exactly between integers, choose the highest value. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun round(arr: Double ): Double fun round(arr: Int ): Double A convenience function performing the round operation via the kotlin.math equivalent call.","title":"Round"},{"location":"Reference_API_Docs/koma/round.html#round","text":"fun round(arr: Matrix < Double >): Matrix < Double > Rounds each element to the nearest integer value. For elements exactly between integers, choose the highest value.","title":"round"},{"location":"Reference_API_Docs/koma/round.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun round(arr: Double ): Double fun round(arr: Int ): Double A convenience function performing the round operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/set-seed.html","text":"api / koma / setSeed setSeed fun setSeed(seed: Long ): Unit","title":"Set seed"},{"location":"Reference_API_Docs/koma/set-seed.html#setseed","text":"fun setSeed(seed: Long ): Unit","title":"setSeed"},{"location":"Reference_API_Docs/koma/sign.html","text":"api / koma / sign sign fun sign(arr: Matrix < Double >): Matrix < Double > Calculates a matrix consisting of the sign of each element in the input matrix. Returns -1 for positive values, -1 for negative values, 0 for 0. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun sign(arr: Double ): Double fun sign(arr: Int ): Double A convenience function performing the sign operation via the kotlin.math equivalent call.","title":"Sign"},{"location":"Reference_API_Docs/koma/sign.html#sign","text":"fun sign(arr: Matrix < Double >): Matrix < Double > Calculates a matrix consisting of the sign of each element in the input matrix. Returns -1 for positive values, -1 for negative values, 0 for 0.","title":"sign"},{"location":"Reference_API_Docs/koma/sign.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun sign(arr: Double ): Double fun sign(arr: Int ): Double A convenience function performing the sign operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/sin.html","text":"api / koma / sin sin fun sin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sin of each element in the input matrix Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun sin(arr: Double ): Double fun sin(arr: Int ): Double A convenience function performing the sin operation via the kotlin.math equivalent call.","title":"Sin"},{"location":"Reference_API_Docs/koma/sin.html#sin","text":"fun sin(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sin of each element in the input matrix","title":"sin"},{"location":"Reference_API_Docs/koma/sin.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun sin(arr: Double ): Double fun sin(arr: Int ): Double A convenience function performing the sin operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/skew.html","text":"api / koma / skew skew fun skew(angles: Matrix < Double >): Matrix < Double > Converts a 3x1 or 1x3 vector of angles into the skew symmetric matrix equivalent. Parameters angles - The input matrix Return 3x3 skew symmetric matrix","title":"Skew"},{"location":"Reference_API_Docs/koma/skew.html#skew","text":"fun skew(angles: Matrix < Double >): Matrix < Double > Converts a 3x1 or 1x3 vector of angles into the skew symmetric matrix equivalent.","title":"skew"},{"location":"Reference_API_Docs/koma/skew.html#parameters","text":"angles - The input matrix Return 3x3 skew symmetric matrix","title":"Parameters"},{"location":"Reference_API_Docs/koma/sqrt.html","text":"api / koma / sqrt sqrt fun sqrt(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sqrt of each element in the input matrix. Does not yet support complex numbers. Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun sqrt(arr: Double ): Double fun sqrt(arr: Int ): Double A convenience function performing the sqrt operation via the kotlin.math equivalent call.","title":"Sqrt"},{"location":"Reference_API_Docs/koma/sqrt.html#sqrt","text":"fun sqrt(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the sqrt of each element in the input matrix. Does not yet support complex numbers.","title":"sqrt"},{"location":"Reference_API_Docs/koma/sqrt.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun sqrt(arr: Double ): Double fun sqrt(arr: Int ): Double A convenience function performing the sqrt operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/tan.html","text":"api / koma / tan tan fun tan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the tan of each element in the input matrix Parameters arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun tan(arr: Double ): Double fun tan(arr: Int ): Double A convenience function performing the tan operation via the kotlin.math equivalent call.","title":"Tan"},{"location":"Reference_API_Docs/koma/tan.html#tan","text":"fun tan(arr: Matrix < Double >): Matrix < Double > Returns a matrix of the tan of each element in the input matrix","title":"tan"},{"location":"Reference_API_Docs/koma/tan.html#parameters","text":"arr - An arbitrarily sized matrix Return A matrix consisting of the operation performed element-wise. fun tan(arr: Double ): Double fun tan(arr: Int ): Double A convenience function performing the tan operation via the kotlin.math equivalent call.","title":"Parameters"},{"location":"Reference_API_Docs/koma/validate-matrices.html","text":"api / koma / validateMatrices validateMatrices var validateMatrices: Boolean Whether to validate the dimensions, symmetry, and values of input matrices. false is faster, and should be used for realtime applications. true gives you much more useful errors when your matrices are shaped differently than your code expects.","title":"Validate matrices"},{"location":"Reference_API_Docs/koma/validate-matrices.html#validatematrices","text":"var validateMatrices: Boolean Whether to validate the dimensions, symmetry, and values of input matrices. false is faster, and should be used for realtime applications. true gives you much more useful errors when your matrices are shaped differently than your code expects.","title":"validateMatrices"},{"location":"Reference_API_Docs/koma/vstack.html","text":"api / koma / vstack vstack fun vstack(vararg arrs: Matrix < Double >): Matrix < Double >","title":"Vstack"},{"location":"Reference_API_Docs/koma/vstack.html#vstack","text":"fun vstack(vararg arrs: Matrix < Double >): Matrix < Double >","title":"vstack"},{"location":"Reference_API_Docs/koma/zeros.html","text":"api / koma / zeros zeros fun zeros(rows: Int , cols: Int ): Matrix < Double > Creates a zero-filled matrix with the given size fun <T> zeros(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T >","title":"Zeros"},{"location":"Reference_API_Docs/koma/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): Matrix < Double > Creates a zero-filled matrix with the given size fun <T> zeros(rows: Int , cols: Int , dtype: MatrixType < T >): Matrix < T >","title":"zeros"},{"location":"Reference_API_Docs/koma/-u-int8/index.html","text":"api / koma / UInt8 UInt8 class ~~UInt8~~ Deprecated: Use kotlin's UInt inline classes Constructors Name Summary <init> UInt8(init: Short ) UInt8(init: Byte ) Properties Name Summary value var value: Byte Functions Name Summary divide fun divide(other: UInt8 ): UInt8 minus operator fun minus(other: UInt8 ): UInt8 plus operator fun plus(other: UInt8 ): UInt8 read fun read(): Int times operator fun times(other: UInt8 ): UInt8","title":"Index"},{"location":"Reference_API_Docs/koma/-u-int8/index.html#uint8","text":"class ~~UInt8~~ Deprecated: Use kotlin's UInt inline classes","title":"UInt8"},{"location":"Reference_API_Docs/koma/-u-int8/index.html#constructors","text":"Name Summary <init> UInt8(init: Short ) UInt8(init: Byte )","title":"Constructors"},{"location":"Reference_API_Docs/koma/-u-int8/index.html#properties","text":"Name Summary value var value: Byte","title":"Properties"},{"location":"Reference_API_Docs/koma/-u-int8/index.html#functions","text":"Name Summary divide fun divide(other: UInt8 ): UInt8 minus operator fun minus(other: UInt8 ): UInt8 plus operator fun plus(other: UInt8 ): UInt8 read fun read(): Int times operator fun times(other: UInt8 ): UInt8","title":"Functions"},{"location":"Reference_API_Docs/koma/-u-int8/-init-.html","text":"api / koma / UInt8 / <init> <init> UInt8(init: Short ) UInt8(init: Byte )","title":" init "},{"location":"Reference_API_Docs/koma/-u-int8/-init-.html#init","text":"UInt8(init: Short ) UInt8(init: Byte )","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma/-u-int8/divide.html","text":"api / koma / UInt8 / divide divide fun divide(other: UInt8 ): UInt8","title":"Divide"},{"location":"Reference_API_Docs/koma/-u-int8/divide.html#divide","text":"fun divide(other: UInt8 ): UInt8","title":"divide"},{"location":"Reference_API_Docs/koma/-u-int8/minus.html","text":"api / koma / UInt8 / minus minus operator fun minus(other: UInt8 ): UInt8","title":"Minus"},{"location":"Reference_API_Docs/koma/-u-int8/minus.html#minus","text":"operator fun minus(other: UInt8 ): UInt8","title":"minus"},{"location":"Reference_API_Docs/koma/-u-int8/plus.html","text":"api / koma / UInt8 / plus plus operator fun plus(other: UInt8 ): UInt8","title":"Plus"},{"location":"Reference_API_Docs/koma/-u-int8/plus.html#plus","text":"operator fun plus(other: UInt8 ): UInt8","title":"plus"},{"location":"Reference_API_Docs/koma/-u-int8/read.html","text":"api / koma / UInt8 / read read fun read(): Int","title":"Read"},{"location":"Reference_API_Docs/koma/-u-int8/read.html#read","text":"fun read(): Int","title":"read"},{"location":"Reference_API_Docs/koma/-u-int8/times.html","text":"api / koma / UInt8 / times times operator fun times(other: UInt8 ): UInt8","title":"Times"},{"location":"Reference_API_Docs/koma/-u-int8/times.html#times","text":"operator fun times(other: UInt8 ): UInt8","title":"times"},{"location":"Reference_API_Docs/koma/-u-int8/value.html","text":"api / koma / UInt8 / value value var value: Byte","title":"Value"},{"location":"Reference_API_Docs/koma/-u-int8/value.html#value","text":"var value: Byte","title":"value"},{"location":"Reference_API_Docs/koma/kotlin.-double/index.html","text":"api / koma / kotlin.Double Extensions for kotlin.Double Name Summary end infix fun Double .end(other: Double ): Pair < Double , Double > infix fun Double .end(other: Int ): Pair < Double , Double > A helper object for the builder DSL. See mat .","title":"Index"},{"location":"Reference_API_Docs/koma/kotlin.-double/index.html#extensions-for-kotlindouble","text":"Name Summary end infix fun Double .end(other: Double ): Pair < Double , Double > infix fun Double .end(other: Int ): Pair < Double , Double > A helper object for the builder DSL. See mat .","title":"Extensions for kotlin.Double"},{"location":"Reference_API_Docs/koma/kotlin.-double/end.html","text":"api / koma / kotlin.Double / end end infix fun Double .end(other: Double ): Pair < Double , Double > infix fun Double .end(other: Int ): Pair < Double , Double > A helper object for the builder DSL. See mat .","title":"End"},{"location":"Reference_API_Docs/koma/kotlin.-double/end.html#end","text":"infix fun Double .end(other: Double ): Pair < Double , Double > infix fun Double .end(other: Int ): Pair < Double , Double > A helper object for the builder DSL. See mat .","title":"end"},{"location":"Reference_API_Docs/koma/kotlin.-int/index.html","text":"api / koma / kotlin.Int Extensions for kotlin.Int Name Summary end infix fun Int .end(other: Double ): Pair < Double , Double > infix fun Int .end(other: Int ): Pair < Double , Double > A helper object for the builder DSL. See mat .","title":"Index"},{"location":"Reference_API_Docs/koma/kotlin.-int/index.html#extensions-for-kotlinint","text":"Name Summary end infix fun Int .end(other: Double ): Pair < Double , Double > infix fun Int .end(other: Int ): Pair < Double , Double > A helper object for the builder DSL. See mat .","title":"Extensions for kotlin.Int"},{"location":"Reference_API_Docs/koma/kotlin.-int/end.html","text":"api / koma / kotlin.Int / end end infix fun Int .end(other: Double ): Pair < Double , Double > infix fun Int .end(other: Int ): Pair < Double , Double > A helper object for the builder DSL. See mat .","title":"End"},{"location":"Reference_API_Docs/koma/kotlin.-int/end.html#end","text":"infix fun Int .end(other: Double ): Pair < Double , Double > infix fun Int .end(other: Int ): Pair < Double , Double > A helper object for the builder DSL. See mat .","title":"end"},{"location":"Reference_API_Docs/koma/mat/index.html","text":"api / koma / mat mat object mat A helper object that allows for quick construction of matrix literals. For example, one can write var a = mat[1,2,3 end 4,5,6] to get a 2x3 Matrix with the given values. end is a helper object that indicates the end of a row to this object. Note that one currently cannot use this function to generate a column vector: // ERROR: mat[1 end 2 end 3] Instead do this: // Define a column vector by transposing a row-vector mat[1 2 3].T Functions Name Summary get operator fun get(vararg ts: Any ): Matrix < Double > See mat description.","title":"Index"},{"location":"Reference_API_Docs/koma/mat/index.html#mat","text":"object mat A helper object that allows for quick construction of matrix literals. For example, one can write var a = mat[1,2,3 end 4,5,6] to get a 2x3 Matrix with the given values. end is a helper object that indicates the end of a row to this object. Note that one currently cannot use this function to generate a column vector: // ERROR: mat[1 end 2 end 3] Instead do this: // Define a column vector by transposing a row-vector mat[1 2 3].T","title":"mat"},{"location":"Reference_API_Docs/koma/mat/index.html#functions","text":"Name Summary get operator fun get(vararg ts: Any ): Matrix < Double > See mat description.","title":"Functions"},{"location":"Reference_API_Docs/koma/mat/get.html","text":"api / koma / mat / get get operator fun get(vararg ts: Any ): Matrix < Double > See mat description.","title":"Get"},{"location":"Reference_API_Docs/koma/mat/get.html#get","text":"operator fun get(vararg ts: Any ): Matrix < Double > See mat description.","title":"get"},{"location":"Reference_API_Docs/koma.extensions/index.html","text":"api / koma.extensions Package koma.extensions Extensions for External Classes Name Summary kotlin.Double kotlin.Int Functions Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun Matrix < Float >.all(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.all(f: ( Int ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean fun Matrix < Float >.allClose(other: Matrix < Float >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun Matrix < Float >.any(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.any(f: ( Int ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. create fun NumericalNDArrayFactory < Byte >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Byte ): NDArray < Byte > fun NumericalNDArrayFactory < Double >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Double ): NDArray < Double > fun NumericalNDArrayFactory < Float >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > fun NumericalNDArrayFactory < Int >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Int ): NDArray < Int > fun NumericalNDArrayFactory < Long >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Long ): NDArray < Long > fun NumericalNDArrayFactory < Short >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Short ): NDArray < Short > div operator fun NDArray < Byte >.div(other: Byte ): NDArray < Byte > operator fun NDArray < Double >.div(other: Double ): NDArray < Double > operator fun NDArray < Float >.div(other: Float ): NDArray < Float > operator fun NDArray < Int >.div(other: Int ): NDArray < Int > operator fun NDArray < Long >.div(other: Long ): NDArray < Long > operator fun NDArray < Short >.div(other: Short ): NDArray < Short > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun Matrix < Float >.fill(f: (row: Int , col: Int ) -> Float ): Matrix < Float > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > fun Matrix < Int >.fill(f: (row: Int , col: Int ) -> Int ): Matrix < Int > Fills the matrix with the values returned by the input function. fun NDArray < Byte >.fill(f: (idx: IntArray ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > fun NDArray < Long >.fill(f: (idx: IntArray ) -> Long ): NDArray < Long > fun NDArray < Short >.fill(f: (idx: IntArray ) -> Short ): NDArray < Short > fillBoth fun NDArray < Byte >.fillBoth(f: (nd: IntArray , linear: Int ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.fillBoth(f: (nd: IntArray , linear: Int ) -> Long ): NDArray < Long > fun NDArray < Short >.fillBoth(f: (nd: IntArray , linear: Int ) -> Short ): NDArray < Short > fillLinear fun NDArray < Byte >.fillLinear(f: (idx: Int ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.fillLinear(f: (idx: Int ) -> Long ): NDArray < Long > fun NDArray < Short >.fillLinear(f: (idx: Int ) -> Short ): NDArray < Short > forEach fun Matrix < Double >.forEach(f: ( Double ) -> Unit ): Unit fun Matrix < Float >.forEach(f: ( Float ) -> Unit ): Unit fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit fun Matrix < Int >.forEach(f: ( Int ) -> Unit ): Unit Passes each element in row major order into a function. fun NDArray < Byte >.forEach(f: (ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEach(f: (ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEach(f: (ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Int >.forEach(f: (ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEach(f: (ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEach(f: (ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun Matrix < Float >.forEachIndexed(f: (row: Int , col: Int , ele: Float ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit fun Matrix < Int >.forEachIndexed(f: (row: Int , col: Int , ele: Int ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Byte >.forEachIndexed(f: (idx: Int , ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEachIndexed(f: (idx: Int , ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEachIndexed(f: (idx: Int , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Byte >.forEachIndexedN(f: (idx: IntArray , ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEachIndexedN(f: (idx: IntArray , ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEachIndexedN(f: (idx: IntArray , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun Matrix < Double >.get(i: Int , j: Int ): Double operator fun Matrix < Float >.get(i: Int , j: Int ): Float operator fun <T> Matrix < T >.get(i: Int , j: Int ): T operator fun Matrix < Int >.get(i: Int , j: Int ): Int operator fun NDArray < Byte >.get(vararg indices: IntRange ): NDArray < Byte > operator fun NDArray < Byte >.get(vararg indices: Int ): Byte operator fun NDArray < Double >.get(vararg indices: IntRange ): NDArray < Double > operator fun NDArray < Double >.get(vararg indices: Int ): Double operator fun NDArray < Float >.get(vararg indices: IntRange ): NDArray < Float > operator fun NDArray < Float >.get(vararg indices: Int ): Float operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T operator fun NDArray < Int >.get(vararg indices: IntRange ): NDArray < Int > operator fun NDArray < Int >.get(vararg indices: Int ): Int operator fun NDArray < Long >.get(vararg indices: IntRange ): NDArray < Long > operator fun NDArray < Long >.get(vararg indices: Int ): Long operator fun NDArray < Short >.get(vararg indices: IntRange ): NDArray < Short > operator fun NDArray < Short >.get(vararg indices: Int ): Short operator fun Matrix < Double >.get(i: Int ): Double operator fun Matrix < Float >.get(i: Int ): Float operator fun <T> Matrix < T >.get(i: Int ): T operator fun Matrix < Int >.get(i: Int ): Int Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.get(rows: IntRange , cols: IntRange ): Matrix < Double > operator fun Matrix < Float >.get(rows: IntRange , cols: IntRange ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: IntRange , cols: IntRange ): Matrix < T > operator fun Matrix < Int >.get(rows: IntRange , cols: IntRange ): Matrix < Int > Allow slicing, e.g. matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.get(rows: IntRange , cols: Int ): Matrix < Double > operator fun Matrix < Float >.get(rows: IntRange , cols: Int ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: IntRange , cols: Int ): Matrix < T > operator fun Matrix < Int >.get(rows: IntRange , cols: Int ): Matrix < Int > Allows for slicing of the rows and selection of a single column operator fun Matrix < Double >.get(rows: Int , cols: IntRange ): Matrix < Double > operator fun Matrix < Float >.get(rows: Int , cols: IntRange ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: Int , cols: IntRange ): Matrix < T > operator fun Matrix < Int >.get(rows: Int , cols: IntRange ): Matrix < Int > Allows for slicing of the cols and selection of a single row map fun Matrix < Double >.map(f: ( Double ) -> Double ): Matrix < Double > fun Matrix < Float >.map(f: ( Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > fun Matrix < Int >.map(f: ( Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Byte >.map(f: ( Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.map(f: ( Double ) -> Double ): NDArray < Double > fun NDArray < Float >.map(f: ( Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.map(f: ( Int ) -> Int ): NDArray < Int > fun NDArray < Long >.map(f: ( Long ) -> Long ): NDArray < Long > fun NDArray < Short >.map(f: ( Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun Matrix < Float >.mapIndexed(f: (row: Int , col: Int , ele: Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > fun Matrix < Int >.mapIndexed(f: (row: Int , col: Int , ele: Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Byte >.mapIndexed(f: (idx: Int , ele: Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.mapIndexed(f: (idx: Int , ele: Long ) -> Long ): NDArray < Long > fun NDArray < Short >.mapIndexed(f: (idx: Int , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Byte >.mapIndexedN(f: (idx: IntArray , ele: Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.mapIndexedN(f: (idx: IntArray , ele: Long ) -> Long ): NDArray < Long > fun NDArray < Short >.mapIndexedN(f: (idx: IntArray , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Byte >.minus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.minus(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Long >.minus(other: Long ): NDArray < Long > operator fun NDArray < Long >.minus(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Short >.minus(other: Short ): NDArray < Short > operator fun NDArray < Short >.minus(other: NDArray < Short >): NDArray < Short >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars plus operator fun NDArray < Byte >.plus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.plus(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Long >.plus(other: Long ): NDArray < Long > operator fun NDArray < Long >.plus(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Short >.plus(other: Short ): NDArray < Short > operator fun NDArray < Short >.plus(other: NDArray < Short >): NDArray < Short >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Byte >.pow(exponent: Int ): NDArray < Byte > infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > infix fun NDArray < Long >.pow(exponent: Int ): NDArray < Long > infix fun NDArray < Short >.pow(exponent: Int ): NDArray < Short > reshape fun NDArray < Double >.reshape(rows: Int , cols: Int ): Matrix < Double > fun NDArray < Float >.reshape(rows: Int , cols: Int ): Matrix < Float > fun <T> Matrix < T >.reshape(rows: Int , cols: Int ): Matrix < T > fun NDArray < Int >.reshape(rows: Int , cols: Int ): Matrix < Int > Returns a new Matrix with the given shape, populated with the data in this array. fun NDArray < Byte >.reshape(vararg dims: Int ): NDArray < Byte > fun NDArray < Double >.reshape(vararg dims: Int ): NDArray < Double > fun NDArray < Float >.reshape(vararg dims: Int ): NDArray < Float > fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > fun NDArray < Int >.reshape(vararg dims: Int ): NDArray < Int > fun NDArray < Long >.reshape(vararg dims: Int ): NDArray < Long > fun NDArray < Short >.reshape(vararg dims: Int ): NDArray < Short > Returns a new NDArray with the given shape, populated with the data in this array. set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun Matrix < Float >.set(i: Int , v: Float ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit operator fun Matrix < Int >.set(i: Int , v: Int ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Float ): Unit operator fun Matrix < Float >.set(i: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun Matrix < Int >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Int ): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: NDArray < Byte >): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: Byte ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: NDArray < Long >): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: Long ): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: NDArray < Short >): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: Short ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Byte >.times(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Byte >.times(other: Byte ): NDArray < Byte > operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double > operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Float >.times(other: Float ): NDArray < Float > operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Int >.times(other: Int ): NDArray < Int > operator fun NDArray < Long >.times(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Long >.times(other: Long ): NDArray < Long > operator fun NDArray < Short >.times(other: NDArray < Short >): NDArray < Short > operator fun NDArray < Short >.times(other: Short ): NDArray < Short >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toByteArray fun NDArray < Byte >.toByteArray(): ByteArray Converts this NDArray into a one-dimensional ByteArray in row-major order. toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toFloatArray fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order. toIntArray fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order. toLongArray fun NDArray < Long >.toLongArray(): LongArray Converts this NDArray into a one-dimensional LongArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > fun NDArray < Float >.toMatrix(): Matrix < Float > fun NDArray < Int >.toMatrix(): Matrix < Int > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toShortArray fun NDArray < Short >.toShortArray(): ShortArray Converts this NDArray into a one-dimensional ShortArray in row-major order. toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Byte >.unaryMinus(): NDArray < Byte > operator fun NDArray < Double >.unaryMinus(): NDArray < Double > operator fun NDArray < Float >.unaryMinus(): NDArray < Float > operator fun NDArray < Int >.unaryMinus(): NDArray < Int > operator fun NDArray < Long >.unaryMinus(): NDArray < Long > operator fun NDArray < Short >.unaryMinus(): NDArray < Short >","title":"Index"},{"location":"Reference_API_Docs/koma.extensions/index.html#package-komaextensions","text":"","title":"Package koma.extensions"},{"location":"Reference_API_Docs/koma.extensions/index.html#extensions-for-external-classes","text":"Name Summary kotlin.Double kotlin.Int","title":"Extensions for External Classes"},{"location":"Reference_API_Docs/koma.extensions/index.html#functions","text":"Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun Matrix < Float >.all(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.all(f: ( Int ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean fun Matrix < Float >.allClose(other: Matrix < Float >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun Matrix < Float >.any(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.any(f: ( Int ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. create fun NumericalNDArrayFactory < Byte >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Byte ): NDArray < Byte > fun NumericalNDArrayFactory < Double >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Double ): NDArray < Double > fun NumericalNDArrayFactory < Float >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > fun NumericalNDArrayFactory < Int >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Int ): NDArray < Int > fun NumericalNDArrayFactory < Long >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Long ): NDArray < Long > fun NumericalNDArrayFactory < Short >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Short ): NDArray < Short > div operator fun NDArray < Byte >.div(other: Byte ): NDArray < Byte > operator fun NDArray < Double >.div(other: Double ): NDArray < Double > operator fun NDArray < Float >.div(other: Float ): NDArray < Float > operator fun NDArray < Int >.div(other: Int ): NDArray < Int > operator fun NDArray < Long >.div(other: Long ): NDArray < Long > operator fun NDArray < Short >.div(other: Short ): NDArray < Short > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun Matrix < Float >.fill(f: (row: Int , col: Int ) -> Float ): Matrix < Float > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > fun Matrix < Int >.fill(f: (row: Int , col: Int ) -> Int ): Matrix < Int > Fills the matrix with the values returned by the input function. fun NDArray < Byte >.fill(f: (idx: IntArray ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > fun NDArray < Long >.fill(f: (idx: IntArray ) -> Long ): NDArray < Long > fun NDArray < Short >.fill(f: (idx: IntArray ) -> Short ): NDArray < Short > fillBoth fun NDArray < Byte >.fillBoth(f: (nd: IntArray , linear: Int ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.fillBoth(f: (nd: IntArray , linear: Int ) -> Long ): NDArray < Long > fun NDArray < Short >.fillBoth(f: (nd: IntArray , linear: Int ) -> Short ): NDArray < Short > fillLinear fun NDArray < Byte >.fillLinear(f: (idx: Int ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.fillLinear(f: (idx: Int ) -> Long ): NDArray < Long > fun NDArray < Short >.fillLinear(f: (idx: Int ) -> Short ): NDArray < Short > forEach fun Matrix < Double >.forEach(f: ( Double ) -> Unit ): Unit fun Matrix < Float >.forEach(f: ( Float ) -> Unit ): Unit fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit fun Matrix < Int >.forEach(f: ( Int ) -> Unit ): Unit Passes each element in row major order into a function. fun NDArray < Byte >.forEach(f: (ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEach(f: (ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEach(f: (ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Int >.forEach(f: (ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEach(f: (ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEach(f: (ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun Matrix < Float >.forEachIndexed(f: (row: Int , col: Int , ele: Float ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit fun Matrix < Int >.forEachIndexed(f: (row: Int , col: Int , ele: Int ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Byte >.forEachIndexed(f: (idx: Int , ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEachIndexed(f: (idx: Int , ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEachIndexed(f: (idx: Int , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Byte >.forEachIndexedN(f: (idx: IntArray , ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEachIndexedN(f: (idx: IntArray , ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEachIndexedN(f: (idx: IntArray , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun Matrix < Double >.get(i: Int , j: Int ): Double operator fun Matrix < Float >.get(i: Int , j: Int ): Float operator fun <T> Matrix < T >.get(i: Int , j: Int ): T operator fun Matrix < Int >.get(i: Int , j: Int ): Int operator fun NDArray < Byte >.get(vararg indices: IntRange ): NDArray < Byte > operator fun NDArray < Byte >.get(vararg indices: Int ): Byte operator fun NDArray < Double >.get(vararg indices: IntRange ): NDArray < Double > operator fun NDArray < Double >.get(vararg indices: Int ): Double operator fun NDArray < Float >.get(vararg indices: IntRange ): NDArray < Float > operator fun NDArray < Float >.get(vararg indices: Int ): Float operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T operator fun NDArray < Int >.get(vararg indices: IntRange ): NDArray < Int > operator fun NDArray < Int >.get(vararg indices: Int ): Int operator fun NDArray < Long >.get(vararg indices: IntRange ): NDArray < Long > operator fun NDArray < Long >.get(vararg indices: Int ): Long operator fun NDArray < Short >.get(vararg indices: IntRange ): NDArray < Short > operator fun NDArray < Short >.get(vararg indices: Int ): Short operator fun Matrix < Double >.get(i: Int ): Double operator fun Matrix < Float >.get(i: Int ): Float operator fun <T> Matrix < T >.get(i: Int ): T operator fun Matrix < Int >.get(i: Int ): Int Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.get(rows: IntRange , cols: IntRange ): Matrix < Double > operator fun Matrix < Float >.get(rows: IntRange , cols: IntRange ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: IntRange , cols: IntRange ): Matrix < T > operator fun Matrix < Int >.get(rows: IntRange , cols: IntRange ): Matrix < Int > Allow slicing, e.g. matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.get(rows: IntRange , cols: Int ): Matrix < Double > operator fun Matrix < Float >.get(rows: IntRange , cols: Int ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: IntRange , cols: Int ): Matrix < T > operator fun Matrix < Int >.get(rows: IntRange , cols: Int ): Matrix < Int > Allows for slicing of the rows and selection of a single column operator fun Matrix < Double >.get(rows: Int , cols: IntRange ): Matrix < Double > operator fun Matrix < Float >.get(rows: Int , cols: IntRange ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: Int , cols: IntRange ): Matrix < T > operator fun Matrix < Int >.get(rows: Int , cols: IntRange ): Matrix < Int > Allows for slicing of the cols and selection of a single row map fun Matrix < Double >.map(f: ( Double ) -> Double ): Matrix < Double > fun Matrix < Float >.map(f: ( Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > fun Matrix < Int >.map(f: ( Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Byte >.map(f: ( Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.map(f: ( Double ) -> Double ): NDArray < Double > fun NDArray < Float >.map(f: ( Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.map(f: ( Int ) -> Int ): NDArray < Int > fun NDArray < Long >.map(f: ( Long ) -> Long ): NDArray < Long > fun NDArray < Short >.map(f: ( Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun Matrix < Float >.mapIndexed(f: (row: Int , col: Int , ele: Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > fun Matrix < Int >.mapIndexed(f: (row: Int , col: Int , ele: Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Byte >.mapIndexed(f: (idx: Int , ele: Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.mapIndexed(f: (idx: Int , ele: Long ) -> Long ): NDArray < Long > fun NDArray < Short >.mapIndexed(f: (idx: Int , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Byte >.mapIndexedN(f: (idx: IntArray , ele: Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.mapIndexedN(f: (idx: IntArray , ele: Long ) -> Long ): NDArray < Long > fun NDArray < Short >.mapIndexedN(f: (idx: IntArray , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Byte >.minus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.minus(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Long >.minus(other: Long ): NDArray < Long > operator fun NDArray < Long >.minus(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Short >.minus(other: Short ): NDArray < Short > operator fun NDArray < Short >.minus(other: NDArray < Short >): NDArray < Short >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars plus operator fun NDArray < Byte >.plus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.plus(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Long >.plus(other: Long ): NDArray < Long > operator fun NDArray < Long >.plus(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Short >.plus(other: Short ): NDArray < Short > operator fun NDArray < Short >.plus(other: NDArray < Short >): NDArray < Short >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Byte >.pow(exponent: Int ): NDArray < Byte > infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > infix fun NDArray < Long >.pow(exponent: Int ): NDArray < Long > infix fun NDArray < Short >.pow(exponent: Int ): NDArray < Short > reshape fun NDArray < Double >.reshape(rows: Int , cols: Int ): Matrix < Double > fun NDArray < Float >.reshape(rows: Int , cols: Int ): Matrix < Float > fun <T> Matrix < T >.reshape(rows: Int , cols: Int ): Matrix < T > fun NDArray < Int >.reshape(rows: Int , cols: Int ): Matrix < Int > Returns a new Matrix with the given shape, populated with the data in this array. fun NDArray < Byte >.reshape(vararg dims: Int ): NDArray < Byte > fun NDArray < Double >.reshape(vararg dims: Int ): NDArray < Double > fun NDArray < Float >.reshape(vararg dims: Int ): NDArray < Float > fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > fun NDArray < Int >.reshape(vararg dims: Int ): NDArray < Int > fun NDArray < Long >.reshape(vararg dims: Int ): NDArray < Long > fun NDArray < Short >.reshape(vararg dims: Int ): NDArray < Short > Returns a new NDArray with the given shape, populated with the data in this array. set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun Matrix < Float >.set(i: Int , v: Float ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit operator fun Matrix < Int >.set(i: Int , v: Int ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Float ): Unit operator fun Matrix < Float >.set(i: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun Matrix < Int >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Int ): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: NDArray < Byte >): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: Byte ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: NDArray < Long >): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: Long ): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: NDArray < Short >): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: Short ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Byte >.times(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Byte >.times(other: Byte ): NDArray < Byte > operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double > operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Float >.times(other: Float ): NDArray < Float > operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Int >.times(other: Int ): NDArray < Int > operator fun NDArray < Long >.times(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Long >.times(other: Long ): NDArray < Long > operator fun NDArray < Short >.times(other: NDArray < Short >): NDArray < Short > operator fun NDArray < Short >.times(other: Short ): NDArray < Short >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toByteArray fun NDArray < Byte >.toByteArray(): ByteArray Converts this NDArray into a one-dimensional ByteArray in row-major order. toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toFloatArray fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order. toIntArray fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order. toLongArray fun NDArray < Long >.toLongArray(): LongArray Converts this NDArray into a one-dimensional LongArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > fun NDArray < Float >.toMatrix(): Matrix < Float > fun NDArray < Int >.toMatrix(): Matrix < Int > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toShortArray fun NDArray < Short >.toShortArray(): ShortArray Converts this NDArray into a one-dimensional ShortArray in row-major order. toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Byte >.unaryMinus(): NDArray < Byte > operator fun NDArray < Double >.unaryMinus(): NDArray < Double > operator fun NDArray < Float >.unaryMinus(): NDArray < Float > operator fun NDArray < Int >.unaryMinus(): NDArray < Int > operator fun NDArray < Long >.unaryMinus(): NDArray < Long > operator fun NDArray < Short >.unaryMinus(): NDArray < Short >","title":"Functions"},{"location":"Reference_API_Docs/koma.extensions/all-close.html","text":"api / koma.extensions / allClose allClose @JvmName(\"allCloseDouble\") fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean @JvmName(\"allCloseFloat\") fun Matrix < Float >.allClose(other: Matrix < Float >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean","title":"All close"},{"location":"Reference_API_Docs/koma.extensions/all-close.html#allclose","text":"@JvmName(\"allCloseDouble\") fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean @JvmName(\"allCloseFloat\") fun Matrix < Float >.allClose(other: Matrix < Float >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean","title":"allClose"},{"location":"Reference_API_Docs/koma.extensions/all.html","text":"api / koma.extensions / all all @JvmName(\"allDouble\") inline fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean @JvmName(\"allFloat\") inline fun Matrix < Float >.all(f: ( Float ) -> Boolean ): Boolean @JvmName(\"allGeneric\") fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean @JvmName(\"allInt\") inline fun Matrix < Int >.all(f: ( Int ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. Parameters f - A function which takes in an element from the matrix and returns a Boolean. Return Returns true only if f is true for all elements of the input matrix","title":"All"},{"location":"Reference_API_Docs/koma.extensions/all.html#all","text":"@JvmName(\"allDouble\") inline fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean @JvmName(\"allFloat\") inline fun Matrix < Float >.all(f: ( Float ) -> Boolean ): Boolean @JvmName(\"allGeneric\") fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean @JvmName(\"allInt\") inline fun Matrix < Int >.all(f: ( Int ) -> Boolean ): Boolean Checks to see if all elements cause f to return true.","title":"all"},{"location":"Reference_API_Docs/koma.extensions/all.html#parameters","text":"f - A function which takes in an element from the matrix and returns a Boolean. Return Returns true only if f is true for all elements of the input matrix","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/any.html","text":"api / koma.extensions / any any @JvmName(\"anyDouble\") inline fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean @JvmName(\"anyFloat\") inline fun Matrix < Float >.any(f: ( Float ) -> Boolean ): Boolean @JvmName(\"anyGeneric\") fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean @JvmName(\"anyInt\") inline fun Matrix < Int >.any(f: ( Int ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. Parameters f - A function which takes in an element from the matrix and returns a Boolean. Return Whether or not any element, when passed into f, causes f to return true.","title":"Any"},{"location":"Reference_API_Docs/koma.extensions/any.html#any","text":"@JvmName(\"anyDouble\") inline fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean @JvmName(\"anyFloat\") inline fun Matrix < Float >.any(f: ( Float ) -> Boolean ): Boolean @JvmName(\"anyGeneric\") fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean @JvmName(\"anyInt\") inline fun Matrix < Int >.any(f: ( Int ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true.","title":"any"},{"location":"Reference_API_Docs/koma.extensions/any.html#parameters","text":"f - A function which takes in an element from the matrix and returns a Boolean. Return Whether or not any element, when passed into f, causes f to return true.","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/create.html","text":"api / koma.extensions / create create @JvmName(\"createByte\") inline fun NumericalNDArrayFactory < Byte >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Byte ): NDArray < Byte > @JvmName(\"createDouble\") inline fun NumericalNDArrayFactory < Double >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Double ): NDArray < Double > @JvmName(\"createFloat\") inline fun NumericalNDArrayFactory < Float >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Float ): NDArray < Float > @JvmName(\"createGeneric\") fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > @JvmName(\"createInt\") inline fun NumericalNDArrayFactory < Int >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Int ): NDArray < Int > @JvmName(\"createLong\") inline fun NumericalNDArrayFactory < Long >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Long ): NDArray < Long > @JvmName(\"createShort\") inline fun NumericalNDArrayFactory < Short >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Short ): NDArray < Short >","title":"Create"},{"location":"Reference_API_Docs/koma.extensions/create.html#create","text":"@JvmName(\"createByte\") inline fun NumericalNDArrayFactory < Byte >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Byte ): NDArray < Byte > @JvmName(\"createDouble\") inline fun NumericalNDArrayFactory < Double >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Double ): NDArray < Double > @JvmName(\"createFloat\") inline fun NumericalNDArrayFactory < Float >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Float ): NDArray < Float > @JvmName(\"createGeneric\") fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > @JvmName(\"createInt\") inline fun NumericalNDArrayFactory < Int >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Int ): NDArray < Int > @JvmName(\"createLong\") inline fun NumericalNDArrayFactory < Long >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Long ): NDArray < Long > @JvmName(\"createShort\") inline fun NumericalNDArrayFactory < Short >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Short ): NDArray < Short >","title":"create"},{"location":"Reference_API_Docs/koma.extensions/div.html","text":"api / koma.extensions / div div @JvmName(\"divByte\") operator fun NDArray < Byte >.div(other: Byte ): NDArray < Byte > @JvmName(\"divDouble\") operator fun NDArray < Double >.div(other: Double ): NDArray < Double > @JvmName(\"divFloat\") operator fun NDArray < Float >.div(other: Float ): NDArray < Float > @JvmName(\"divInt\") operator fun NDArray < Int >.div(other: Int ): NDArray < Int > @JvmName(\"divLong\") operator fun NDArray < Long >.div(other: Long ): NDArray < Long > @JvmName(\"divShort\") operator fun NDArray < Short >.div(other: Short ): NDArray < Short >","title":"Div"},{"location":"Reference_API_Docs/koma.extensions/div.html#div","text":"@JvmName(\"divByte\") operator fun NDArray < Byte >.div(other: Byte ): NDArray < Byte > @JvmName(\"divDouble\") operator fun NDArray < Double >.div(other: Double ): NDArray < Double > @JvmName(\"divFloat\") operator fun NDArray < Float >.div(other: Float ): NDArray < Float > @JvmName(\"divInt\") operator fun NDArray < Int >.div(other: Int ): NDArray < Int > @JvmName(\"divLong\") operator fun NDArray < Long >.div(other: Long ): NDArray < Long > @JvmName(\"divShort\") operator fun NDArray < Short >.div(other: Short ): NDArray < Short >","title":"div"},{"location":"Reference_API_Docs/koma.extensions/emul.html","text":"api / koma.extensions / emul emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices.","title":"Emul"},{"location":"Reference_API_Docs/koma.extensions/emul.html#emul","text":"infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices.","title":"emul"},{"location":"Reference_API_Docs/koma.extensions/fill-both.html","text":"api / koma.extensions / fillBoth fillBoth @JvmName(\"fillByteBoth\") inline fun NDArray < Byte >.fillBoth(f: (nd: IntArray , linear: Int ) -> Byte ): NDArray < Byte > @JvmName(\"fillDoubleBoth\") inline fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > @JvmName(\"fillFloatBoth\") inline fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > @JvmName(\"fillGenericBoth\") fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > @JvmName(\"fillIntBoth\") inline fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > @JvmName(\"fillLongBoth\") inline fun NDArray < Long >.fillBoth(f: (nd: IntArray , linear: Int ) -> Long ): NDArray < Long > @JvmName(\"fillShortBoth\") inline fun NDArray < Short >.fillBoth(f: (nd: IntArray , linear: Int ) -> Short ): NDArray < Short >","title":"Fill both"},{"location":"Reference_API_Docs/koma.extensions/fill-both.html#fillboth","text":"@JvmName(\"fillByteBoth\") inline fun NDArray < Byte >.fillBoth(f: (nd: IntArray , linear: Int ) -> Byte ): NDArray < Byte > @JvmName(\"fillDoubleBoth\") inline fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > @JvmName(\"fillFloatBoth\") inline fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > @JvmName(\"fillGenericBoth\") fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > @JvmName(\"fillIntBoth\") inline fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > @JvmName(\"fillLongBoth\") inline fun NDArray < Long >.fillBoth(f: (nd: IntArray , linear: Int ) -> Long ): NDArray < Long > @JvmName(\"fillShortBoth\") inline fun NDArray < Short >.fillBoth(f: (nd: IntArray , linear: Int ) -> Short ): NDArray < Short >","title":"fillBoth"},{"location":"Reference_API_Docs/koma.extensions/fill-linear.html","text":"api / koma.extensions / fillLinear fillLinear @JvmName(\"fillByteLinear\") inline fun NDArray < Byte >.fillLinear(f: (idx: Int ) -> Byte ): NDArray < Byte > @JvmName(\"fillDoubleLinear\") inline fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > @JvmName(\"fillFloatLinear\") inline fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > @JvmName(\"fillGenericLinear\") fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > @JvmName(\"fillIntLinear\") inline fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > @JvmName(\"fillLongLinear\") inline fun NDArray < Long >.fillLinear(f: (idx: Int ) -> Long ): NDArray < Long > @JvmName(\"fillShortLinear\") inline fun NDArray < Short >.fillLinear(f: (idx: Int ) -> Short ): NDArray < Short >","title":"Fill linear"},{"location":"Reference_API_Docs/koma.extensions/fill-linear.html#filllinear","text":"@JvmName(\"fillByteLinear\") inline fun NDArray < Byte >.fillLinear(f: (idx: Int ) -> Byte ): NDArray < Byte > @JvmName(\"fillDoubleLinear\") inline fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > @JvmName(\"fillFloatLinear\") inline fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > @JvmName(\"fillGenericLinear\") fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > @JvmName(\"fillIntLinear\") inline fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > @JvmName(\"fillLongLinear\") inline fun NDArray < Long >.fillLinear(f: (idx: Int ) -> Long ): NDArray < Long > @JvmName(\"fillShortLinear\") inline fun NDArray < Short >.fillLinear(f: (idx: Int ) -> Short ): NDArray < Short >","title":"fillLinear"},{"location":"Reference_API_Docs/koma.extensions/fill.html","text":"api / koma.extensions / fill fill @JvmName(\"fillDouble\") inline fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > @JvmName(\"fillFloat\") inline fun Matrix < Float >.fill(f: (row: Int , col: Int ) -> Float ): Matrix < Float > @JvmName(\"fillGeneric\") fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > @JvmName(\"fillInt\") inline fun Matrix < Int >.fill(f: (row: Int , col: Int ) -> Int ): Matrix < Int > Fills the matrix with the values returned by the input function. Parameters f - A function which takes row,col and returns the value to fill. Note that the return type must be the matrix primitive type (e.g. Double). @JvmName(\"fillByte\") inline fun NDArray < Byte >.fill(f: (idx: IntArray ) -> Byte ): NDArray < Byte > @JvmName(\"fillDouble\") inline fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > @JvmName(\"fillFloat\") inline fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > @JvmName(\"fillGeneric\") fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > @JvmName(\"fillInt\") inline fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > @JvmName(\"fillLong\") inline fun NDArray < Long >.fill(f: (idx: IntArray ) -> Long ): NDArray < Long > @JvmName(\"fillShort\") inline fun NDArray < Short >.fill(f: (idx: IntArray ) -> Short ): NDArray < Short >","title":"Fill"},{"location":"Reference_API_Docs/koma.extensions/fill.html#fill","text":"@JvmName(\"fillDouble\") inline fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > @JvmName(\"fillFloat\") inline fun Matrix < Float >.fill(f: (row: Int , col: Int ) -> Float ): Matrix < Float > @JvmName(\"fillGeneric\") fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > @JvmName(\"fillInt\") inline fun Matrix < Int >.fill(f: (row: Int , col: Int ) -> Int ): Matrix < Int > Fills the matrix with the values returned by the input function.","title":"fill"},{"location":"Reference_API_Docs/koma.extensions/fill.html#parameters","text":"f - A function which takes row,col and returns the value to fill. Note that the return type must be the matrix primitive type (e.g. Double). @JvmName(\"fillByte\") inline fun NDArray < Byte >.fill(f: (idx: IntArray ) -> Byte ): NDArray < Byte > @JvmName(\"fillDouble\") inline fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > @JvmName(\"fillFloat\") inline fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > @JvmName(\"fillGeneric\") fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > @JvmName(\"fillInt\") inline fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > @JvmName(\"fillLong\") inline fun NDArray < Long >.fill(f: (idx: IntArray ) -> Long ): NDArray < Long > @JvmName(\"fillShort\") inline fun NDArray < Short >.fill(f: (idx: IntArray ) -> Short ): NDArray < Short >","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/for-each-indexed-n.html","text":"api / koma.extensions / forEachIndexedN forEachIndexedN @JvmName(\"forEachIndexedNByte\") inline fun NDArray < Byte >.forEachIndexedN(f: (idx: IntArray , ele: Byte ) -> Unit ): Unit @JvmName(\"forEachIndexedNDouble\") inline fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit @JvmName(\"forEachIndexedNFloat\") inline fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit @JvmName(\"forEachIndexedNGeneric\") fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit @JvmName(\"forEachIndexedNInt\") inline fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit @JvmName(\"forEachIndexedNLong\") inline fun NDArray < Long >.forEachIndexedN(f: (idx: IntArray , ele: Long ) -> Unit ): Unit @JvmName(\"forEachIndexedNShort\") inline fun NDArray < Short >.forEachIndexedN(f: (idx: IntArray , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. Parameters f - A function that takes in an element. Function also takes in the ND index of the element's location.","title":"For each indexed n"},{"location":"Reference_API_Docs/koma.extensions/for-each-indexed-n.html#foreachindexedn","text":"@JvmName(\"forEachIndexedNByte\") inline fun NDArray < Byte >.forEachIndexedN(f: (idx: IntArray , ele: Byte ) -> Unit ): Unit @JvmName(\"forEachIndexedNDouble\") inline fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit @JvmName(\"forEachIndexedNFloat\") inline fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit @JvmName(\"forEachIndexedNGeneric\") fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit @JvmName(\"forEachIndexedNInt\") inline fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit @JvmName(\"forEachIndexedNLong\") inline fun NDArray < Long >.forEachIndexedN(f: (idx: IntArray , ele: Long ) -> Unit ): Unit @JvmName(\"forEachIndexedNShort\") inline fun NDArray < Short >.forEachIndexedN(f: (idx: IntArray , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element.","title":"forEachIndexedN"},{"location":"Reference_API_Docs/koma.extensions/for-each-indexed-n.html#parameters","text":"f - A function that takes in an element. Function also takes in the ND index of the element's location.","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/for-each-indexed.html","text":"api / koma.extensions / forEachIndexed forEachIndexed @JvmName(\"forEachIndexedDouble\") inline fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit @JvmName(\"forEachIndexedFloat\") inline fun Matrix < Float >.forEachIndexed(f: (row: Int , col: Int , ele: Float ) -> Unit ): Unit @JvmName(\"forEachIndexedGeneric\") fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit @JvmName(\"forEachIndexedInt\") inline fun Matrix < Int >.forEachIndexed(f: (row: Int , col: Int , ele: Int ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. Parameters f - A function that takes in a row,col position and an element value @JvmName(\"forEachIndexedByte\") inline fun NDArray < Byte >.forEachIndexed(f: (idx: Int , ele: Byte ) -> Unit ): Unit @JvmName(\"forEachIndexedDouble\") inline fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit @JvmName(\"forEachIndexedFloat\") inline fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit @JvmName(\"forEachIndexedGeneric\") fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit @JvmName(\"forEachIndexedInt\") inline fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit @JvmName(\"forEachIndexedLong\") inline fun NDArray < Long >.forEachIndexed(f: (idx: Int , ele: Long ) -> Unit ): Unit @JvmName(\"forEachIndexedShort\") inline fun NDArray < Short >.forEachIndexed(f: (idx: Int , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. Parameters f - A function that takes in an element. Function also takes in the linear index of the element's location.","title":"For each indexed"},{"location":"Reference_API_Docs/koma.extensions/for-each-indexed.html#foreachindexed","text":"@JvmName(\"forEachIndexedDouble\") inline fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit @JvmName(\"forEachIndexedFloat\") inline fun Matrix < Float >.forEachIndexed(f: (row: Int , col: Int , ele: Float ) -> Unit ): Unit @JvmName(\"forEachIndexedGeneric\") fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit @JvmName(\"forEachIndexedInt\") inline fun Matrix < Int >.forEachIndexed(f: (row: Int , col: Int , ele: Int ) -> Unit ): Unit Passes each element in row major order into a function along with its index location.","title":"forEachIndexed"},{"location":"Reference_API_Docs/koma.extensions/for-each-indexed.html#parameters","text":"f - A function that takes in a row,col position and an element value @JvmName(\"forEachIndexedByte\") inline fun NDArray < Byte >.forEachIndexed(f: (idx: Int , ele: Byte ) -> Unit ): Unit @JvmName(\"forEachIndexedDouble\") inline fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit @JvmName(\"forEachIndexedFloat\") inline fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit @JvmName(\"forEachIndexedGeneric\") fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit @JvmName(\"forEachIndexedInt\") inline fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit @JvmName(\"forEachIndexedLong\") inline fun NDArray < Long >.forEachIndexed(f: (idx: Int , ele: Long ) -> Unit ): Unit @JvmName(\"forEachIndexedShort\") inline fun NDArray < Short >.forEachIndexed(f: (idx: Int , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension.","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/for-each-indexed.html#parameters_1","text":"f - A function that takes in an element. Function also takes in the linear index of the element's location.","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/for-each.html","text":"api / koma.extensions / forEach forEach @JvmName(\"forEachDouble\") inline fun Matrix < Double >.forEach(f: ( Double ) -> Unit ): Unit @JvmName(\"forEachFloat\") inline fun Matrix < Float >.forEach(f: ( Float ) -> Unit ): Unit @JvmName(\"forEachGeneric\") fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit @JvmName(\"forEachInt\") inline fun Matrix < Int >.forEach(f: ( Int ) -> Unit ): Unit Passes each element in row major order into a function. Parameters f - A function that takes in an element @JvmName(\"forEachByte\") inline fun NDArray < Byte >.forEach(f: (ele: Byte ) -> Unit ): Unit @JvmName(\"forEachDouble\") inline fun NDArray < Double >.forEach(f: (ele: Double ) -> Unit ): Unit @JvmName(\"forEachFloat\") inline fun NDArray < Float >.forEach(f: (ele: Float ) -> Unit ): Unit @JvmName(\"forEachGeneric\") fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit @JvmName(\"forEachInt\") inline fun NDArray < Int >.forEach(f: (ele: Int ) -> Unit ): Unit @JvmName(\"forEachLong\") inline fun NDArray < Long >.forEach(f: (ele: Long ) -> Unit ): Unit @JvmName(\"forEachShort\") inline fun NDArray < Short >.forEach(f: (ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Parameters f - A function that takes in an element","title":"For each"},{"location":"Reference_API_Docs/koma.extensions/for-each.html#foreach","text":"@JvmName(\"forEachDouble\") inline fun Matrix < Double >.forEach(f: ( Double ) -> Unit ): Unit @JvmName(\"forEachFloat\") inline fun Matrix < Float >.forEach(f: ( Float ) -> Unit ): Unit @JvmName(\"forEachGeneric\") fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit @JvmName(\"forEachInt\") inline fun Matrix < Int >.forEach(f: ( Int ) -> Unit ): Unit Passes each element in row major order into a function.","title":"forEach"},{"location":"Reference_API_Docs/koma.extensions/for-each.html#parameters","text":"f - A function that takes in an element @JvmName(\"forEachByte\") inline fun NDArray < Byte >.forEach(f: (ele: Byte ) -> Unit ): Unit @JvmName(\"forEachDouble\") inline fun NDArray < Double >.forEach(f: (ele: Double ) -> Unit ): Unit @JvmName(\"forEachFloat\") inline fun NDArray < Float >.forEach(f: (ele: Float ) -> Unit ): Unit @JvmName(\"forEachGeneric\") fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit @JvmName(\"forEachInt\") inline fun NDArray < Int >.forEach(f: (ele: Int ) -> Unit ): Unit @JvmName(\"forEachLong\") inline fun NDArray < Long >.forEach(f: (ele: Long ) -> Unit ): Unit @JvmName(\"forEachShort\") inline fun NDArray < Short >.forEach(f: (ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f.","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/for-each.html#parameters_1","text":"f - A function that takes in an element","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/get.html","text":"api / koma.extensions / get get operator fun Matrix < Double >.get(i: Int , j: Int ): Double operator fun Matrix < Float >.get(i: Int , j: Int ): Float operator fun <T> Matrix < T >.get(i: Int , j: Int ): T operator fun Matrix < Int >.get(i: Int , j: Int ): Int @JvmName(\"getRangesByte\") operator fun NDArray < Byte >.get(vararg indices: IntRange ): NDArray < Byte > operator fun NDArray < Byte >.get(vararg indices: Int ): Byte @JvmName(\"getRangesDouble\") operator fun NDArray < Double >.get(vararg indices: IntRange ): NDArray < Double > operator fun NDArray < Double >.get(vararg indices: Int ): Double @JvmName(\"getRangesFloat\") operator fun NDArray < Float >.get(vararg indices: IntRange ): NDArray < Float > operator fun NDArray < Float >.get(vararg indices: Int ): Float @JvmName(\"getRangesGeneric\") operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T @JvmName(\"getRangesInt\") operator fun NDArray < Int >.get(vararg indices: IntRange ): NDArray < Int > operator fun NDArray < Int >.get(vararg indices: Int ): Int @JvmName(\"getRangesLong\") operator fun NDArray < Long >.get(vararg indices: IntRange ): NDArray < Long > operator fun NDArray < Long >.get(vararg indices: Int ): Long @JvmName(\"getRangesShort\") operator fun NDArray < Short >.get(vararg indices: IntRange ): NDArray < Short > operator fun NDArray < Short >.get(vararg indices: Int ): Short operator fun Matrix < Double >.get(i: Int ): Double operator fun Matrix < Float >.get(i: Int ): Float operator fun <T> Matrix < T >.get(i: Int ): T operator fun Matrix < Int >.get(i: Int ): Int Gets the ith element in the matrix. If 2D, selects elements in row-major order. @JvmName(\"getRangesDouble\") operator fun Matrix < Double >.get(rows: IntRange , cols: IntRange ): Matrix < Double > @JvmName(\"getRangesFloat\") operator fun Matrix < Float >.get(rows: IntRange , cols: IntRange ): Matrix < Float > @JvmName(\"getRangesGeneric\") operator fun <T> Matrix < T >.get(rows: IntRange , cols: IntRange ): Matrix < T > @JvmName(\"getRangesInt\") operator fun Matrix < Int >.get(rows: IntRange , cols: IntRange ): Matrix < Int > Allow slicing, e.g. matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. @param rows the set of rows to select @param cols the set of columns to select @return a new matrix containing the submatrix. @JvmName(\"setRowRangeDouble\") operator fun Matrix < Double >.get(rows: IntRange , cols: Int ): Matrix < Double > @JvmName(\"setRowRangeFloat\") operator fun Matrix < Float >.get(rows: IntRange , cols: Int ): Matrix < Float > @JvmName(\"setRowRangeGeneric\") operator fun <T> Matrix < T >.get(rows: IntRange , cols: Int ): Matrix < T > @JvmName(\"setRowRangeInt\") operator fun Matrix < Int >.get(rows: IntRange , cols: Int ): Matrix < Int > Allows for slicing of the rows and selection of a single column @JvmName(\"getColRangeDouble\") operator fun Matrix < Double >.get(rows: Int , cols: IntRange ): Matrix < Double > @JvmName(\"getColRangeFloat\") operator fun Matrix < Float >.get(rows: Int , cols: IntRange ): Matrix < Float > @JvmName(\"getColRangeGeneric\") operator fun <T> Matrix < T >.get(rows: Int , cols: IntRange ): Matrix < T > @JvmName(\"getColRangeInt\") operator fun Matrix < Int >.get(rows: Int , cols: IntRange ): Matrix < Int > Allows for slicing of the cols and selection of a single row","title":"Get"},{"location":"Reference_API_Docs/koma.extensions/get.html#get","text":"operator fun Matrix < Double >.get(i: Int , j: Int ): Double operator fun Matrix < Float >.get(i: Int , j: Int ): Float operator fun <T> Matrix < T >.get(i: Int , j: Int ): T operator fun Matrix < Int >.get(i: Int , j: Int ): Int @JvmName(\"getRangesByte\") operator fun NDArray < Byte >.get(vararg indices: IntRange ): NDArray < Byte > operator fun NDArray < Byte >.get(vararg indices: Int ): Byte @JvmName(\"getRangesDouble\") operator fun NDArray < Double >.get(vararg indices: IntRange ): NDArray < Double > operator fun NDArray < Double >.get(vararg indices: Int ): Double @JvmName(\"getRangesFloat\") operator fun NDArray < Float >.get(vararg indices: IntRange ): NDArray < Float > operator fun NDArray < Float >.get(vararg indices: Int ): Float @JvmName(\"getRangesGeneric\") operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T @JvmName(\"getRangesInt\") operator fun NDArray < Int >.get(vararg indices: IntRange ): NDArray < Int > operator fun NDArray < Int >.get(vararg indices: Int ): Int @JvmName(\"getRangesLong\") operator fun NDArray < Long >.get(vararg indices: IntRange ): NDArray < Long > operator fun NDArray < Long >.get(vararg indices: Int ): Long @JvmName(\"getRangesShort\") operator fun NDArray < Short >.get(vararg indices: IntRange ): NDArray < Short > operator fun NDArray < Short >.get(vararg indices: Int ): Short operator fun Matrix < Double >.get(i: Int ): Double operator fun Matrix < Float >.get(i: Int ): Float operator fun <T> Matrix < T >.get(i: Int ): T operator fun Matrix < Int >.get(i: Int ): Int Gets the ith element in the matrix. If 2D, selects elements in row-major order. @JvmName(\"getRangesDouble\") operator fun Matrix < Double >.get(rows: IntRange , cols: IntRange ): Matrix < Double > @JvmName(\"getRangesFloat\") operator fun Matrix < Float >.get(rows: IntRange , cols: IntRange ): Matrix < Float > @JvmName(\"getRangesGeneric\") operator fun <T> Matrix < T >.get(rows: IntRange , cols: IntRange ): Matrix < T > @JvmName(\"getRangesInt\") operator fun Matrix < Int >.get(rows: IntRange , cols: IntRange ): Matrix < Int > Allow slicing, e.g. matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. @param rows the set of rows to select @param cols the set of columns to select @return a new matrix containing the submatrix. @JvmName(\"setRowRangeDouble\") operator fun Matrix < Double >.get(rows: IntRange , cols: Int ): Matrix < Double > @JvmName(\"setRowRangeFloat\") operator fun Matrix < Float >.get(rows: IntRange , cols: Int ): Matrix < Float > @JvmName(\"setRowRangeGeneric\") operator fun <T> Matrix < T >.get(rows: IntRange , cols: Int ): Matrix < T > @JvmName(\"setRowRangeInt\") operator fun Matrix < Int >.get(rows: IntRange , cols: Int ): Matrix < Int > Allows for slicing of the rows and selection of a single column @JvmName(\"getColRangeDouble\") operator fun Matrix < Double >.get(rows: Int , cols: IntRange ): Matrix < Double > @JvmName(\"getColRangeFloat\") operator fun Matrix < Float >.get(rows: Int , cols: IntRange ): Matrix < Float > @JvmName(\"getColRangeGeneric\") operator fun <T> Matrix < T >.get(rows: Int , cols: IntRange ): Matrix < T > @JvmName(\"getColRangeInt\") operator fun Matrix < Int >.get(rows: Int , cols: IntRange ): Matrix < Int > Allows for slicing of the cols and selection of a single row","title":"get"},{"location":"Reference_API_Docs/koma.extensions/map-indexed-n.html","text":"api / koma.extensions / mapIndexedN mapIndexedN @JvmName(\"mapIndexedNByte\") inline fun NDArray < Byte >.mapIndexedN(f: (idx: IntArray , ele: Byte ) -> Byte ): NDArray < Byte > @JvmName(\"mapIndexedNDouble\") inline fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > @JvmName(\"mapIndexedNFloat\") inline fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > @JvmName(\"mapIndexedNGeneric\") fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > @JvmName(\"mapIndexedNInt\") inline fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > @JvmName(\"mapIndexedNLong\") inline fun NDArray < Long >.mapIndexedN(f: (idx: IntArray , ele: Long ) -> Long ): NDArray < Long > @JvmName(\"mapIndexedNShort\") inline fun NDArray < Short >.mapIndexedN(f: (idx: IntArray , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. Parameters f - A function that takes in an element and returns an element. Function also takes in the ND index of the element's location. Return the new NDArray after each element is mapped through f","title":"Map indexed n"},{"location":"Reference_API_Docs/koma.extensions/map-indexed-n.html#mapindexedn","text":"@JvmName(\"mapIndexedNByte\") inline fun NDArray < Byte >.mapIndexedN(f: (idx: IntArray , ele: Byte ) -> Byte ): NDArray < Byte > @JvmName(\"mapIndexedNDouble\") inline fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > @JvmName(\"mapIndexedNFloat\") inline fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > @JvmName(\"mapIndexedNGeneric\") fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > @JvmName(\"mapIndexedNInt\") inline fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > @JvmName(\"mapIndexedNLong\") inline fun NDArray < Long >.mapIndexedN(f: (idx: IntArray , ele: Long ) -> Long ): NDArray < Long > @JvmName(\"mapIndexedNShort\") inline fun NDArray < Short >.mapIndexedN(f: (idx: IntArray , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element.","title":"mapIndexedN"},{"location":"Reference_API_Docs/koma.extensions/map-indexed-n.html#parameters","text":"f - A function that takes in an element and returns an element. Function also takes in the ND index of the element's location. Return the new NDArray after each element is mapped through f","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/map-indexed.html","text":"api / koma.extensions / mapIndexed mapIndexed @JvmName(\"mapIndexedDouble\") inline fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > @JvmName(\"mapIndexedFloat\") inline fun Matrix < Float >.mapIndexed(f: (row: Int , col: Int , ele: Float ) -> Float ): Matrix < Float > @JvmName(\"mapIndexedGeneric\") fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > @JvmName(\"mapIndexedInt\") inline fun Matrix < Int >.mapIndexed(f: (row: Int , col: Int , ele: Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. Parameters f - A function that takes in an element and returns an element. Function also takes in the row, col index of the element's location. Return the new matrix after each element is mapped through f @JvmName(\"mapIndexedByte\") inline fun NDArray < Byte >.mapIndexed(f: (idx: Int , ele: Byte ) -> Byte ): NDArray < Byte > @JvmName(\"mapIndexedDouble\") inline fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > @JvmName(\"mapIndexedFloat\") inline fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > @JvmName(\"mapIndexedGeneric\") fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > @JvmName(\"mapIndexedInt\") inline fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > @JvmName(\"mapIndexedLong\") inline fun NDArray < Long >.mapIndexed(f: (idx: Int , ele: Long ) -> Long ): NDArray < Long > @JvmName(\"mapIndexedShort\") inline fun NDArray < Short >.mapIndexed(f: (idx: Int , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. Parameters f - A function that takes in an element and returns an element. Function also takes in the linear index of the element's location. Return the new NDArray after each element is mapped through f","title":"Map indexed"},{"location":"Reference_API_Docs/koma.extensions/map-indexed.html#mapindexed","text":"@JvmName(\"mapIndexedDouble\") inline fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > @JvmName(\"mapIndexedFloat\") inline fun Matrix < Float >.mapIndexed(f: (row: Int , col: Int , ele: Float ) -> Float ): Matrix < Float > @JvmName(\"mapIndexedGeneric\") fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > @JvmName(\"mapIndexedInt\") inline fun Matrix < Int >.mapIndexed(f: (row: Int , col: Int , ele: Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order.","title":"mapIndexed"},{"location":"Reference_API_Docs/koma.extensions/map-indexed.html#parameters","text":"f - A function that takes in an element and returns an element. Function also takes in the row, col index of the element's location. Return the new matrix after each element is mapped through f @JvmName(\"mapIndexedByte\") inline fun NDArray < Byte >.mapIndexed(f: (idx: Int , ele: Byte ) -> Byte ): NDArray < Byte > @JvmName(\"mapIndexedDouble\") inline fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > @JvmName(\"mapIndexedFloat\") inline fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > @JvmName(\"mapIndexedGeneric\") fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > @JvmName(\"mapIndexedInt\") inline fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > @JvmName(\"mapIndexedLong\") inline fun NDArray < Long >.mapIndexed(f: (idx: Int , ele: Long ) -> Long ): NDArray < Long > @JvmName(\"mapIndexedShort\") inline fun NDArray < Short >.mapIndexed(f: (idx: Int , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension.","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/map-indexed.html#parameters_1","text":"f - A function that takes in an element and returns an element. Function also takes in the linear index of the element's location. Return the new NDArray after each element is mapped through f","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/map.html","text":"api / koma.extensions / map map @JvmName(\"mapDouble\") inline fun Matrix < Double >.map(f: ( Double ) -> Double ): Matrix < Double > @JvmName(\"mapFloat\") inline fun Matrix < Float >.map(f: ( Float ) -> Float ): Matrix < Float > @JvmName(\"mapGeneric\") fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > @JvmName(\"mapInt\") inline fun Matrix < Int >.map(f: ( Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. Parameters f - A function that takes in an element and returns an element Return the new matrix after each element is mapped through f @JvmName(\"mapByte\") inline fun NDArray < Byte >.map(f: ( Byte ) -> Byte ): NDArray < Byte > @JvmName(\"mapDouble\") inline fun NDArray < Double >.map(f: ( Double ) -> Double ): NDArray < Double > @JvmName(\"mapFloat\") inline fun NDArray < Float >.map(f: ( Float ) -> Float ): NDArray < Float > @JvmName(\"mapGeneric\") fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > @JvmName(\"mapInt\") inline fun NDArray < Int >.map(f: ( Int ) -> Int ): NDArray < Int > @JvmName(\"mapLong\") inline fun NDArray < Long >.map(f: ( Long ) -> Long ): NDArray < Long > @JvmName(\"mapShort\") inline fun NDArray < Short >.map(f: ( Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Parameters f - A function that takes in an element and returns an element Return the new NDArray after each element is mapped through f","title":"Map"},{"location":"Reference_API_Docs/koma.extensions/map.html#map","text":"@JvmName(\"mapDouble\") inline fun Matrix < Double >.map(f: ( Double ) -> Double ): Matrix < Double > @JvmName(\"mapFloat\") inline fun Matrix < Float >.map(f: ( Float ) -> Float ): Matrix < Float > @JvmName(\"mapGeneric\") fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > @JvmName(\"mapInt\") inline fun Matrix < Int >.map(f: ( Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order.","title":"map"},{"location":"Reference_API_Docs/koma.extensions/map.html#parameters","text":"f - A function that takes in an element and returns an element Return the new matrix after each element is mapped through f @JvmName(\"mapByte\") inline fun NDArray < Byte >.map(f: ( Byte ) -> Byte ): NDArray < Byte > @JvmName(\"mapDouble\") inline fun NDArray < Double >.map(f: ( Double ) -> Double ): NDArray < Double > @JvmName(\"mapFloat\") inline fun NDArray < Float >.map(f: ( Float ) -> Float ): NDArray < Float > @JvmName(\"mapGeneric\") fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > @JvmName(\"mapInt\") inline fun NDArray < Int >.map(f: ( Int ) -> Int ): NDArray < Int > @JvmName(\"mapLong\") inline fun NDArray < Long >.map(f: ( Long ) -> Long ): NDArray < Long > @JvmName(\"mapShort\") inline fun NDArray < Short >.map(f: ( Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray.","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/map.html#parameters_1","text":"f - A function that takes in an element and returns an element Return the new NDArray after each element is mapped through f","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/minus.html","text":"api / koma.extensions / minus minus @JvmName(\"minusByte\") operator fun NDArray < Byte >.minus(other: Byte ): NDArray < Byte > @JvmName(\"minusArrByte\") operator fun NDArray < Byte >.minus(other: NDArray < Byte >): NDArray < Byte > @JvmName(\"minusDouble\") operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > @JvmName(\"minusArrDouble\") operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double > @JvmName(\"minusFloat\") operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > @JvmName(\"minusArrFloat\") operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > @JvmName(\"minusInt\") operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > @JvmName(\"minusArrInt\") operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > @JvmName(\"minusLong\") operator fun NDArray < Long >.minus(other: Long ): NDArray < Long > @JvmName(\"minusArrLong\") operator fun NDArray < Long >.minus(other: NDArray < Long >): NDArray < Long > @JvmName(\"minusShort\") operator fun NDArray < Short >.minus(other: Short ): NDArray < Short > @JvmName(\"minusArrShort\") operator fun NDArray < Short >.minus(other: NDArray < Short >): NDArray < Short >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars","title":"Minus"},{"location":"Reference_API_Docs/koma.extensions/minus.html#minus","text":"@JvmName(\"minusByte\") operator fun NDArray < Byte >.minus(other: Byte ): NDArray < Byte > @JvmName(\"minusArrByte\") operator fun NDArray < Byte >.minus(other: NDArray < Byte >): NDArray < Byte > @JvmName(\"minusDouble\") operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > @JvmName(\"minusArrDouble\") operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double > @JvmName(\"minusFloat\") operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > @JvmName(\"minusArrFloat\") operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > @JvmName(\"minusInt\") operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > @JvmName(\"minusArrInt\") operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > @JvmName(\"minusLong\") operator fun NDArray < Long >.minus(other: Long ): NDArray < Long > @JvmName(\"minusArrLong\") operator fun NDArray < Long >.minus(other: NDArray < Long >): NDArray < Long > @JvmName(\"minusShort\") operator fun NDArray < Short >.minus(other: Short ): NDArray < Short > @JvmName(\"minusArrShort\") operator fun NDArray < Short >.minus(other: NDArray < Short >): NDArray < Short >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars","title":"minus"},{"location":"Reference_API_Docs/koma.extensions/plus.html","text":"api / koma.extensions / plus plus @JvmName(\"plusByte\") operator fun NDArray < Byte >.plus(other: Byte ): NDArray < Byte > @JvmName(\"plusArrByte\") operator fun NDArray < Byte >.plus(other: NDArray < Byte >): NDArray < Byte > @JvmName(\"plusDouble\") operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > @JvmName(\"plusArrDouble\") operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double > @JvmName(\"plusFloat\") operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > @JvmName(\"plusArrFloat\") operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > @JvmName(\"plusInt\") operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > @JvmName(\"plusArrInt\") operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > @JvmName(\"plusLong\") operator fun NDArray < Long >.plus(other: Long ): NDArray < Long > @JvmName(\"plusArrLong\") operator fun NDArray < Long >.plus(other: NDArray < Long >): NDArray < Long > @JvmName(\"plusShort\") operator fun NDArray < Short >.plus(other: Short ): NDArray < Short > @JvmName(\"plusArrShort\") operator fun NDArray < Short >.plus(other: NDArray < Short >): NDArray < Short >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars","title":"Plus"},{"location":"Reference_API_Docs/koma.extensions/plus.html#plus","text":"@JvmName(\"plusByte\") operator fun NDArray < Byte >.plus(other: Byte ): NDArray < Byte > @JvmName(\"plusArrByte\") operator fun NDArray < Byte >.plus(other: NDArray < Byte >): NDArray < Byte > @JvmName(\"plusDouble\") operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > @JvmName(\"plusArrDouble\") operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double > @JvmName(\"plusFloat\") operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > @JvmName(\"plusArrFloat\") operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > @JvmName(\"plusInt\") operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > @JvmName(\"plusArrInt\") operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > @JvmName(\"plusLong\") operator fun NDArray < Long >.plus(other: Long ): NDArray < Long > @JvmName(\"plusArrLong\") operator fun NDArray < Long >.plus(other: NDArray < Long >): NDArray < Long > @JvmName(\"plusShort\") operator fun NDArray < Short >.plus(other: Short ): NDArray < Short > @JvmName(\"plusArrShort\") operator fun NDArray < Short >.plus(other: NDArray < Short >): NDArray < Short >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars","title":"plus"},{"location":"Reference_API_Docs/koma.extensions/pow.html","text":"api / koma.extensions / pow pow @JvmName(\"powByte\") infix fun NDArray < Byte >.pow(exponent: Int ): NDArray < Byte > @JvmName(\"powDouble\") infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > @JvmName(\"powFloat\") infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > @JvmName(\"powInt\") infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > @JvmName(\"powLong\") infix fun NDArray < Long >.pow(exponent: Int ): NDArray < Long > @JvmName(\"powShort\") infix fun NDArray < Short >.pow(exponent: Int ): NDArray < Short >","title":"Pow"},{"location":"Reference_API_Docs/koma.extensions/pow.html#pow","text":"@JvmName(\"powByte\") infix fun NDArray < Byte >.pow(exponent: Int ): NDArray < Byte > @JvmName(\"powDouble\") infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > @JvmName(\"powFloat\") infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > @JvmName(\"powInt\") infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > @JvmName(\"powLong\") infix fun NDArray < Long >.pow(exponent: Int ): NDArray < Long > @JvmName(\"powShort\") infix fun NDArray < Short >.pow(exponent: Int ): NDArray < Short >","title":"pow"},{"location":"Reference_API_Docs/koma.extensions/reshape.html","text":"api / koma.extensions / reshape reshape @JvmName(\"reshapeDouble\") fun NDArray < Double >.reshape(rows: Int , cols: Int ): Matrix < Double > @JvmName(\"reshapeFloat\") fun NDArray < Float >.reshape(rows: Int , cols: Int ): Matrix < Float > @JvmName(\"reshapeGeneric\") inline fun <reified T> Matrix < T >.reshape(rows: Int , cols: Int ): Matrix < T > @JvmName(\"reshapeInt\") fun NDArray < Int >.reshape(rows: Int , cols: Int ): Matrix < Int > Returns a new Matrix with the given shape, populated with the data in this array. Parameters rows - The number of rows in the desired matrix cols - The number of columns in the desired matrix Exceptions IllegalArgumentException - when rows * cols does not equal size Returns A copy of the elements in this array, shaped to the given number of rows and columns, such that this.toList() == this.reshape(rows, cols).toList() @JvmName(\"reshapeByte\") fun NDArray < Byte >.reshape(vararg dims: Int ): NDArray < Byte > @JvmName(\"reshapeDouble\") fun NDArray < Double >.reshape(vararg dims: Int ): NDArray < Double > @JvmName(\"reshapeFloat\") fun NDArray < Float >.reshape(vararg dims: Int ): NDArray < Float > @JvmName(\"reshapeGeneric\") inline fun <reified T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > @JvmName(\"reshapeInt\") fun NDArray < Int >.reshape(vararg dims: Int ): NDArray < Int > @JvmName(\"reshapeLong\") fun NDArray < Long >.reshape(vararg dims: Int ): NDArray < Long > @JvmName(\"reshapeShort\") fun NDArray < Short >.reshape(vararg dims: Int ): NDArray < Short > Returns a new NDArray with the given shape, populated with the data in this array. Parameters dims - Desired dimensions of the output array. Exceptions IllegalArgumentException - when the product of all of the given dims does not equal size Returns A copy of the elements in this array, shaped to the given number of rows and columns, such that this.toList() == this.reshape(*dims).toList()","title":"Reshape"},{"location":"Reference_API_Docs/koma.extensions/reshape.html#reshape","text":"@JvmName(\"reshapeDouble\") fun NDArray < Double >.reshape(rows: Int , cols: Int ): Matrix < Double > @JvmName(\"reshapeFloat\") fun NDArray < Float >.reshape(rows: Int , cols: Int ): Matrix < Float > @JvmName(\"reshapeGeneric\") inline fun <reified T> Matrix < T >.reshape(rows: Int , cols: Int ): Matrix < T > @JvmName(\"reshapeInt\") fun NDArray < Int >.reshape(rows: Int , cols: Int ): Matrix < Int > Returns a new Matrix with the given shape, populated with the data in this array.","title":"reshape"},{"location":"Reference_API_Docs/koma.extensions/reshape.html#parameters","text":"rows - The number of rows in the desired matrix cols - The number of columns in the desired matrix","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/reshape.html#exceptions","text":"IllegalArgumentException - when rows * cols does not equal size Returns A copy of the elements in this array, shaped to the given number of rows and columns, such that this.toList() == this.reshape(rows, cols).toList() @JvmName(\"reshapeByte\") fun NDArray < Byte >.reshape(vararg dims: Int ): NDArray < Byte > @JvmName(\"reshapeDouble\") fun NDArray < Double >.reshape(vararg dims: Int ): NDArray < Double > @JvmName(\"reshapeFloat\") fun NDArray < Float >.reshape(vararg dims: Int ): NDArray < Float > @JvmName(\"reshapeGeneric\") inline fun <reified T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > @JvmName(\"reshapeInt\") fun NDArray < Int >.reshape(vararg dims: Int ): NDArray < Int > @JvmName(\"reshapeLong\") fun NDArray < Long >.reshape(vararg dims: Int ): NDArray < Long > @JvmName(\"reshapeShort\") fun NDArray < Short >.reshape(vararg dims: Int ): NDArray < Short > Returns a new NDArray with the given shape, populated with the data in this array.","title":"Exceptions"},{"location":"Reference_API_Docs/koma.extensions/reshape.html#parameters_1","text":"dims - Desired dimensions of the output array.","title":"Parameters"},{"location":"Reference_API_Docs/koma.extensions/reshape.html#exceptions_1","text":"IllegalArgumentException - when the product of all of the given dims does not equal size Returns A copy of the elements in this array, shaped to the given number of rows and columns, such that this.toList() == this.reshape(*dims).toList()","title":"Exceptions"},{"location":"Reference_API_Docs/koma.extensions/set.html","text":"api / koma.extensions / set set @JvmName(\"set1DDouble\") operator fun Matrix < Double >.set(i: Int , v: Double ): Unit @JvmName(\"set1DFloat\") operator fun Matrix < Float >.set(i: Int , v: Float ): Unit @JvmName(\"set1DGeneric\") operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit @JvmName(\"set1DInt\") operator fun Matrix < Int >.set(i: Int , v: Int ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. @JvmName(\"set2DDouble\") operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit @JvmName(\"setColRangeScalarDouble\") operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit @JvmName(\"set1DDoubleFromInt\") operator fun Matrix < Double >.set(i: Int , v: Int ): Unit @JvmName(\"set2DDoubleFromInt\") operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit @JvmName(\"set2DFloat\") operator fun Matrix < Float >.set(i: Int , j: Int , v: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Float ): Unit @JvmName(\"setColRangeScalarFloat\") operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Float ): Unit @JvmName(\"set1DFloatFromInt\") operator fun Matrix < Float >.set(i: Int , v: Int ): Unit @JvmName(\"set2DFloatFromInt\") operator fun Matrix < Float >.set(i: Int , j: Int , v: Int ): Unit @JvmName(\"set2DGeneric\") operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit @JvmName(\"setColRangeScalarGeneric\") operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit @JvmName(\"set2DInt\") operator fun Matrix < Int >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Int ): Unit @JvmName(\"setColRangeScalarInt\") operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Int ): Unit @JvmName(\"setByte\") operator fun NDArray < Byte >.set(vararg indices: Int , value: NDArray < Byte >): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: Byte ): Unit @JvmName(\"setDouble\") operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit @JvmName(\"setFloat\") operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit @JvmName(\"setGeneric\") operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit @JvmName(\"setInt\") operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit @JvmName(\"setLong\") operator fun NDArray < Long >.set(vararg indices: Int , value: NDArray < Long >): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: Long ): Unit @JvmName(\"setShort\") operator fun NDArray < Short >.set(vararg indices: Int , value: NDArray < Short >): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: Short ): Unit @JvmName(\"setRangesDouble\") operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit @JvmName(\"setRangesFloat\") operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Matrix < Float >): Unit @JvmName(\"setRangesGeneric\") operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit @JvmName(\"setRangesInt\") operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. @param rows the set of rows to select @param cols the set of columns to select @param value the matrix to set the subslice to @JvmName(\"setColRangeDouble\") operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit @JvmName(\"setColRangeFloat\") operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Matrix < Float >): Unit @JvmName(\"setColRangeGeneric\") operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit @JvmName(\"setColRangeInt\") operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. @param rows the row to select @param cols the set of columns to select @param value the matrix to set the subslice to @JvmName(\"setRowRangeDouble\") operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit @JvmName(\"setRowRangeFloat\") operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Matrix < Float >): Unit @JvmName(\"setRowRangeGeneric\") operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit @JvmName(\"setRowRangeInt\") operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. @param rows the set of rows to select @param cols the column to select @param value the matrix to set the subslice to","title":"Set"},{"location":"Reference_API_Docs/koma.extensions/set.html#set","text":"@JvmName(\"set1DDouble\") operator fun Matrix < Double >.set(i: Int , v: Double ): Unit @JvmName(\"set1DFloat\") operator fun Matrix < Float >.set(i: Int , v: Float ): Unit @JvmName(\"set1DGeneric\") operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit @JvmName(\"set1DInt\") operator fun Matrix < Int >.set(i: Int , v: Int ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. @JvmName(\"set2DDouble\") operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit @JvmName(\"setColRangeScalarDouble\") operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit @JvmName(\"set1DDoubleFromInt\") operator fun Matrix < Double >.set(i: Int , v: Int ): Unit @JvmName(\"set2DDoubleFromInt\") operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit @JvmName(\"set2DFloat\") operator fun Matrix < Float >.set(i: Int , j: Int , v: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Float ): Unit @JvmName(\"setColRangeScalarFloat\") operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Float ): Unit @JvmName(\"set1DFloatFromInt\") operator fun Matrix < Float >.set(i: Int , v: Int ): Unit @JvmName(\"set2DFloatFromInt\") operator fun Matrix < Float >.set(i: Int , j: Int , v: Int ): Unit @JvmName(\"set2DGeneric\") operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit @JvmName(\"setColRangeScalarGeneric\") operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit @JvmName(\"set2DInt\") operator fun Matrix < Int >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Int ): Unit @JvmName(\"setColRangeScalarInt\") operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Int ): Unit @JvmName(\"setByte\") operator fun NDArray < Byte >.set(vararg indices: Int , value: NDArray < Byte >): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: Byte ): Unit @JvmName(\"setDouble\") operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit @JvmName(\"setFloat\") operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit @JvmName(\"setGeneric\") operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit @JvmName(\"setInt\") operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit @JvmName(\"setLong\") operator fun NDArray < Long >.set(vararg indices: Int , value: NDArray < Long >): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: Long ): Unit @JvmName(\"setShort\") operator fun NDArray < Short >.set(vararg indices: Int , value: NDArray < Short >): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: Short ): Unit @JvmName(\"setRangesDouble\") operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit @JvmName(\"setRangesFloat\") operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Matrix < Float >): Unit @JvmName(\"setRangesGeneric\") operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit @JvmName(\"setRangesInt\") operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. @param rows the set of rows to select @param cols the set of columns to select @param value the matrix to set the subslice to @JvmName(\"setColRangeDouble\") operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit @JvmName(\"setColRangeFloat\") operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Matrix < Float >): Unit @JvmName(\"setColRangeGeneric\") operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit @JvmName(\"setColRangeInt\") operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. @param rows the row to select @param cols the set of columns to select @param value the matrix to set the subslice to @JvmName(\"setRowRangeDouble\") operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit @JvmName(\"setRowRangeFloat\") operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Matrix < Float >): Unit @JvmName(\"setRowRangeGeneric\") operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit @JvmName(\"setRowRangeInt\") operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. @param rows the set of rows to select @param cols the column to select @param value the matrix to set the subslice to","title":"set"},{"location":"Reference_API_Docs/koma.extensions/times.html","text":"api / koma.extensions / times times @JvmName(\"timesArrByte\") operator fun NDArray < Byte >.times(other: NDArray < Byte >): NDArray < Byte > @JvmName(\"timesByte\") operator fun NDArray < Byte >.times(other: Byte ): NDArray < Byte > @JvmName(\"timesArrDouble\") operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > @JvmName(\"timesDouble\") operator fun NDArray < Double >.times(other: Double ): NDArray < Double > @JvmName(\"timesArrFloat\") operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > @JvmName(\"timesFloat\") operator fun NDArray < Float >.times(other: Float ): NDArray < Float > @JvmName(\"timesArrInt\") operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > @JvmName(\"timesInt\") operator fun NDArray < Int >.times(other: Int ): NDArray < Int > @JvmName(\"timesArrLong\") operator fun NDArray < Long >.times(other: NDArray < Long >): NDArray < Long > @JvmName(\"timesLong\") operator fun NDArray < Long >.times(other: Long ): NDArray < Long > @JvmName(\"timesArrShort\") operator fun NDArray < Short >.times(other: NDArray < Short >): NDArray < Short > @JvmName(\"timesShort\") operator fun NDArray < Short >.times(other: Short ): NDArray < Short >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix","title":"Times"},{"location":"Reference_API_Docs/koma.extensions/times.html#times","text":"@JvmName(\"timesArrByte\") operator fun NDArray < Byte >.times(other: NDArray < Byte >): NDArray < Byte > @JvmName(\"timesByte\") operator fun NDArray < Byte >.times(other: Byte ): NDArray < Byte > @JvmName(\"timesArrDouble\") operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > @JvmName(\"timesDouble\") operator fun NDArray < Double >.times(other: Double ): NDArray < Double > @JvmName(\"timesArrFloat\") operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > @JvmName(\"timesFloat\") operator fun NDArray < Float >.times(other: Float ): NDArray < Float > @JvmName(\"timesArrInt\") operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > @JvmName(\"timesInt\") operator fun NDArray < Int >.times(other: Int ): NDArray < Int > @JvmName(\"timesArrLong\") operator fun NDArray < Long >.times(other: NDArray < Long >): NDArray < Long > @JvmName(\"timesLong\") operator fun NDArray < Long >.times(other: Long ): NDArray < Long > @JvmName(\"timesArrShort\") operator fun NDArray < Short >.times(other: NDArray < Short >): NDArray < Short > @JvmName(\"timesShort\") operator fun NDArray < Short >.times(other: Short ): NDArray < Short >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix","title":"times"},{"location":"Reference_API_Docs/koma.extensions/to-byte-array.html","text":"api / koma.extensions / toByteArray toByteArray fun NDArray < Byte >.toByteArray(): ByteArray Converts this NDArray into a one-dimensional ByteArray in row-major order.","title":"To byte array"},{"location":"Reference_API_Docs/koma.extensions/to-byte-array.html#tobytearray","text":"fun NDArray < Byte >.toByteArray(): ByteArray Converts this NDArray into a one-dimensional ByteArray in row-major order.","title":"toByteArray"},{"location":"Reference_API_Docs/koma.extensions/to-double-array.html","text":"api / koma.extensions / toDoubleArray toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order.","title":"To double array"},{"location":"Reference_API_Docs/koma.extensions/to-double-array.html#todoublearray","text":"fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order.","title":"toDoubleArray"},{"location":"Reference_API_Docs/koma.extensions/to-float-array.html","text":"api / koma.extensions / toFloatArray toFloatArray fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order.","title":"To float array"},{"location":"Reference_API_Docs/koma.extensions/to-float-array.html#tofloatarray","text":"fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order.","title":"toFloatArray"},{"location":"Reference_API_Docs/koma.extensions/to-int-array.html","text":"api / koma.extensions / toIntArray toIntArray fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order.","title":"To int array"},{"location":"Reference_API_Docs/koma.extensions/to-int-array.html#tointarray","text":"fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order.","title":"toIntArray"},{"location":"Reference_API_Docs/koma.extensions/to-long-array.html","text":"api / koma.extensions / toLongArray toLongArray fun NDArray < Long >.toLongArray(): LongArray Converts this NDArray into a one-dimensional LongArray in row-major order.","title":"To long array"},{"location":"Reference_API_Docs/koma.extensions/to-long-array.html#tolongarray","text":"fun NDArray < Long >.toLongArray(): LongArray Converts this NDArray into a one-dimensional LongArray in row-major order.","title":"toLongArray"},{"location":"Reference_API_Docs/koma.extensions/to-matrix-or-null.html","text":"api / koma.extensions / toMatrixOrNull toMatrixOrNull @JvmName(\"toMatrixGeneric\") fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >?","title":"To matrix or null"},{"location":"Reference_API_Docs/koma.extensions/to-matrix-or-null.html#tomatrixornull","text":"@JvmName(\"toMatrixGeneric\") fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >?","title":"toMatrixOrNull"},{"location":"Reference_API_Docs/koma.extensions/to-matrix.html","text":"api / koma.extensions / toMatrix toMatrix @JvmName(\"toMatrixDouble\") fun NDArray < Double >.toMatrix(): Matrix < Double > @JvmName(\"toMatrixFloat\") fun NDArray < Float >.toMatrix(): Matrix < Float > @JvmName(\"toMatrixInt\") fun NDArray < Int >.toMatrix(): Matrix < Int >","title":"To matrix"},{"location":"Reference_API_Docs/koma.extensions/to-matrix.html#tomatrix","text":"@JvmName(\"toMatrixDouble\") fun NDArray < Double >.toMatrix(): Matrix < Double > @JvmName(\"toMatrixFloat\") fun NDArray < Float >.toMatrix(): Matrix < Float > @JvmName(\"toMatrixInt\") fun NDArray < Int >.toMatrix(): Matrix < Int >","title":"toMatrix"},{"location":"Reference_API_Docs/koma.extensions/to-short-array.html","text":"api / koma.extensions / toShortArray toShortArray fun NDArray < Short >.toShortArray(): ShortArray Converts this NDArray into a one-dimensional ShortArray in row-major order.","title":"To short array"},{"location":"Reference_API_Docs/koma.extensions/to-short-array.html#toshortarray","text":"fun NDArray < Short >.toShortArray(): ShortArray Converts this NDArray into a one-dimensional ShortArray in row-major order.","title":"toShortArray"},{"location":"Reference_API_Docs/koma.extensions/to-typed-array.html","text":"api / koma.extensions / toTypedArray toTypedArray inline fun <reified T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order.","title":"To typed array"},{"location":"Reference_API_Docs/koma.extensions/to-typed-array.html#totypedarray","text":"inline fun <reified T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order.","title":"toTypedArray"},{"location":"Reference_API_Docs/koma.extensions/unary-minus.html","text":"api / koma.extensions / unaryMinus unaryMinus @JvmName(\"unaryMinusByte\") operator fun NDArray < Byte >.unaryMinus(): NDArray < Byte > @JvmName(\"unaryMinusDouble\") operator fun NDArray < Double >.unaryMinus(): NDArray < Double > @JvmName(\"unaryMinusFloat\") operator fun NDArray < Float >.unaryMinus(): NDArray < Float > @JvmName(\"unaryMinusInt\") operator fun NDArray < Int >.unaryMinus(): NDArray < Int > @JvmName(\"unaryMinusLong\") operator fun NDArray < Long >.unaryMinus(): NDArray < Long > @JvmName(\"unaryMinusShort\") operator fun NDArray < Short >.unaryMinus(): NDArray < Short >","title":"Unary minus"},{"location":"Reference_API_Docs/koma.extensions/unary-minus.html#unaryminus","text":"@JvmName(\"unaryMinusByte\") operator fun NDArray < Byte >.unaryMinus(): NDArray < Byte > @JvmName(\"unaryMinusDouble\") operator fun NDArray < Double >.unaryMinus(): NDArray < Double > @JvmName(\"unaryMinusFloat\") operator fun NDArray < Float >.unaryMinus(): NDArray < Float > @JvmName(\"unaryMinusInt\") operator fun NDArray < Int >.unaryMinus(): NDArray < Int > @JvmName(\"unaryMinusLong\") operator fun NDArray < Long >.unaryMinus(): NDArray < Long > @JvmName(\"unaryMinusShort\") operator fun NDArray < Short >.unaryMinus(): NDArray < Short >","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-double/index.html","text":"api / koma.extensions / kotlin.Double Extensions for kotlin.Double Name Summary minus operator fun Double .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala plus operator fun Double .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix times operator fun Double .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix","title":"Index"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-double/index.html#extensions-for-kotlindouble","text":"Name Summary minus operator fun Double .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala plus operator fun Double .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix times operator fun Double .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix","title":"Extensions for kotlin.Double"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-double/minus.html","text":"api / koma.extensions / kotlin.Double / minus minus operator fun Double .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala","title":"Minus"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-double/minus.html#minus","text":"operator fun Double .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala","title":"minus"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-double/plus.html","text":"api / koma.extensions / kotlin.Double / plus plus operator fun Double .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix","title":"Plus"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-double/plus.html#plus","text":"operator fun Double .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix","title":"plus"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-double/times.html","text":"api / koma.extensions / kotlin.Double / times times operator fun Double .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix","title":"Times"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-double/times.html#times","text":"operator fun Double .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix","title":"times"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-int/index.html","text":"api / koma.extensions / kotlin.Int Extensions for kotlin.Int Name Summary minus operator fun Int .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala plus operator fun Int .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix times operator fun Int .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix","title":"Index"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-int/index.html#extensions-for-kotlinint","text":"Name Summary minus operator fun Int .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala plus operator fun Int .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix times operator fun Int .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix","title":"Extensions for kotlin.Int"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-int/minus.html","text":"api / koma.extensions / kotlin.Int / minus minus operator fun Int .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala","title":"Minus"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-int/minus.html#minus","text":"operator fun Int .minus(other: Matrix < Double >): Matrix < Double > Subtract a matrix from a scala","title":"minus"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-int/plus.html","text":"api / koma.extensions / kotlin.Int / plus plus operator fun Int .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix","title":"Plus"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-int/plus.html#plus","text":"operator fun Int .plus(other: Matrix < Double >): Matrix < Double > Add a scalar to a matrix","title":"plus"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-int/times.html","text":"api / koma.extensions / kotlin.Int / times times operator fun Int .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix","title":"Times"},{"location":"Reference_API_Docs/koma.extensions/kotlin.-int/times.html#times","text":"operator fun Int .times(other: Matrix < Double >): Matrix < Double > Multiply a scalar by a matrix","title":"times"},{"location":"Reference_API_Docs/koma.internal/index.html","text":"api / koma.internal Package koma.internal Types Name Summary KomaRandom interface KomaRandom Annotations Name Summary JvmMultifileClass annotation expect class JvmMultifileClass JvmName annotation expect class JvmName KomaJsName annotation expect class KomaJsName KomaJvmMultifileClass annotation expect class KomaJvmMultifileClass KomaJvmName annotation expect class KomaJvmName Properties Name Summary notImplemented const val notImplemented: String Functions Name Summary getByteNDArrayFactory expect fun getByteNDArrayFactory(): NumericalNDArrayFactory < Byte > getDoubleMatrixFactory expect fun getDoubleMatrixFactory(): MatrixFactory < Matrix < Double >> getDoubleNDArrayFactory expect fun getDoubleNDArrayFactory(): NumericalNDArrayFactory < Double > getFloatMatrixFactory expect fun getFloatMatrixFactory(): MatrixFactory < Matrix < Float >> getFloatNDArrayFactory expect fun getFloatNDArrayFactory(): NumericalNDArrayFactory < Float > getIntMatrixFactory expect fun getIntMatrixFactory(): MatrixFactory < Matrix < Int >> getIntNDArrayFactory expect fun getIntNDArrayFactory(): NumericalNDArrayFactory < Int > getLongNDArrayFactory expect fun getLongNDArrayFactory(): NumericalNDArrayFactory < Long > getRng fun getRng(): KomaRandom getShortNDArrayFactory expect fun getShortNDArrayFactory(): NumericalNDArrayFactory < Short >","title":"Index"},{"location":"Reference_API_Docs/koma.internal/index.html#package-komainternal","text":"","title":"Package koma.internal"},{"location":"Reference_API_Docs/koma.internal/index.html#types","text":"Name Summary KomaRandom interface KomaRandom","title":"Types"},{"location":"Reference_API_Docs/koma.internal/index.html#annotations","text":"Name Summary JvmMultifileClass annotation expect class JvmMultifileClass JvmName annotation expect class JvmName KomaJsName annotation expect class KomaJsName KomaJvmMultifileClass annotation expect class KomaJvmMultifileClass KomaJvmName annotation expect class KomaJvmName","title":"Annotations"},{"location":"Reference_API_Docs/koma.internal/index.html#properties","text":"Name Summary notImplemented const val notImplemented: String","title":"Properties"},{"location":"Reference_API_Docs/koma.internal/index.html#functions","text":"Name Summary getByteNDArrayFactory expect fun getByteNDArrayFactory(): NumericalNDArrayFactory < Byte > getDoubleMatrixFactory expect fun getDoubleMatrixFactory(): MatrixFactory < Matrix < Double >> getDoubleNDArrayFactory expect fun getDoubleNDArrayFactory(): NumericalNDArrayFactory < Double > getFloatMatrixFactory expect fun getFloatMatrixFactory(): MatrixFactory < Matrix < Float >> getFloatNDArrayFactory expect fun getFloatNDArrayFactory(): NumericalNDArrayFactory < Float > getIntMatrixFactory expect fun getIntMatrixFactory(): MatrixFactory < Matrix < Int >> getIntNDArrayFactory expect fun getIntNDArrayFactory(): NumericalNDArrayFactory < Int > getLongNDArrayFactory expect fun getLongNDArrayFactory(): NumericalNDArrayFactory < Long > getRng fun getRng(): KomaRandom getShortNDArrayFactory expect fun getShortNDArrayFactory(): NumericalNDArrayFactory < Short >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal/get-byte-n-d-array-factory.html","text":"api / koma.internal / getByteNDArrayFactory getByteNDArrayFactory expect fun getByteNDArrayFactory(): NumericalNDArrayFactory < Byte >","title":"Get byte n d array factory"},{"location":"Reference_API_Docs/koma.internal/get-byte-n-d-array-factory.html#getbytendarrayfactory","text":"expect fun getByteNDArrayFactory(): NumericalNDArrayFactory < Byte >","title":"getByteNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal/get-double-matrix-factory.html","text":"api / koma.internal / getDoubleMatrixFactory getDoubleMatrixFactory expect fun getDoubleMatrixFactory(): MatrixFactory < Matrix < Double >>","title":"Get double matrix factory"},{"location":"Reference_API_Docs/koma.internal/get-double-matrix-factory.html#getdoublematrixfactory","text":"expect fun getDoubleMatrixFactory(): MatrixFactory < Matrix < Double >>","title":"getDoubleMatrixFactory"},{"location":"Reference_API_Docs/koma.internal/get-double-n-d-array-factory.html","text":"api / koma.internal / getDoubleNDArrayFactory getDoubleNDArrayFactory expect fun getDoubleNDArrayFactory(): NumericalNDArrayFactory < Double >","title":"Get double n d array factory"},{"location":"Reference_API_Docs/koma.internal/get-double-n-d-array-factory.html#getdoublendarrayfactory","text":"expect fun getDoubleNDArrayFactory(): NumericalNDArrayFactory < Double >","title":"getDoubleNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal/get-float-matrix-factory.html","text":"api / koma.internal / getFloatMatrixFactory getFloatMatrixFactory expect fun getFloatMatrixFactory(): MatrixFactory < Matrix < Float >>","title":"Get float matrix factory"},{"location":"Reference_API_Docs/koma.internal/get-float-matrix-factory.html#getfloatmatrixfactory","text":"expect fun getFloatMatrixFactory(): MatrixFactory < Matrix < Float >>","title":"getFloatMatrixFactory"},{"location":"Reference_API_Docs/koma.internal/get-float-n-d-array-factory.html","text":"api / koma.internal / getFloatNDArrayFactory getFloatNDArrayFactory expect fun getFloatNDArrayFactory(): NumericalNDArrayFactory < Float >","title":"Get float n d array factory"},{"location":"Reference_API_Docs/koma.internal/get-float-n-d-array-factory.html#getfloatndarrayfactory","text":"expect fun getFloatNDArrayFactory(): NumericalNDArrayFactory < Float >","title":"getFloatNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal/get-int-matrix-factory.html","text":"api / koma.internal / getIntMatrixFactory getIntMatrixFactory expect fun getIntMatrixFactory(): MatrixFactory < Matrix < Int >>","title":"Get int matrix factory"},{"location":"Reference_API_Docs/koma.internal/get-int-matrix-factory.html#getintmatrixfactory","text":"expect fun getIntMatrixFactory(): MatrixFactory < Matrix < Int >>","title":"getIntMatrixFactory"},{"location":"Reference_API_Docs/koma.internal/get-int-n-d-array-factory.html","text":"api / koma.internal / getIntNDArrayFactory getIntNDArrayFactory expect fun getIntNDArrayFactory(): NumericalNDArrayFactory < Int >","title":"Get int n d array factory"},{"location":"Reference_API_Docs/koma.internal/get-int-n-d-array-factory.html#getintndarrayfactory","text":"expect fun getIntNDArrayFactory(): NumericalNDArrayFactory < Int >","title":"getIntNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal/get-long-n-d-array-factory.html","text":"api / koma.internal / getLongNDArrayFactory getLongNDArrayFactory expect fun getLongNDArrayFactory(): NumericalNDArrayFactory < Long >","title":"Get long n d array factory"},{"location":"Reference_API_Docs/koma.internal/get-long-n-d-array-factory.html#getlongndarrayfactory","text":"expect fun getLongNDArrayFactory(): NumericalNDArrayFactory < Long >","title":"getLongNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal/get-rng.html","text":"api / koma.internal / getRng getRng fun getRng(): KomaRandom","title":"Get rng"},{"location":"Reference_API_Docs/koma.internal/get-rng.html#getrng","text":"fun getRng(): KomaRandom","title":"getRng"},{"location":"Reference_API_Docs/koma.internal/get-short-n-d-array-factory.html","text":"api / koma.internal / getShortNDArrayFactory getShortNDArrayFactory expect fun getShortNDArrayFactory(): NumericalNDArrayFactory < Short >","title":"Get short n d array factory"},{"location":"Reference_API_Docs/koma.internal/get-short-n-d-array-factory.html#getshortndarrayfactory","text":"expect fun getShortNDArrayFactory(): NumericalNDArrayFactory < Short >","title":"getShortNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal/not-implemented.html","text":"api / koma.internal / notImplemented notImplemented const val notImplemented: String","title":"Not implemented"},{"location":"Reference_API_Docs/koma.internal/not-implemented.html#notimplemented","text":"const val notImplemented: String","title":"notImplemented"},{"location":"Reference_API_Docs/koma.internal/-jvm-multifile-class/index.html","text":"api / koma.internal / JvmMultifileClass JvmMultifileClass @Target([AnnotationTarget.FILE]) annotation expect class JvmMultifileClass Constructors Name Summary <init> JvmMultifileClass()","title":"Index"},{"location":"Reference_API_Docs/koma.internal/-jvm-multifile-class/index.html#jvmmultifileclass","text":"@Target([AnnotationTarget.FILE]) annotation expect class JvmMultifileClass","title":"JvmMultifileClass"},{"location":"Reference_API_Docs/koma.internal/-jvm-multifile-class/index.html#constructors","text":"Name Summary <init> JvmMultifileClass()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal/-jvm-multifile-class/-init-.html","text":"api / koma.internal / JvmMultifileClass / <init> <init> JvmMultifileClass()","title":" init "},{"location":"Reference_API_Docs/koma.internal/-jvm-multifile-class/-init-.html#init","text":"JvmMultifileClass()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal/-jvm-name/index.html","text":"api / koma.internal / JvmName JvmName @Target([AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER, AnnotationTarget.FILE]) annotation expect class JvmName Constructors Name Summary <init> JvmName(name: String ) Properties Name Summary name val name: String","title":"Index"},{"location":"Reference_API_Docs/koma.internal/-jvm-name/index.html#jvmname","text":"@Target([AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER, AnnotationTarget.FILE]) annotation expect class JvmName","title":"JvmName"},{"location":"Reference_API_Docs/koma.internal/-jvm-name/index.html#constructors","text":"Name Summary <init> JvmName(name: String )","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal/-jvm-name/index.html#properties","text":"Name Summary name val name: String","title":"Properties"},{"location":"Reference_API_Docs/koma.internal/-jvm-name/-init-.html","text":"api / koma.internal / JvmName / <init> <init> JvmName(name: String )","title":" init "},{"location":"Reference_API_Docs/koma.internal/-jvm-name/-init-.html#init","text":"JvmName(name: String )","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal/-jvm-name/name.html","text":"api / koma.internal / JvmName / name name val name: String","title":"Name"},{"location":"Reference_API_Docs/koma.internal/-jvm-name/name.html#name","text":"val name: String","title":"name"},{"location":"Reference_API_Docs/koma.internal/-koma-js-name/index.html","text":"api / koma.internal / KomaJsName KomaJsName @Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY, AnnotationTarget.CONSTRUCTOR, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER]) annotation expect class KomaJsName Constructors Name Summary <init> KomaJsName(name: String ) Properties Name Summary name val name: String","title":"Index"},{"location":"Reference_API_Docs/koma.internal/-koma-js-name/index.html#komajsname","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY, AnnotationTarget.CONSTRUCTOR, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER]) annotation expect class KomaJsName","title":"KomaJsName"},{"location":"Reference_API_Docs/koma.internal/-koma-js-name/index.html#constructors","text":"Name Summary <init> KomaJsName(name: String )","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal/-koma-js-name/index.html#properties","text":"Name Summary name val name: String","title":"Properties"},{"location":"Reference_API_Docs/koma.internal/-koma-js-name/-init-.html","text":"api / koma.internal / KomaJsName / <init> <init> KomaJsName(name: String )","title":" init "},{"location":"Reference_API_Docs/koma.internal/-koma-js-name/-init-.html#init","text":"KomaJsName(name: String )","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal/-koma-js-name/name.html","text":"api / koma.internal / KomaJsName / name name val name: String","title":"Name"},{"location":"Reference_API_Docs/koma.internal/-koma-js-name/name.html#name","text":"val name: String","title":"name"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-multifile-class/index.html","text":"api / koma.internal / KomaJvmMultifileClass KomaJvmMultifileClass @Target([AnnotationTarget.FILE]) annotation expect class KomaJvmMultifileClass Constructors Name Summary <init> KomaJvmMultifileClass()","title":"Index"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-multifile-class/index.html#komajvmmultifileclass","text":"@Target([AnnotationTarget.FILE]) annotation expect class KomaJvmMultifileClass","title":"KomaJvmMultifileClass"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-multifile-class/index.html#constructors","text":"Name Summary <init> KomaJvmMultifileClass()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-multifile-class/-init-.html","text":"api / koma.internal / KomaJvmMultifileClass / <init> <init> KomaJvmMultifileClass()","title":" init "},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-multifile-class/-init-.html#init","text":"KomaJvmMultifileClass()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-name/index.html","text":"api / koma.internal / KomaJvmName KomaJvmName @Target([AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER, AnnotationTarget.FILE]) annotation expect class KomaJvmName Constructors Name Summary <init> KomaJvmName(name: String ) Properties Name Summary name val name: String","title":"Index"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-name/index.html#komajvmname","text":"@Target([AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER, AnnotationTarget.FILE]) annotation expect class KomaJvmName","title":"KomaJvmName"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-name/index.html#constructors","text":"Name Summary <init> KomaJvmName(name: String )","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-name/index.html#properties","text":"Name Summary name val name: String","title":"Properties"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-name/-init-.html","text":"api / koma.internal / KomaJvmName / <init> <init> KomaJvmName(name: String )","title":" init "},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-name/-init-.html#init","text":"KomaJvmName(name: String )","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-name/name.html","text":"api / koma.internal / KomaJvmName / name name val name: String","title":"Name"},{"location":"Reference_API_Docs/koma.internal/-koma-jvm-name/name.html#name","text":"val name: String","title":"name"},{"location":"Reference_API_Docs/koma.internal/-koma-random/index.html","text":"api / koma.internal / KomaRandom KomaRandom interface KomaRandom Functions Name Summary nextDouble abstract fun nextDouble(): Double nextGaussian abstract fun nextGaussian(): Double setSeed abstract fun setSeed(seed: Long ): Unit","title":"Index"},{"location":"Reference_API_Docs/koma.internal/-koma-random/index.html#komarandom","text":"interface KomaRandom","title":"KomaRandom"},{"location":"Reference_API_Docs/koma.internal/-koma-random/index.html#functions","text":"Name Summary nextDouble abstract fun nextDouble(): Double nextGaussian abstract fun nextGaussian(): Double setSeed abstract fun setSeed(seed: Long ): Unit","title":"Functions"},{"location":"Reference_API_Docs/koma.internal/-koma-random/next-double.html","text":"api / koma.internal / KomaRandom / nextDouble nextDouble abstract fun nextDouble(): Double","title":"Next double"},{"location":"Reference_API_Docs/koma.internal/-koma-random/next-double.html#nextdouble","text":"abstract fun nextDouble(): Double","title":"nextDouble"},{"location":"Reference_API_Docs/koma.internal/-koma-random/next-gaussian.html","text":"api / koma.internal / KomaRandom / nextGaussian nextGaussian abstract fun nextGaussian(): Double","title":"Next gaussian"},{"location":"Reference_API_Docs/koma.internal/-koma-random/next-gaussian.html#nextgaussian","text":"abstract fun nextGaussian(): Double","title":"nextGaussian"},{"location":"Reference_API_Docs/koma.internal/-koma-random/set-seed.html","text":"api / koma.internal / KomaRandom / setSeed setSeed abstract fun setSeed(seed: Long ): Unit","title":"Set seed"},{"location":"Reference_API_Docs/koma.internal/-koma-random/set-seed.html#setseed","text":"abstract fun setSeed(seed: Long ): Unit","title":"setSeed"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/index.html","text":"api / koma.internal.default.generated.matrix Package koma.internal.default.generated.matrix Types Name Summary DefaultDoubleMatrix class DefaultDoubleMatrix : Matrix < Double > DefaultDoubleMatrixFactory class DefaultDoubleMatrixFactory : MatrixFactory < Matrix < Double >> DefaultFloatMatrix class DefaultFloatMatrix : Matrix < Float > DefaultFloatMatrixFactory class DefaultFloatMatrixFactory : MatrixFactory < Matrix < Float >> DefaultIntMatrix class DefaultIntMatrix : Matrix < Int > DefaultIntMatrixFactory class DefaultIntMatrixFactory : MatrixFactory < Matrix < Int >>","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/index.html#package-komainternaldefaultgeneratedmatrix","text":"","title":"Package koma.internal.default.generated.matrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/index.html#types","text":"Name Summary DefaultDoubleMatrix class DefaultDoubleMatrix : Matrix < Double > DefaultDoubleMatrixFactory class DefaultDoubleMatrixFactory : MatrixFactory < Matrix < Double >> DefaultFloatMatrix class DefaultFloatMatrix : Matrix < Float > DefaultFloatMatrixFactory class DefaultFloatMatrixFactory : MatrixFactory < Matrix < Float >> DefaultIntMatrix class DefaultIntMatrix : Matrix < Int > DefaultIntMatrixFactory class DefaultIntMatrixFactory : MatrixFactory < Matrix < Int >>","title":"Types"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/index.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix DefaultDoubleMatrix class DefaultDoubleMatrix : Matrix < Double > Constructors Name Summary <init> DefaultDoubleMatrix(rows: Int , cols: Int ) Properties Name Summary cols val cols: Int rows val rows: Int storage val storage: DoubleArray Inherited Properties Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int Functions Name Summary LU fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < Matrix < Double >, Matrix < Double >> SVD fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> T fun T(): Matrix < Double > Transpose operator. argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): Matrix < Double > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): Matrix < Double > Returns a copy of this matrix (same values, new memory) det fun det(): Double Determinant of the matrix diag fun diag(): Matrix < Double > div fun div(other: Double ): Matrix < Double > fun div(other: Int ): Matrix < Double > elementSum fun elementSum(): Double Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Double >): Matrix < Double > Element-wise multiplication with another matrix epow fun epow(other: Double ): Matrix < Double > Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Double > expm fun expm(): Matrix < Double > Compute the matrix exponential e^x (NOT elementwise) getBaseMatrix fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): Matrix < Double > getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MatrixFactory < Matrix < Double >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float getGeneric fun getGeneric(i: Int , j: Int ): Double fun getGeneric(i: Int ): Double getInt fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int getRow fun getRow(row: Int ): Matrix < Double > inv fun inv(): Matrix < Double > Matrix inverse (square matrices) max fun max(): Double Maximum value contained in the matrix mean fun mean(): Double Mean (average) of all the elements in the matrix. min fun min(): Double Minimum value contained in the matrix minus fun minus(other: Double ): Matrix < Double > fun minus(other: Matrix < Double >): Matrix < Double > normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Matrix < Double > Pseudo-inverse of (non-square) matrix plus fun plus(other: Double ): Matrix < Double > fun plus(other: Matrix < Double >): Matrix < Double > setCol fun setCol(index: Int , col: Matrix < Double >): Unit setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit setFloat fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit setGeneric fun setGeneric(i: Int , v: Double ): Unit fun setGeneric(i: Int , j: Int , v: Double ): Unit setInt fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit setRow fun setRow(index: Int , row: Matrix < Double >): Unit solve fun solve(other: Matrix < Double >): Matrix < Double > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): Matrix < Double > fun times(other: Double ): Matrix < Double > trace fun trace(): Double The matrix trace. transpose fun transpose(): Matrix < Double > Transpose of the matrix unaryMinus fun unaryMinus(): Matrix < Double > Inherited Functions Name Summary asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T getInt open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , value: T ): Unit setInt open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange Extension Functions Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/index.html#defaultdoublematrix","text":"class DefaultDoubleMatrix : Matrix < Double >","title":"DefaultDoubleMatrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/index.html#constructors","text":"Name Summary <init> DefaultDoubleMatrix(rows: Int , cols: Int )","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/index.html#properties","text":"Name Summary cols val cols: Int rows val rows: Int storage val storage: DoubleArray","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/index.html#inherited-properties","text":"Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int","title":"Inherited Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/index.html#functions","text":"Name Summary LU fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < Matrix < Double >, Matrix < Double >> SVD fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> T fun T(): Matrix < Double > Transpose operator. argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): Matrix < Double > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): Matrix < Double > Returns a copy of this matrix (same values, new memory) det fun det(): Double Determinant of the matrix diag fun diag(): Matrix < Double > div fun div(other: Double ): Matrix < Double > fun div(other: Int ): Matrix < Double > elementSum fun elementSum(): Double Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Double >): Matrix < Double > Element-wise multiplication with another matrix epow fun epow(other: Double ): Matrix < Double > Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Double > expm fun expm(): Matrix < Double > Compute the matrix exponential e^x (NOT elementwise) getBaseMatrix fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): Matrix < Double > getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MatrixFactory < Matrix < Double >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float getGeneric fun getGeneric(i: Int , j: Int ): Double fun getGeneric(i: Int ): Double getInt fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int getRow fun getRow(row: Int ): Matrix < Double > inv fun inv(): Matrix < Double > Matrix inverse (square matrices) max fun max(): Double Maximum value contained in the matrix mean fun mean(): Double Mean (average) of all the elements in the matrix. min fun min(): Double Minimum value contained in the matrix minus fun minus(other: Double ): Matrix < Double > fun minus(other: Matrix < Double >): Matrix < Double > normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Matrix < Double > Pseudo-inverse of (non-square) matrix plus fun plus(other: Double ): Matrix < Double > fun plus(other: Matrix < Double >): Matrix < Double > setCol fun setCol(index: Int , col: Matrix < Double >): Unit setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit setFloat fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit setGeneric fun setGeneric(i: Int , v: Double ): Unit fun setGeneric(i: Int , j: Int , v: Double ): Unit setInt fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit setRow fun setRow(index: Int , row: Matrix < Double >): Unit solve fun solve(other: Matrix < Double >): Matrix < Double > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): Matrix < Double > fun times(other: Double ): Matrix < Double > trace fun trace(): Double The matrix trace. transpose fun transpose(): Matrix < Double > Transpose of the matrix unaryMinus fun unaryMinus(): Matrix < Double >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/index.html#inherited-functions","text":"Name Summary asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T getInt open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , value: T ): Unit setInt open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/index.html#extension-functions","text":"Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-init-.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / <init> <init> DefaultDoubleMatrix(rows: Int , cols: Int )","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-init-.html#init","text":"DefaultDoubleMatrix(rows: Int , cols: Int )","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-l-u.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / LU LU fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":" l u"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-l-u.html#lu","text":"fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":"LU"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-q-r.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / QR QR fun QR(): Pair < Matrix < Double >, Matrix < Double >> Overrides Matrix.QR","title":" q r"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-q-r.html#qr","text":"fun QR(): Pair < Matrix < Double >, Matrix < Double >> Overrides Matrix.QR","title":"QR"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-s-v-d.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / SVD SVD fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.SVD","title":" s v d"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-s-v-d.html#svd","text":"fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.SVD","title":"SVD"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-t.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / T T fun T(): Matrix < Double > Overrides Matrix.T Transpose operator.","title":" t"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/-t.html#t","text":"fun T(): Matrix < Double > Overrides Matrix.T Transpose operator.","title":"T"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/arg-max.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / argMax argMax fun argMax(): Int Overrides Matrix.argMax Row major 1D index.","title":"Arg max"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/arg-max.html#argmax","text":"fun argMax(): Int Overrides Matrix.argMax Row major 1D index.","title":"argMax"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/arg-min.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / argMin argMin fun argMin(): Int Overrides Matrix.argMin Row major 1D index.","title":"Arg min"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/arg-min.html#argmin","text":"fun argMin(): Int Overrides Matrix.argMin Row major 1D index.","title":"argMin"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/chol.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / chol chol fun chol(): Matrix < Double > Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"Chol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/chol.html#chol","text":"fun chol(): Matrix < Double > Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"chol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/cols.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / cols cols val cols: Int","title":"Cols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/cols.html#cols","text":"val cols: Int","title":"cols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/copy.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / copy copy fun copy(): Matrix < Double > Overrides Matrix.copy Returns a copy of this matrix (same values, new memory)","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/copy.html#copy","text":"fun copy(): Matrix < Double > Overrides Matrix.copy Returns a copy of this matrix (same values, new memory)","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/det.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / det det fun det(): Double Overrides Matrix.det Determinant of the matrix","title":"Det"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/det.html#det","text":"fun det(): Double Overrides Matrix.det Determinant of the matrix","title":"det"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/diag.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / diag diag fun diag(): Matrix < Double > Overrides Matrix.diag","title":"Diag"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/diag.html#diag","text":"fun diag(): Matrix < Double > Overrides Matrix.diag","title":"diag"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/div.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / div div fun div(other: Double ): Matrix < Double > Overrides Matrix.div fun div(other: Int ): Matrix < Double > Overrides Matrix.div","title":"Div"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/div.html#div","text":"fun div(other: Double ): Matrix < Double > Overrides Matrix.div fun div(other: Int ): Matrix < Double > Overrides Matrix.div","title":"div"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/element-sum.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / elementSum elementSum fun elementSum(): Double Overrides Matrix.elementSum Sum of all the elements in the matrix.","title":"Element sum"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/element-sum.html#elementsum","text":"fun elementSum(): Double Overrides Matrix.elementSum Sum of all the elements in the matrix.","title":"elementSum"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/element-times.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / elementTimes elementTimes fun elementTimes(other: Matrix < Double >): Matrix < Double > Overrides Matrix.elementTimes Element-wise multiplication with another matrix","title":"Element times"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/element-times.html#elementtimes","text":"fun elementTimes(other: Matrix < Double >): Matrix < Double > Overrides Matrix.elementTimes Element-wise multiplication with another matrix","title":"elementTimes"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/epow.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / epow epow fun epow(other: Double ): Matrix < Double > Overrides Matrix.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Double > Overrides Matrix.epow","title":"Epow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/epow.html#epow","text":"fun epow(other: Double ): Matrix < Double > Overrides Matrix.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Double > Overrides Matrix.epow","title":"epow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/expm.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / expm expm fun expm(): Matrix < Double > Overrides Matrix.expm Compute the matrix exponential e^x (NOT elementwise)","title":"Expm"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/expm.html#expm","text":"fun expm(): Matrix < Double > Overrides Matrix.expm Compute the matrix exponential e^x (NOT elementwise)","title":"expm"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-base-matrix.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / getBaseMatrix getBaseMatrix fun getBaseMatrix(): Any Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"Get base matrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-base-matrix.html#getbasematrix","text":"fun getBaseMatrix(): Any Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"getBaseMatrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-col.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / getCol getCol fun getCol(col: Int ): Matrix < Double > Overrides Matrix.getCol","title":"Get col"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-col.html#getcol","text":"fun getCol(col: Int ): Matrix < Double > Overrides Matrix.getCol","title":"getCol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-double-data.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / getDoubleData getDoubleData fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"Get double data"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-double-data.html#getdoubledata","text":"fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"getDoubleData"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-double.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / getDouble getDouble fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-double.html#getdouble","text":"fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-factory.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / getFactory getFactory fun getFactory(): MatrixFactory < Matrix < Double >> Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"Get factory"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-factory.html#getfactory","text":"fun getFactory(): MatrixFactory < Matrix < Double >> Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"getFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-float.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / getFloat getFloat fun getFloat(i: Int , j: Int ): Float Overrides Matrix.getFloat fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-float.html#getfloat","text":"fun getFloat(i: Int , j: Int ): Float Overrides Matrix.getFloat fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-generic.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / getGeneric getGeneric fun getGeneric(i: Int , j: Int ): Double Overrides Matrix.getGeneric fun getGeneric(i: Int ): Double Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-generic.html#getgeneric","text":"fun getGeneric(i: Int , j: Int ): Double Overrides Matrix.getGeneric fun getGeneric(i: Int ): Double Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-int.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / getInt getInt fun getInt(i: Int , j: Int ): Int Overrides Matrix.getInt fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-int.html#getint","text":"fun getInt(i: Int , j: Int ): Int Overrides Matrix.getInt fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-row.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / getRow getRow fun getRow(row: Int ): Matrix < Double > Overrides Matrix.getRow","title":"Get row"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/get-row.html#getrow","text":"fun getRow(row: Int ): Matrix < Double > Overrides Matrix.getRow","title":"getRow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/inv.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / inv inv fun inv(): Matrix < Double > Overrides Matrix.inv Matrix inverse (square matrices)","title":"Inv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/inv.html#inv","text":"fun inv(): Matrix < Double > Overrides Matrix.inv Matrix inverse (square matrices)","title":"inv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/max.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / max max fun max(): Double Overrides Matrix.max Maximum value contained in the matrix","title":"Max"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/max.html#max","text":"fun max(): Double Overrides Matrix.max Maximum value contained in the matrix","title":"max"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/mean.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / mean mean fun mean(): Double Overrides Matrix.mean Mean (average) of all the elements in the matrix.","title":"Mean"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/mean.html#mean","text":"fun mean(): Double Overrides Matrix.mean Mean (average) of all the elements in the matrix.","title":"mean"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/min.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / min min fun min(): Double Overrides Matrix.min Minimum value contained in the matrix","title":"Min"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/min.html#min","text":"fun min(): Double Overrides Matrix.min Minimum value contained in the matrix","title":"min"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/minus.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / minus minus fun minus(other: Double ): Matrix < Double > Overrides Matrix.minus fun minus(other: Matrix < Double >): Matrix < Double > Overrides Matrix.minus","title":"Minus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/minus.html#minus","text":"fun minus(other: Double ): Matrix < Double > Overrides Matrix.minus fun minus(other: Matrix < Double >): Matrix < Double > Overrides Matrix.minus","title":"minus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/norm-f.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / normF normF fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"Norm f"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/norm-f.html#normf","text":"fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"normF"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/norm-ind-p1.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / normIndP1 normIndP1 fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"Norm ind p1"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/norm-ind-p1.html#normindp1","text":"fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"normIndP1"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/num-cols.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / numCols numCols fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"Num cols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/num-cols.html#numcols","text":"fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"numCols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/num-rows.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / numRows numRows fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"Num rows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/num-rows.html#numrows","text":"fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"numRows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/pinv.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / pinv pinv fun pinv(): Matrix < Double > Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"Pinv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/pinv.html#pinv","text":"fun pinv(): Matrix < Double > Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"pinv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/plus.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / plus plus fun plus(other: Double ): Matrix < Double > Overrides Matrix.plus fun plus(other: Matrix < Double >): Matrix < Double > Overrides Matrix.plus","title":"Plus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/plus.html#plus","text":"fun plus(other: Double ): Matrix < Double > Overrides Matrix.plus fun plus(other: Matrix < Double >): Matrix < Double > Overrides Matrix.plus","title":"plus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/rows.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / rows rows val rows: Int","title":"Rows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/rows.html#rows","text":"val rows: Int","title":"rows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-col.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / setCol setCol fun setCol(index: Int , col: Matrix < Double >): Unit Overrides Matrix.setCol","title":"Set col"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-col.html#setcol","text":"fun setCol(index: Int , col: Matrix < Double >): Unit Overrides Matrix.setCol","title":"setCol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-double.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / setDouble setDouble fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-double.html#setdouble","text":"fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-float.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / setFloat setFloat fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat fun setFloat(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-float.html#setfloat","text":"fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat fun setFloat(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-generic.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / setGeneric setGeneric fun setGeneric(i: Int , v: Double ): Unit Overrides NDArray.setGeneric fun setGeneric(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-generic.html#setgeneric","text":"fun setGeneric(i: Int , v: Double ): Unit Overrides NDArray.setGeneric fun setGeneric(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-int.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / setInt setInt fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt fun setInt(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-int.html#setint","text":"fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt fun setInt(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-row.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / setRow setRow fun setRow(index: Int , row: Matrix < Double >): Unit Overrides Matrix.setRow","title":"Set row"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/set-row.html#setrow","text":"fun setRow(index: Int , row: Matrix < Double >): Unit Overrides Matrix.setRow","title":"setRow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/solve.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / solve solve fun solve(other: Matrix < Double >): Matrix < Double > Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"Solve"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/solve.html#solve","text":"fun solve(other: Matrix < Double >): Matrix < Double > Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"solve"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/storage.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / storage storage val storage: DoubleArray","title":"Storage"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/storage.html#storage","text":"val storage: DoubleArray","title":"storage"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/times.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / times times fun times(other: Matrix < Double >): Matrix < Double > Overrides Matrix.times fun times(other: Double ): Matrix < Double > Overrides Matrix.times","title":"Times"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/times.html#times","text":"fun times(other: Matrix < Double >): Matrix < Double > Overrides Matrix.times fun times(other: Double ): Matrix < Double > Overrides Matrix.times","title":"times"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/trace.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / trace trace fun trace(): Double Overrides Matrix.trace The matrix trace.","title":"Trace"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/trace.html#trace","text":"fun trace(): Double Overrides Matrix.trace The matrix trace.","title":"trace"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/transpose.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / transpose transpose fun transpose(): Matrix < Double > Overrides Matrix.transpose Transpose of the matrix","title":"Transpose"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/transpose.html#transpose","text":"fun transpose(): Matrix < Double > Overrides Matrix.transpose Transpose of the matrix","title":"transpose"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/unary-minus.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrix / unaryMinus unaryMinus fun unaryMinus(): Matrix < Double > Overrides Matrix.unaryMinus","title":"Unary minus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix/unary-minus.html#unaryminus","text":"fun unaryMinus(): Matrix < Double > Overrides Matrix.unaryMinus","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/index.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrixFactory DefaultDoubleMatrixFactory class DefaultDoubleMatrixFactory : MatrixFactory < Matrix < Double >> Constructors Name Summary <init> DefaultDoubleMatrixFactory() Functions Name Summary arange fun arange(start: Double , stop: Double , increment: Double ): Matrix < Double > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Double > Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Double > fun arange(start: Int , stop: Int ): Matrix < Double > Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. create fun create(data: IntRange ): Matrix < Double > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Double > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Double > Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): Matrix < Double > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Double > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): Matrix < Double > Creates a one initialized matrix of the requested shape rand fun rand(rows: Int , cols: Int ): Matrix < Double > Creates a matrix of uniform 0-1 random samples randn fun randn(rows: Int , cols: Int ): Matrix < Double > Creates a matrix of unit-normal random samples zeros fun zeros(rows: Int , cols: Int ): DefaultDoubleMatrix Generate a zero initialized matrix of the requested shape.","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/index.html#defaultdoublematrixfactory","text":"class DefaultDoubleMatrixFactory : MatrixFactory < Matrix < Double >>","title":"DefaultDoubleMatrixFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/index.html#constructors","text":"Name Summary <init> DefaultDoubleMatrixFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/index.html#functions","text":"Name Summary arange fun arange(start: Double , stop: Double , increment: Double ): Matrix < Double > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Double > Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Double > fun arange(start: Int , stop: Int ): Matrix < Double > Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. create fun create(data: IntRange ): Matrix < Double > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Double > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Double > Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): Matrix < Double > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Double > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): Matrix < Double > Creates a one initialized matrix of the requested shape rand fun rand(rows: Int , cols: Int ): Matrix < Double > Creates a matrix of uniform 0-1 random samples randn fun randn(rows: Int , cols: Int ): Matrix < Double > Creates a matrix of unit-normal random samples zeros fun zeros(rows: Int , cols: Int ): DefaultDoubleMatrix Generate a zero initialized matrix of the requested shape.","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/-init-.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrixFactory / <init> <init> DefaultDoubleMatrixFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/-init-.html#init","text":"DefaultDoubleMatrixFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/arange.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrixFactory / arange arange fun arange(start: Double , stop: Double , increment: Double ): Matrix < Double > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int , increment: Int ): Matrix < Double > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Double > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int ): Matrix < Double > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"Arange"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/arange.html#arange","text":"fun arange(start: Double , stop: Double , increment: Double ): Matrix < Double > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int , increment: Int ): Matrix < Double > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Double > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int ): Matrix < Double > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"arange"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/create.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrixFactory / create create fun create(data: IntRange ): Matrix < Double > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Double > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Double > Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"Create"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/create.html#create","text":"fun create(data: IntRange ): Matrix < Double > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Double > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Double > Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"create"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/eye.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrixFactory / eye eye fun eye(size: Int ): Matrix < Double > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Double > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"Eye"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/eye.html#eye","text":"fun eye(size: Int ): Matrix < Double > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Double > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"eye"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/ones.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrixFactory / ones ones fun ones(rows: Int , cols: Int ): Matrix < Double > Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): Matrix < Double > Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/rand.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrixFactory / rand rand fun rand(rows: Int , cols: Int ): Matrix < Double > Overrides MatrixFactory.rand Creates a matrix of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/rand.html#rand","text":"fun rand(rows: Int , cols: Int ): Matrix < Double > Overrides MatrixFactory.rand Creates a matrix of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/randn.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrixFactory / randn randn fun randn(rows: Int , cols: Int ): Matrix < Double > Overrides MatrixFactory.randn Creates a matrix of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/randn.html#randn","text":"fun randn(rows: Int , cols: Int ): Matrix < Double > Overrides MatrixFactory.randn Creates a matrix of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/zeros.html","text":"api / koma.internal.default.generated.matrix / DefaultDoubleMatrixFactory / zeros zeros fun zeros(rows: Int , cols: Int ): DefaultDoubleMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"Zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-double-matrix-factory/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): DefaultDoubleMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/index.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix DefaultFloatMatrix class DefaultFloatMatrix : Matrix < Float > Constructors Name Summary <init> DefaultFloatMatrix(rows: Int , cols: Int ) Properties Name Summary cols val cols: Int rows val rows: Int storage val storage: FloatArray Inherited Properties Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int Functions Name Summary LU fun LU(): Triple < Matrix < Float >, Matrix < Float >, Matrix < Float >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < Matrix < Float >, Matrix < Float >> SVD fun SVD(): Triple < Matrix < Float >, Matrix < Float >, Matrix < Float >> T fun T(): Matrix < Float > Transpose operator. argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): Matrix < Float > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): Matrix < Float > Returns a copy of this matrix (same values, new memory) det fun det(): Float Determinant of the matrix diag fun diag(): Matrix < Float > div fun div(other: Float ): Matrix < Float > fun div(other: Int ): Matrix < Float > elementSum fun elementSum(): Float Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Float >): Matrix < Float > Element-wise multiplication with another matrix epow fun epow(other: Float ): Matrix < Float > Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Float > expm fun expm(): Matrix < Float > Compute the matrix exponential e^x (NOT elementwise) getBaseMatrix fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): Matrix < Float > getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MatrixFactory < Matrix < Float >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float getGeneric fun getGeneric(i: Int , j: Int ): Float fun getGeneric(i: Int ): Float getInt fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int getRow fun getRow(row: Int ): Matrix < Float > inv fun inv(): Matrix < Float > Matrix inverse (square matrices) max fun max(): Float Maximum value contained in the matrix mean fun mean(): Float Mean (average) of all the elements in the matrix. min fun min(): Float Minimum value contained in the matrix minus fun minus(other: Float ): Matrix < Float > fun minus(other: Matrix < Float >): Matrix < Float > normF fun normF(): Float Frobenius normal of the matrix normIndP1 fun normIndP1(): Float Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Matrix < Float > Pseudo-inverse of (non-square) matrix plus fun plus(other: Float ): Matrix < Float > fun plus(other: Matrix < Float >): Matrix < Float > setCol fun setCol(index: Int , col: Matrix < Float >): Unit setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit setFloat fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit setGeneric fun setGeneric(i: Int , v: Float ): Unit fun setGeneric(i: Int , j: Int , v: Float ): Unit setInt fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit setRow fun setRow(index: Int , row: Matrix < Float >): Unit solve fun solve(other: Matrix < Float >): Matrix < Float > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Float >): Matrix < Float > fun times(other: Float ): Matrix < Float > trace fun trace(): Float The matrix trace. transpose fun transpose(): Matrix < Float > Transpose of the matrix unaryMinus fun unaryMinus(): Matrix < Float > Inherited Functions Name Summary asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T getInt open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , value: T ): Unit setInt open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange Extension Functions Name Summary all fun Matrix < Float >.all(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Float >.allClose(other: Matrix < Float >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Float >.any(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Float >.div(other: Float ): NDArray < Float > fill fun Matrix < Float >.fill(f: (row: Int , col: Int ) -> Float ): Matrix < Float > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Float >.forEachIndexed(f: (row: Int , col: Int , ele: Float ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Float >.mapIndexed(f: (row: Int , col: Int , ele: Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > pow infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Float >.set(i: Int , v: Float ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Float >.set(i: Int , j: Int , v: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Float ): Unit operator fun Matrix < Float >.set(i: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Float >.times(other: Float ): NDArray < Float > toFloatArray fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order. toMatrix fun NDArray < Float >.toMatrix(): Matrix < Float > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Float >.unaryMinus(): NDArray < Float > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/index.html#defaultfloatmatrix","text":"class DefaultFloatMatrix : Matrix < Float >","title":"DefaultFloatMatrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/index.html#constructors","text":"Name Summary <init> DefaultFloatMatrix(rows: Int , cols: Int )","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/index.html#properties","text":"Name Summary cols val cols: Int rows val rows: Int storage val storage: FloatArray","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/index.html#inherited-properties","text":"Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int","title":"Inherited Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/index.html#functions","text":"Name Summary LU fun LU(): Triple < Matrix < Float >, Matrix < Float >, Matrix < Float >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < Matrix < Float >, Matrix < Float >> SVD fun SVD(): Triple < Matrix < Float >, Matrix < Float >, Matrix < Float >> T fun T(): Matrix < Float > Transpose operator. argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): Matrix < Float > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): Matrix < Float > Returns a copy of this matrix (same values, new memory) det fun det(): Float Determinant of the matrix diag fun diag(): Matrix < Float > div fun div(other: Float ): Matrix < Float > fun div(other: Int ): Matrix < Float > elementSum fun elementSum(): Float Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Float >): Matrix < Float > Element-wise multiplication with another matrix epow fun epow(other: Float ): Matrix < Float > Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Float > expm fun expm(): Matrix < Float > Compute the matrix exponential e^x (NOT elementwise) getBaseMatrix fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): Matrix < Float > getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MatrixFactory < Matrix < Float >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float getGeneric fun getGeneric(i: Int , j: Int ): Float fun getGeneric(i: Int ): Float getInt fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int getRow fun getRow(row: Int ): Matrix < Float > inv fun inv(): Matrix < Float > Matrix inverse (square matrices) max fun max(): Float Maximum value contained in the matrix mean fun mean(): Float Mean (average) of all the elements in the matrix. min fun min(): Float Minimum value contained in the matrix minus fun minus(other: Float ): Matrix < Float > fun minus(other: Matrix < Float >): Matrix < Float > normF fun normF(): Float Frobenius normal of the matrix normIndP1 fun normIndP1(): Float Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Matrix < Float > Pseudo-inverse of (non-square) matrix plus fun plus(other: Float ): Matrix < Float > fun plus(other: Matrix < Float >): Matrix < Float > setCol fun setCol(index: Int , col: Matrix < Float >): Unit setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit setFloat fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit setGeneric fun setGeneric(i: Int , v: Float ): Unit fun setGeneric(i: Int , j: Int , v: Float ): Unit setInt fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit setRow fun setRow(index: Int , row: Matrix < Float >): Unit solve fun solve(other: Matrix < Float >): Matrix < Float > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Float >): Matrix < Float > fun times(other: Float ): Matrix < Float > trace fun trace(): Float The matrix trace. transpose fun transpose(): Matrix < Float > Transpose of the matrix unaryMinus fun unaryMinus(): Matrix < Float >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/index.html#inherited-functions","text":"Name Summary asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T getInt open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , value: T ): Unit setInt open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/index.html#extension-functions","text":"Name Summary all fun Matrix < Float >.all(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Float >.allClose(other: Matrix < Float >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Float >.any(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Float >.div(other: Float ): NDArray < Float > fill fun Matrix < Float >.fill(f: (row: Int , col: Int ) -> Float ): Matrix < Float > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Float >.forEachIndexed(f: (row: Int , col: Int , ele: Float ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Float >.mapIndexed(f: (row: Int , col: Int , ele: Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > pow infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Float >.set(i: Int , v: Float ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Float >.set(i: Int , j: Int , v: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Float ): Unit operator fun Matrix < Float >.set(i: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Float >.times(other: Float ): NDArray < Float > toFloatArray fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order. toMatrix fun NDArray < Float >.toMatrix(): Matrix < Float > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Float >.unaryMinus(): NDArray < Float > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-init-.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / <init> <init> DefaultFloatMatrix(rows: Int , cols: Int )","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-init-.html#init","text":"DefaultFloatMatrix(rows: Int , cols: Int )","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-l-u.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / LU LU fun LU(): Triple < Matrix < Float >, Matrix < Float >, Matrix < Float >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":" l u"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-l-u.html#lu","text":"fun LU(): Triple < Matrix < Float >, Matrix < Float >, Matrix < Float >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":"LU"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-q-r.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / QR QR fun QR(): Pair < Matrix < Float >, Matrix < Float >> Overrides Matrix.QR","title":" q r"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-q-r.html#qr","text":"fun QR(): Pair < Matrix < Float >, Matrix < Float >> Overrides Matrix.QR","title":"QR"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-s-v-d.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / SVD SVD fun SVD(): Triple < Matrix < Float >, Matrix < Float >, Matrix < Float >> Overrides Matrix.SVD","title":" s v d"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-s-v-d.html#svd","text":"fun SVD(): Triple < Matrix < Float >, Matrix < Float >, Matrix < Float >> Overrides Matrix.SVD","title":"SVD"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-t.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / T T fun T(): Matrix < Float > Overrides Matrix.T Transpose operator.","title":" t"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/-t.html#t","text":"fun T(): Matrix < Float > Overrides Matrix.T Transpose operator.","title":"T"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/arg-max.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / argMax argMax fun argMax(): Int Overrides Matrix.argMax Row major 1D index.","title":"Arg max"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/arg-max.html#argmax","text":"fun argMax(): Int Overrides Matrix.argMax Row major 1D index.","title":"argMax"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/arg-min.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / argMin argMin fun argMin(): Int Overrides Matrix.argMin Row major 1D index.","title":"Arg min"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/arg-min.html#argmin","text":"fun argMin(): Int Overrides Matrix.argMin Row major 1D index.","title":"argMin"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/chol.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / chol chol fun chol(): Matrix < Float > Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"Chol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/chol.html#chol","text":"fun chol(): Matrix < Float > Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"chol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/cols.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / cols cols val cols: Int","title":"Cols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/cols.html#cols","text":"val cols: Int","title":"cols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/copy.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / copy copy fun copy(): Matrix < Float > Overrides Matrix.copy Returns a copy of this matrix (same values, new memory)","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/copy.html#copy","text":"fun copy(): Matrix < Float > Overrides Matrix.copy Returns a copy of this matrix (same values, new memory)","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/det.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / det det fun det(): Float Overrides Matrix.det Determinant of the matrix","title":"Det"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/det.html#det","text":"fun det(): Float Overrides Matrix.det Determinant of the matrix","title":"det"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/diag.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / diag diag fun diag(): Matrix < Float > Overrides Matrix.diag","title":"Diag"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/diag.html#diag","text":"fun diag(): Matrix < Float > Overrides Matrix.diag","title":"diag"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/div.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / div div fun div(other: Float ): Matrix < Float > Overrides Matrix.div fun div(other: Int ): Matrix < Float > Overrides Matrix.div","title":"Div"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/div.html#div","text":"fun div(other: Float ): Matrix < Float > Overrides Matrix.div fun div(other: Int ): Matrix < Float > Overrides Matrix.div","title":"div"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/element-sum.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / elementSum elementSum fun elementSum(): Float Overrides Matrix.elementSum Sum of all the elements in the matrix.","title":"Element sum"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/element-sum.html#elementsum","text":"fun elementSum(): Float Overrides Matrix.elementSum Sum of all the elements in the matrix.","title":"elementSum"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/element-times.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / elementTimes elementTimes fun elementTimes(other: Matrix < Float >): Matrix < Float > Overrides Matrix.elementTimes Element-wise multiplication with another matrix","title":"Element times"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/element-times.html#elementtimes","text":"fun elementTimes(other: Matrix < Float >): Matrix < Float > Overrides Matrix.elementTimes Element-wise multiplication with another matrix","title":"elementTimes"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/epow.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / epow epow fun epow(other: Float ): Matrix < Float > Overrides Matrix.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Float > Overrides Matrix.epow","title":"Epow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/epow.html#epow","text":"fun epow(other: Float ): Matrix < Float > Overrides Matrix.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Float > Overrides Matrix.epow","title":"epow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/expm.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / expm expm fun expm(): Matrix < Float > Overrides Matrix.expm Compute the matrix exponential e^x (NOT elementwise)","title":"Expm"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/expm.html#expm","text":"fun expm(): Matrix < Float > Overrides Matrix.expm Compute the matrix exponential e^x (NOT elementwise)","title":"expm"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-base-matrix.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / getBaseMatrix getBaseMatrix fun getBaseMatrix(): Any Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"Get base matrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-base-matrix.html#getbasematrix","text":"fun getBaseMatrix(): Any Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"getBaseMatrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-col.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / getCol getCol fun getCol(col: Int ): Matrix < Float > Overrides Matrix.getCol","title":"Get col"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-col.html#getcol","text":"fun getCol(col: Int ): Matrix < Float > Overrides Matrix.getCol","title":"getCol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-double-data.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / getDoubleData getDoubleData fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"Get double data"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-double-data.html#getdoubledata","text":"fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"getDoubleData"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-double.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / getDouble getDouble fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-double.html#getdouble","text":"fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-factory.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / getFactory getFactory fun getFactory(): MatrixFactory < Matrix < Float >> Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"Get factory"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-factory.html#getfactory","text":"fun getFactory(): MatrixFactory < Matrix < Float >> Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"getFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-float.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / getFloat getFloat fun getFloat(i: Int , j: Int ): Float Overrides Matrix.getFloat fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-float.html#getfloat","text":"fun getFloat(i: Int , j: Int ): Float Overrides Matrix.getFloat fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-generic.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / getGeneric getGeneric fun getGeneric(i: Int , j: Int ): Float Overrides Matrix.getGeneric fun getGeneric(i: Int ): Float Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-generic.html#getgeneric","text":"fun getGeneric(i: Int , j: Int ): Float Overrides Matrix.getGeneric fun getGeneric(i: Int ): Float Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-int.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / getInt getInt fun getInt(i: Int , j: Int ): Int Overrides Matrix.getInt fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-int.html#getint","text":"fun getInt(i: Int , j: Int ): Int Overrides Matrix.getInt fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-row.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / getRow getRow fun getRow(row: Int ): Matrix < Float > Overrides Matrix.getRow","title":"Get row"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/get-row.html#getrow","text":"fun getRow(row: Int ): Matrix < Float > Overrides Matrix.getRow","title":"getRow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/inv.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / inv inv fun inv(): Matrix < Float > Overrides Matrix.inv Matrix inverse (square matrices)","title":"Inv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/inv.html#inv","text":"fun inv(): Matrix < Float > Overrides Matrix.inv Matrix inverse (square matrices)","title":"inv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/max.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / max max fun max(): Float Overrides Matrix.max Maximum value contained in the matrix","title":"Max"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/max.html#max","text":"fun max(): Float Overrides Matrix.max Maximum value contained in the matrix","title":"max"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/mean.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / mean mean fun mean(): Float Overrides Matrix.mean Mean (average) of all the elements in the matrix.","title":"Mean"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/mean.html#mean","text":"fun mean(): Float Overrides Matrix.mean Mean (average) of all the elements in the matrix.","title":"mean"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/min.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / min min fun min(): Float Overrides Matrix.min Minimum value contained in the matrix","title":"Min"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/min.html#min","text":"fun min(): Float Overrides Matrix.min Minimum value contained in the matrix","title":"min"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/minus.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / minus minus fun minus(other: Float ): Matrix < Float > Overrides Matrix.minus fun minus(other: Matrix < Float >): Matrix < Float > Overrides Matrix.minus","title":"Minus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/minus.html#minus","text":"fun minus(other: Float ): Matrix < Float > Overrides Matrix.minus fun minus(other: Matrix < Float >): Matrix < Float > Overrides Matrix.minus","title":"minus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/norm-f.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / normF normF fun normF(): Float Overrides Matrix.normF Frobenius normal of the matrix","title":"Norm f"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/norm-f.html#normf","text":"fun normF(): Float Overrides Matrix.normF Frobenius normal of the matrix","title":"normF"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/norm-ind-p1.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / normIndP1 normIndP1 fun normIndP1(): Float Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"Norm ind p1"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/norm-ind-p1.html#normindp1","text":"fun normIndP1(): Float Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"normIndP1"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/num-cols.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / numCols numCols fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"Num cols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/num-cols.html#numcols","text":"fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"numCols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/num-rows.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / numRows numRows fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"Num rows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/num-rows.html#numrows","text":"fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"numRows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/pinv.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / pinv pinv fun pinv(): Matrix < Float > Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"Pinv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/pinv.html#pinv","text":"fun pinv(): Matrix < Float > Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"pinv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/plus.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / plus plus fun plus(other: Float ): Matrix < Float > Overrides Matrix.plus fun plus(other: Matrix < Float >): Matrix < Float > Overrides Matrix.plus","title":"Plus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/plus.html#plus","text":"fun plus(other: Float ): Matrix < Float > Overrides Matrix.plus fun plus(other: Matrix < Float >): Matrix < Float > Overrides Matrix.plus","title":"plus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/rows.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / rows rows val rows: Int","title":"Rows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/rows.html#rows","text":"val rows: Int","title":"rows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-col.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / setCol setCol fun setCol(index: Int , col: Matrix < Float >): Unit Overrides Matrix.setCol","title":"Set col"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-col.html#setcol","text":"fun setCol(index: Int , col: Matrix < Float >): Unit Overrides Matrix.setCol","title":"setCol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-double.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / setDouble setDouble fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-double.html#setdouble","text":"fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-float.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / setFloat setFloat fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat fun setFloat(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-float.html#setfloat","text":"fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat fun setFloat(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-generic.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / setGeneric setGeneric fun setGeneric(i: Int , v: Float ): Unit Overrides NDArray.setGeneric fun setGeneric(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-generic.html#setgeneric","text":"fun setGeneric(i: Int , v: Float ): Unit Overrides NDArray.setGeneric fun setGeneric(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-int.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / setInt setInt fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt fun setInt(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-int.html#setint","text":"fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt fun setInt(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-row.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / setRow setRow fun setRow(index: Int , row: Matrix < Float >): Unit Overrides Matrix.setRow","title":"Set row"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/set-row.html#setrow","text":"fun setRow(index: Int , row: Matrix < Float >): Unit Overrides Matrix.setRow","title":"setRow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/solve.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / solve solve fun solve(other: Matrix < Float >): Matrix < Float > Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"Solve"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/solve.html#solve","text":"fun solve(other: Matrix < Float >): Matrix < Float > Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"solve"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/storage.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / storage storage val storage: FloatArray","title":"Storage"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/storage.html#storage","text":"val storage: FloatArray","title":"storage"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/times.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / times times fun times(other: Matrix < Float >): Matrix < Float > Overrides Matrix.times fun times(other: Float ): Matrix < Float > Overrides Matrix.times","title":"Times"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/times.html#times","text":"fun times(other: Matrix < Float >): Matrix < Float > Overrides Matrix.times fun times(other: Float ): Matrix < Float > Overrides Matrix.times","title":"times"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/trace.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / trace trace fun trace(): Float Overrides Matrix.trace The matrix trace.","title":"Trace"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/trace.html#trace","text":"fun trace(): Float Overrides Matrix.trace The matrix trace.","title":"trace"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/transpose.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / transpose transpose fun transpose(): Matrix < Float > Overrides Matrix.transpose Transpose of the matrix","title":"Transpose"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/transpose.html#transpose","text":"fun transpose(): Matrix < Float > Overrides Matrix.transpose Transpose of the matrix","title":"transpose"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/unary-minus.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrix / unaryMinus unaryMinus fun unaryMinus(): Matrix < Float > Overrides Matrix.unaryMinus","title":"Unary minus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix/unary-minus.html#unaryminus","text":"fun unaryMinus(): Matrix < Float > Overrides Matrix.unaryMinus","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/index.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrixFactory DefaultFloatMatrixFactory class DefaultFloatMatrixFactory : MatrixFactory < Matrix < Float >> Constructors Name Summary <init> DefaultFloatMatrixFactory() Functions Name Summary arange fun arange(start: Double , stop: Double , increment: Double ): Matrix < Float > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Float > Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Float > fun arange(start: Int , stop: Int ): Matrix < Float > Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. create fun create(data: IntRange ): Matrix < Float > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Float > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Float > Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): Matrix < Float > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Float > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): Matrix < Float > Creates a one initialized matrix of the requested shape rand fun rand(rows: Int , cols: Int ): Matrix < Float > Creates a matrix of uniform 0-1 random samples randn fun randn(rows: Int , cols: Int ): Matrix < Float > Creates a matrix of unit-normal random samples zeros fun zeros(rows: Int , cols: Int ): DefaultFloatMatrix Generate a zero initialized matrix of the requested shape.","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/index.html#defaultfloatmatrixfactory","text":"class DefaultFloatMatrixFactory : MatrixFactory < Matrix < Float >>","title":"DefaultFloatMatrixFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/index.html#constructors","text":"Name Summary <init> DefaultFloatMatrixFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/index.html#functions","text":"Name Summary arange fun arange(start: Double , stop: Double , increment: Double ): Matrix < Float > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Float > Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Float > fun arange(start: Int , stop: Int ): Matrix < Float > Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. create fun create(data: IntRange ): Matrix < Float > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Float > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Float > Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): Matrix < Float > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Float > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): Matrix < Float > Creates a one initialized matrix of the requested shape rand fun rand(rows: Int , cols: Int ): Matrix < Float > Creates a matrix of uniform 0-1 random samples randn fun randn(rows: Int , cols: Int ): Matrix < Float > Creates a matrix of unit-normal random samples zeros fun zeros(rows: Int , cols: Int ): DefaultFloatMatrix Generate a zero initialized matrix of the requested shape.","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/-init-.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrixFactory / <init> <init> DefaultFloatMatrixFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/-init-.html#init","text":"DefaultFloatMatrixFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/arange.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrixFactory / arange arange fun arange(start: Double , stop: Double , increment: Double ): Matrix < Float > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int , increment: Int ): Matrix < Float > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Float > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int ): Matrix < Float > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"Arange"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/arange.html#arange","text":"fun arange(start: Double , stop: Double , increment: Double ): Matrix < Float > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int , increment: Int ): Matrix < Float > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Float > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int ): Matrix < Float > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"arange"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/create.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrixFactory / create create fun create(data: IntRange ): Matrix < Float > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Float > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Float > Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"Create"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/create.html#create","text":"fun create(data: IntRange ): Matrix < Float > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Float > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Float > Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"create"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/eye.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrixFactory / eye eye fun eye(size: Int ): Matrix < Float > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Float > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"Eye"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/eye.html#eye","text":"fun eye(size: Int ): Matrix < Float > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Float > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"eye"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/ones.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrixFactory / ones ones fun ones(rows: Int , cols: Int ): Matrix < Float > Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): Matrix < Float > Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/rand.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrixFactory / rand rand fun rand(rows: Int , cols: Int ): Matrix < Float > Overrides MatrixFactory.rand Creates a matrix of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/rand.html#rand","text":"fun rand(rows: Int , cols: Int ): Matrix < Float > Overrides MatrixFactory.rand Creates a matrix of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/randn.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrixFactory / randn randn fun randn(rows: Int , cols: Int ): Matrix < Float > Overrides MatrixFactory.randn Creates a matrix of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/randn.html#randn","text":"fun randn(rows: Int , cols: Int ): Matrix < Float > Overrides MatrixFactory.randn Creates a matrix of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/zeros.html","text":"api / koma.internal.default.generated.matrix / DefaultFloatMatrixFactory / zeros zeros fun zeros(rows: Int , cols: Int ): DefaultFloatMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"Zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-float-matrix-factory/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): DefaultFloatMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/index.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix DefaultIntMatrix class DefaultIntMatrix : Matrix < Int > Constructors Name Summary <init> DefaultIntMatrix(rows: Int , cols: Int ) Properties Name Summary cols val cols: Int rows val rows: Int storage val storage: IntArray Inherited Properties Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int Functions Name Summary LU fun LU(): Triple < Matrix < Int >, Matrix < Int >, Matrix < Int >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < Matrix < Int >, Matrix < Int >> SVD fun SVD(): Triple < Matrix < Int >, Matrix < Int >, Matrix < Int >> T fun T(): Matrix < Int > Transpose operator. argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): Matrix < Int > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): Matrix < Int > Returns a copy of this matrix (same values, new memory) det fun det(): Int Determinant of the matrix diag fun diag(): Matrix < Int > div fun div(other: Int ): Matrix < Int > elementSum fun elementSum(): Int Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Int >): Matrix < Int > Element-wise multiplication with another matrix epow fun epow(other: Int ): Matrix < Int > Element-wise exponentiation of each element in the matrix expm fun expm(): Matrix < Int > Compute the matrix exponential e^x (NOT elementwise) getBaseMatrix fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): Matrix < Int > getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MatrixFactory < Matrix < Int >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float getGeneric fun getGeneric(i: Int , j: Int ): Int fun getGeneric(i: Int ): Int getInt fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int getRow fun getRow(row: Int ): Matrix < Int > inv fun inv(): Matrix < Int > Matrix inverse (square matrices) max fun max(): Int Maximum value contained in the matrix mean fun mean(): Int Mean (average) of all the elements in the matrix. min fun min(): Int Minimum value contained in the matrix minus fun minus(other: Int ): Matrix < Int > fun minus(other: Matrix < Int >): Matrix < Int > normF fun normF(): Int Frobenius normal of the matrix normIndP1 fun normIndP1(): Int Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Matrix < Int > Pseudo-inverse of (non-square) matrix plus fun plus(other: Int ): Matrix < Int > fun plus(other: Matrix < Int >): Matrix < Int > setCol fun setCol(index: Int , col: Matrix < Int >): Unit setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit setFloat fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit setGeneric fun setGeneric(i: Int , v: Int ): Unit fun setGeneric(i: Int , j: Int , v: Int ): Unit setInt fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit setRow fun setRow(index: Int , row: Matrix < Int >): Unit solve fun solve(other: Matrix < Int >): Matrix < Int > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Int >): Matrix < Int > fun times(other: Int ): Matrix < Int > trace fun trace(): Int The matrix trace. transpose fun transpose(): Matrix < Int > Transpose of the matrix unaryMinus fun unaryMinus(): Matrix < Int > Inherited Functions Name Summary asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T getInt open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , value: T ): Unit setInt open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange Extension Functions Name Summary all fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.all(f: ( Int ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. any fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.any(f: ( Int ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Int >.div(other: Int ): NDArray < Int > fill fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > fun Matrix < Int >.fill(f: (row: Int , col: Int ) -> Int ): Matrix < Int > Fills the matrix with the values returned by the input function. fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit fun Matrix < Int >.forEachIndexed(f: (row: Int , col: Int , ele: Int ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > fun Matrix < Int >.mapIndexed(f: (row: Int , col: Int , ele: Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > pow infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit operator fun Matrix < Int >.set(i: Int , v: Int ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun Matrix < Int >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Int ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Int >.times(other: Int ): NDArray < Int > toIntArray fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order. toMatrix fun NDArray < Int >.toMatrix(): Matrix < Int > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Int >.unaryMinus(): NDArray < Int > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/index.html#defaultintmatrix","text":"class DefaultIntMatrix : Matrix < Int >","title":"DefaultIntMatrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/index.html#constructors","text":"Name Summary <init> DefaultIntMatrix(rows: Int , cols: Int )","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/index.html#properties","text":"Name Summary cols val cols: Int rows val rows: Int storage val storage: IntArray","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/index.html#inherited-properties","text":"Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int","title":"Inherited Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/index.html#functions","text":"Name Summary LU fun LU(): Triple < Matrix < Int >, Matrix < Int >, Matrix < Int >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < Matrix < Int >, Matrix < Int >> SVD fun SVD(): Triple < Matrix < Int >, Matrix < Int >, Matrix < Int >> T fun T(): Matrix < Int > Transpose operator. argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): Matrix < Int > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): Matrix < Int > Returns a copy of this matrix (same values, new memory) det fun det(): Int Determinant of the matrix diag fun diag(): Matrix < Int > div fun div(other: Int ): Matrix < Int > elementSum fun elementSum(): Int Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Int >): Matrix < Int > Element-wise multiplication with another matrix epow fun epow(other: Int ): Matrix < Int > Element-wise exponentiation of each element in the matrix expm fun expm(): Matrix < Int > Compute the matrix exponential e^x (NOT elementwise) getBaseMatrix fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): Matrix < Int > getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MatrixFactory < Matrix < Int >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat fun getFloat(i: Int , j: Int ): Float fun getFloat(i: Int ): Float getGeneric fun getGeneric(i: Int , j: Int ): Int fun getGeneric(i: Int ): Int getInt fun getInt(i: Int , j: Int ): Int fun getInt(i: Int ): Int getRow fun getRow(row: Int ): Matrix < Int > inv fun inv(): Matrix < Int > Matrix inverse (square matrices) max fun max(): Int Maximum value contained in the matrix mean fun mean(): Int Mean (average) of all the elements in the matrix. min fun min(): Int Minimum value contained in the matrix minus fun minus(other: Int ): Matrix < Int > fun minus(other: Matrix < Int >): Matrix < Int > normF fun normF(): Int Frobenius normal of the matrix normIndP1 fun normIndP1(): Int Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Matrix < Int > Pseudo-inverse of (non-square) matrix plus fun plus(other: Int ): Matrix < Int > fun plus(other: Matrix < Int >): Matrix < Int > setCol fun setCol(index: Int , col: Matrix < Int >): Unit setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit setFloat fun setFloat(i: Int , v: Float ): Unit fun setFloat(i: Int , j: Int , v: Float ): Unit setGeneric fun setGeneric(i: Int , v: Int ): Unit fun setGeneric(i: Int , j: Int , v: Int ): Unit setInt fun setInt(i: Int , v: Int ): Unit fun setInt(i: Int , j: Int , v: Int ): Unit setRow fun setRow(index: Int , row: Matrix < Int >): Unit solve fun solve(other: Matrix < Int >): Matrix < Int > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Int >): Matrix < Int > fun times(other: Int ): Matrix < Int > trace fun trace(): Int The matrix trace. transpose fun transpose(): Matrix < Int > Transpose of the matrix unaryMinus fun unaryMinus(): Matrix < Int >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/index.html#inherited-functions","text":"Name Summary asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T getInt open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , value: T ): Unit setInt open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/index.html#extension-functions","text":"Name Summary all fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.all(f: ( Int ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. any fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.any(f: ( Int ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Int >.div(other: Int ): NDArray < Int > fill fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > fun Matrix < Int >.fill(f: (row: Int , col: Int ) -> Int ): Matrix < Int > Fills the matrix with the values returned by the input function. fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit fun Matrix < Int >.forEachIndexed(f: (row: Int , col: Int , ele: Int ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > fun Matrix < Int >.mapIndexed(f: (row: Int , col: Int , ele: Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > pow infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit operator fun Matrix < Int >.set(i: Int , v: Int ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun Matrix < Int >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Int ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Int >.times(other: Int ): NDArray < Int > toIntArray fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order. toMatrix fun NDArray < Int >.toMatrix(): Matrix < Int > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Int >.unaryMinus(): NDArray < Int > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-init-.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / <init> <init> DefaultIntMatrix(rows: Int , cols: Int )","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-init-.html#init","text":"DefaultIntMatrix(rows: Int , cols: Int )","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-l-u.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / LU LU fun LU(): Triple < Matrix < Int >, Matrix < Int >, Matrix < Int >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":" l u"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-l-u.html#lu","text":"fun LU(): Triple < Matrix < Int >, Matrix < Int >, Matrix < Int >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":"LU"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-q-r.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / QR QR fun QR(): Pair < Matrix < Int >, Matrix < Int >> Overrides Matrix.QR","title":" q r"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-q-r.html#qr","text":"fun QR(): Pair < Matrix < Int >, Matrix < Int >> Overrides Matrix.QR","title":"QR"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-s-v-d.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / SVD SVD fun SVD(): Triple < Matrix < Int >, Matrix < Int >, Matrix < Int >> Overrides Matrix.SVD","title":" s v d"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-s-v-d.html#svd","text":"fun SVD(): Triple < Matrix < Int >, Matrix < Int >, Matrix < Int >> Overrides Matrix.SVD","title":"SVD"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-t.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / T T fun T(): Matrix < Int > Overrides Matrix.T Transpose operator.","title":" t"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/-t.html#t","text":"fun T(): Matrix < Int > Overrides Matrix.T Transpose operator.","title":"T"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/arg-max.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / argMax argMax fun argMax(): Int Overrides Matrix.argMax Row major 1D index.","title":"Arg max"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/arg-max.html#argmax","text":"fun argMax(): Int Overrides Matrix.argMax Row major 1D index.","title":"argMax"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/arg-min.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / argMin argMin fun argMin(): Int Overrides Matrix.argMin Row major 1D index.","title":"Arg min"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/arg-min.html#argmin","text":"fun argMin(): Int Overrides Matrix.argMin Row major 1D index.","title":"argMin"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/chol.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / chol chol fun chol(): Matrix < Int > Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"Chol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/chol.html#chol","text":"fun chol(): Matrix < Int > Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"chol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/cols.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / cols cols val cols: Int","title":"Cols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/cols.html#cols","text":"val cols: Int","title":"cols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/copy.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / copy copy fun copy(): Matrix < Int > Overrides Matrix.copy Returns a copy of this matrix (same values, new memory)","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/copy.html#copy","text":"fun copy(): Matrix < Int > Overrides Matrix.copy Returns a copy of this matrix (same values, new memory)","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/det.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / det det fun det(): Int Overrides Matrix.det Determinant of the matrix","title":"Det"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/det.html#det","text":"fun det(): Int Overrides Matrix.det Determinant of the matrix","title":"det"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/diag.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / diag diag fun diag(): Matrix < Int > Overrides Matrix.diag","title":"Diag"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/diag.html#diag","text":"fun diag(): Matrix < Int > Overrides Matrix.diag","title":"diag"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/div.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / div div fun div(other: Int ): Matrix < Int > Overrides Matrix.div Overrides Matrix.div","title":"Div"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/div.html#div","text":"fun div(other: Int ): Matrix < Int > Overrides Matrix.div Overrides Matrix.div","title":"div"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/element-sum.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / elementSum elementSum fun elementSum(): Int Overrides Matrix.elementSum Sum of all the elements in the matrix.","title":"Element sum"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/element-sum.html#elementsum","text":"fun elementSum(): Int Overrides Matrix.elementSum Sum of all the elements in the matrix.","title":"elementSum"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/element-times.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / elementTimes elementTimes fun elementTimes(other: Matrix < Int >): Matrix < Int > Overrides Matrix.elementTimes Element-wise multiplication with another matrix","title":"Element times"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/element-times.html#elementtimes","text":"fun elementTimes(other: Matrix < Int >): Matrix < Int > Overrides Matrix.elementTimes Element-wise multiplication with another matrix","title":"elementTimes"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/epow.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / epow epow fun epow(other: Int ): Matrix < Int > Overrides Matrix.epow Overrides Matrix.epow Element-wise exponentiation of each element in the matrix","title":"Epow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/epow.html#epow","text":"fun epow(other: Int ): Matrix < Int > Overrides Matrix.epow Overrides Matrix.epow Element-wise exponentiation of each element in the matrix","title":"epow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/expm.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / expm expm fun expm(): Matrix < Int > Overrides Matrix.expm Compute the matrix exponential e^x (NOT elementwise)","title":"Expm"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/expm.html#expm","text":"fun expm(): Matrix < Int > Overrides Matrix.expm Compute the matrix exponential e^x (NOT elementwise)","title":"expm"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-base-matrix.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / getBaseMatrix getBaseMatrix fun getBaseMatrix(): Any Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"Get base matrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-base-matrix.html#getbasematrix","text":"fun getBaseMatrix(): Any Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"getBaseMatrix"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-col.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / getCol getCol fun getCol(col: Int ): Matrix < Int > Overrides Matrix.getCol","title":"Get col"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-col.html#getcol","text":"fun getCol(col: Int ): Matrix < Int > Overrides Matrix.getCol","title":"getCol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-double-data.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / getDoubleData getDoubleData fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"Get double data"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-double-data.html#getdoubledata","text":"fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"getDoubleData"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-double.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / getDouble getDouble fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-double.html#getdouble","text":"fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-factory.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / getFactory getFactory fun getFactory(): MatrixFactory < Matrix < Int >> Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"Get factory"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-factory.html#getfactory","text":"fun getFactory(): MatrixFactory < Matrix < Int >> Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"getFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-float.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / getFloat getFloat fun getFloat(i: Int , j: Int ): Float Overrides Matrix.getFloat fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-float.html#getfloat","text":"fun getFloat(i: Int , j: Int ): Float Overrides Matrix.getFloat fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-generic.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / getGeneric getGeneric fun getGeneric(i: Int , j: Int ): Int Overrides Matrix.getGeneric fun getGeneric(i: Int ): Int Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-generic.html#getgeneric","text":"fun getGeneric(i: Int , j: Int ): Int Overrides Matrix.getGeneric fun getGeneric(i: Int ): Int Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-int.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / getInt getInt fun getInt(i: Int , j: Int ): Int Overrides Matrix.getInt fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-int.html#getint","text":"fun getInt(i: Int , j: Int ): Int Overrides Matrix.getInt fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-row.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / getRow getRow fun getRow(row: Int ): Matrix < Int > Overrides Matrix.getRow","title":"Get row"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/get-row.html#getrow","text":"fun getRow(row: Int ): Matrix < Int > Overrides Matrix.getRow","title":"getRow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/inv.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / inv inv fun inv(): Matrix < Int > Overrides Matrix.inv Matrix inverse (square matrices)","title":"Inv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/inv.html#inv","text":"fun inv(): Matrix < Int > Overrides Matrix.inv Matrix inverse (square matrices)","title":"inv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/max.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / max max fun max(): Int Overrides Matrix.max Maximum value contained in the matrix","title":"Max"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/max.html#max","text":"fun max(): Int Overrides Matrix.max Maximum value contained in the matrix","title":"max"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/mean.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / mean mean fun mean(): Int Overrides Matrix.mean Mean (average) of all the elements in the matrix.","title":"Mean"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/mean.html#mean","text":"fun mean(): Int Overrides Matrix.mean Mean (average) of all the elements in the matrix.","title":"mean"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/min.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / min min fun min(): Int Overrides Matrix.min Minimum value contained in the matrix","title":"Min"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/min.html#min","text":"fun min(): Int Overrides Matrix.min Minimum value contained in the matrix","title":"min"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/minus.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / minus minus fun minus(other: Int ): Matrix < Int > Overrides Matrix.minus fun minus(other: Matrix < Int >): Matrix < Int > Overrides Matrix.minus","title":"Minus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/minus.html#minus","text":"fun minus(other: Int ): Matrix < Int > Overrides Matrix.minus fun minus(other: Matrix < Int >): Matrix < Int > Overrides Matrix.minus","title":"minus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/norm-f.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / normF normF fun normF(): Int Overrides Matrix.normF Frobenius normal of the matrix","title":"Norm f"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/norm-f.html#normf","text":"fun normF(): Int Overrides Matrix.normF Frobenius normal of the matrix","title":"normF"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/norm-ind-p1.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / normIndP1 normIndP1 fun normIndP1(): Int Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"Norm ind p1"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/norm-ind-p1.html#normindp1","text":"fun normIndP1(): Int Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"normIndP1"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/num-cols.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / numCols numCols fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"Num cols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/num-cols.html#numcols","text":"fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"numCols"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/num-rows.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / numRows numRows fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"Num rows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/num-rows.html#numrows","text":"fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"numRows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/pinv.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / pinv pinv fun pinv(): Matrix < Int > Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"Pinv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/pinv.html#pinv","text":"fun pinv(): Matrix < Int > Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"pinv"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/plus.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / plus plus fun plus(other: Int ): Matrix < Int > Overrides Matrix.plus fun plus(other: Matrix < Int >): Matrix < Int > Overrides Matrix.plus","title":"Plus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/plus.html#plus","text":"fun plus(other: Int ): Matrix < Int > Overrides Matrix.plus fun plus(other: Matrix < Int >): Matrix < Int > Overrides Matrix.plus","title":"plus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/rows.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / rows rows val rows: Int","title":"Rows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/rows.html#rows","text":"val rows: Int","title":"rows"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-col.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / setCol setCol fun setCol(index: Int , col: Matrix < Int >): Unit Overrides Matrix.setCol","title":"Set col"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-col.html#setcol","text":"fun setCol(index: Int , col: Matrix < Int >): Unit Overrides Matrix.setCol","title":"setCol"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-double.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / setDouble setDouble fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-double.html#setdouble","text":"fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-float.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / setFloat setFloat fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat fun setFloat(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-float.html#setfloat","text":"fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat fun setFloat(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-generic.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / setGeneric setGeneric fun setGeneric(i: Int , v: Int ): Unit Overrides NDArray.setGeneric fun setGeneric(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-generic.html#setgeneric","text":"fun setGeneric(i: Int , v: Int ): Unit Overrides NDArray.setGeneric fun setGeneric(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-int.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / setInt setInt fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt fun setInt(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-int.html#setint","text":"fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt fun setInt(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-row.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / setRow setRow fun setRow(index: Int , row: Matrix < Int >): Unit Overrides Matrix.setRow","title":"Set row"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/set-row.html#setrow","text":"fun setRow(index: Int , row: Matrix < Int >): Unit Overrides Matrix.setRow","title":"setRow"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/solve.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / solve solve fun solve(other: Matrix < Int >): Matrix < Int > Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"Solve"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/solve.html#solve","text":"fun solve(other: Matrix < Int >): Matrix < Int > Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"solve"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/storage.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / storage storage val storage: IntArray","title":"Storage"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/storage.html#storage","text":"val storage: IntArray","title":"storage"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/times.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / times times fun times(other: Matrix < Int >): Matrix < Int > Overrides Matrix.times fun times(other: Int ): Matrix < Int > Overrides Matrix.times","title":"Times"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/times.html#times","text":"fun times(other: Matrix < Int >): Matrix < Int > Overrides Matrix.times fun times(other: Int ): Matrix < Int > Overrides Matrix.times","title":"times"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/trace.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / trace trace fun trace(): Int Overrides Matrix.trace The matrix trace.","title":"Trace"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/trace.html#trace","text":"fun trace(): Int Overrides Matrix.trace The matrix trace.","title":"trace"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/transpose.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / transpose transpose fun transpose(): Matrix < Int > Overrides Matrix.transpose Transpose of the matrix","title":"Transpose"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/transpose.html#transpose","text":"fun transpose(): Matrix < Int > Overrides Matrix.transpose Transpose of the matrix","title":"transpose"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/unary-minus.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrix / unaryMinus unaryMinus fun unaryMinus(): Matrix < Int > Overrides Matrix.unaryMinus","title":"Unary minus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix/unary-minus.html#unaryminus","text":"fun unaryMinus(): Matrix < Int > Overrides Matrix.unaryMinus","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/index.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrixFactory DefaultIntMatrixFactory class DefaultIntMatrixFactory : MatrixFactory < Matrix < Int >> Constructors Name Summary <init> DefaultIntMatrixFactory() Functions Name Summary arange fun arange(start: Double , stop: Double , increment: Double ): Matrix < Int > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Int > Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Int > fun arange(start: Int , stop: Int ): Matrix < Int > Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. create fun create(data: IntRange ): Matrix < Int > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Int > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Int > Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): Matrix < Int > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Int > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): Matrix < Int > Creates a one initialized matrix of the requested shape rand fun rand(rows: Int , cols: Int ): Matrix < Int > Creates a matrix of uniform 0-1 random samples randn fun randn(rows: Int , cols: Int ): Matrix < Int > Creates a matrix of unit-normal random samples zeros fun zeros(rows: Int , cols: Int ): DefaultIntMatrix Generate a zero initialized matrix of the requested shape.","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/index.html#defaultintmatrixfactory","text":"class DefaultIntMatrixFactory : MatrixFactory < Matrix < Int >>","title":"DefaultIntMatrixFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/index.html#constructors","text":"Name Summary <init> DefaultIntMatrixFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/index.html#functions","text":"Name Summary arange fun arange(start: Double , stop: Double , increment: Double ): Matrix < Int > fun arange(start: Int , stop: Int , increment: Int ): Matrix < Int > Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Int > fun arange(start: Int , stop: Int ): Matrix < Int > Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. create fun create(data: IntRange ): Matrix < Int > Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Int > Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Int > Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): Matrix < Int > Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Int > Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): Matrix < Int > Creates a one initialized matrix of the requested shape rand fun rand(rows: Int , cols: Int ): Matrix < Int > Creates a matrix of uniform 0-1 random samples randn fun randn(rows: Int , cols: Int ): Matrix < Int > Creates a matrix of unit-normal random samples zeros fun zeros(rows: Int , cols: Int ): DefaultIntMatrix Generate a zero initialized matrix of the requested shape.","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/-init-.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrixFactory / <init> <init> DefaultIntMatrixFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/-init-.html#init","text":"DefaultIntMatrixFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/arange.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrixFactory / arange arange fun arange(start: Double , stop: Double , increment: Double ): Matrix < Int > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int , increment: Int ): Matrix < Int > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Int > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int ): Matrix < Int > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"Arange"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/arange.html#arange","text":"fun arange(start: Double , stop: Double , increment: Double ): Matrix < Int > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int , increment: Int ): Matrix < Int > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. fun arange(start: Double , stop: Double ): Matrix < Int > Overrides MatrixFactory.arange fun arange(start: Int , stop: Int ): Matrix < Int > Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"arange"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/create.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrixFactory / create create fun create(data: IntRange ): Matrix < Int > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Int > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Int > Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"Create"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/create.html#create","text":"fun create(data: IntRange ): Matrix < Int > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): Matrix < Int > Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): Matrix < Int > Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"create"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/eye.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrixFactory / eye eye fun eye(size: Int ): Matrix < Int > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Int > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"Eye"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/eye.html#eye","text":"fun eye(size: Int ): Matrix < Int > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): Matrix < Int > Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"eye"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/ones.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrixFactory / ones ones fun ones(rows: Int , cols: Int ): Matrix < Int > Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): Matrix < Int > Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/rand.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrixFactory / rand rand fun rand(rows: Int , cols: Int ): Matrix < Int > Overrides MatrixFactory.rand Creates a matrix of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/rand.html#rand","text":"fun rand(rows: Int , cols: Int ): Matrix < Int > Overrides MatrixFactory.rand Creates a matrix of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/randn.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrixFactory / randn randn fun randn(rows: Int , cols: Int ): Matrix < Int > Overrides MatrixFactory.randn Creates a matrix of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/randn.html#randn","text":"fun randn(rows: Int , cols: Int ): Matrix < Int > Overrides MatrixFactory.randn Creates a matrix of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/zeros.html","text":"api / koma.internal.default.generated.matrix / DefaultIntMatrixFactory / zeros zeros fun zeros(rows: Int , cols: Int ): DefaultIntMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"Zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.matrix/-default-int-matrix-factory/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): DefaultIntMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/index.html","text":"api / koma.internal.default.generated.ndarray Package koma.internal.default.generated.ndarray Types Name Summary DefaultByteNDArray open class DefaultByteNDArray : NDArray < Byte > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultByteNDArrayFactory class DefaultByteNDArrayFactory : NumericalNDArrayFactory < Byte > DefaultDoubleNDArray open class DefaultDoubleNDArray : NDArray < Double > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultDoubleNDArrayFactory class DefaultDoubleNDArrayFactory : NumericalNDArrayFactory < Double > DefaultFloatNDArray open class DefaultFloatNDArray : NDArray < Float > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultFloatNDArrayFactory class DefaultFloatNDArrayFactory : NumericalNDArrayFactory < Float > DefaultGenericNDArray open class DefaultGenericNDArray<T> : NDArray < T > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultGenericNDArrayFactory class DefaultGenericNDArrayFactory<T> : GenericNDArrayFactory < T > DefaultIntNDArray open class DefaultIntNDArray : NDArray < Int > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultIntNDArrayFactory class DefaultIntNDArrayFactory : NumericalNDArrayFactory < Int > DefaultLongNDArray open class DefaultLongNDArray : NDArray < Long > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultLongNDArrayFactory class DefaultLongNDArrayFactory : NumericalNDArrayFactory < Long > DefaultShortNDArray open class DefaultShortNDArray : NDArray < Short > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultShortNDArrayFactory class DefaultShortNDArrayFactory : NumericalNDArrayFactory < Short >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/index.html#package-komainternaldefaultgeneratedndarray","text":"","title":"Package koma.internal.default.generated.ndarray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/index.html#types","text":"Name Summary DefaultByteNDArray open class DefaultByteNDArray : NDArray < Byte > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultByteNDArrayFactory class DefaultByteNDArrayFactory : NumericalNDArrayFactory < Byte > DefaultDoubleNDArray open class DefaultDoubleNDArray : NDArray < Double > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultDoubleNDArrayFactory class DefaultDoubleNDArrayFactory : NumericalNDArrayFactory < Double > DefaultFloatNDArray open class DefaultFloatNDArray : NDArray < Float > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultFloatNDArrayFactory class DefaultFloatNDArrayFactory : NumericalNDArrayFactory < Float > DefaultGenericNDArray open class DefaultGenericNDArray<T> : NDArray < T > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultGenericNDArrayFactory class DefaultGenericNDArrayFactory<T> : GenericNDArrayFactory < T > DefaultIntNDArray open class DefaultIntNDArray : NDArray < Int > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultIntNDArrayFactory class DefaultIntNDArrayFactory : NumericalNDArrayFactory < Int > DefaultLongNDArray open class DefaultLongNDArray : NDArray < Long > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultLongNDArrayFactory class DefaultLongNDArrayFactory : NumericalNDArrayFactory < Long > DefaultShortNDArray open class DefaultShortNDArray : NDArray < Short > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultShortNDArrayFactory class DefaultShortNDArrayFactory : NumericalNDArrayFactory < Short >","title":"Types"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray DefaultByteNDArray open class DefaultByteNDArray : NDArray < Byte > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value. Constructors Name Summary <init> DefaultByteNDArray(vararg shape: Int , init: ( IntArray ) -> Byte ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Properties Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int Functions Name Summary copy open fun copy(): NDArray < Byte > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Byte open fun getGeneric(i: Int ): Byte getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Byte ): Unit open fun setGeneric(vararg indices: Int , value: Byte ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int > Inherited Functions Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Extension Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Byte >.div(other: Byte ): NDArray < Byte > fill fun NDArray < Byte >.fill(f: (idx: IntArray ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Byte >.fillBoth(f: (nd: IntArray , linear: Int ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Byte >.fillLinear(f: (idx: Int ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun NDArray < Byte >.forEach(f: (ele: Byte ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun NDArray < Byte >.forEachIndexed(f: (idx: Int , ele: Byte ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Byte >.forEachIndexedN(f: (idx: IntArray , ele: Byte ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun NDArray < Byte >.map(f: ( Byte ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun NDArray < Byte >.mapIndexed(f: (idx: Int , ele: Byte ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Byte >.mapIndexedN(f: (idx: IntArray , ele: Byte ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Byte >.minus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.minus(other: NDArray < Byte >): NDArray < Byte > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Byte >.plus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.plus(other: NDArray < Byte >): NDArray < Byte > pow infix fun NDArray < Byte >.pow(exponent: Int ): NDArray < Byte > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun NDArray < Byte >.set(vararg indices: Int , value: NDArray < Byte >): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: Byte ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit times operator fun NDArray < Byte >.times(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Byte >.times(other: Byte ): NDArray < Byte > toByteArray fun NDArray < Byte >.toByteArray(): ByteArray Converts this NDArray into a one-dimensional ByteArray in row-major order. toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Byte >.unaryMinus(): NDArray < Byte > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/index.html#defaultbytendarray","text":"open class DefaultByteNDArray : NDArray < Byte > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"DefaultByteNDArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/index.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/index.html#constructors","text":"Name Summary <init> DefaultByteNDArray(vararg shape: Int , init: ( IntArray ) -> Byte ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/index.html#properties","text":"Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/index.html#functions","text":"Name Summary copy open fun copy(): NDArray < Byte > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Byte open fun getGeneric(i: Int ): Byte getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Byte ): Unit open fun setGeneric(vararg indices: Int , value: Byte ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/index.html#inherited-functions","text":"Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/index.html#extension-functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Byte >.div(other: Byte ): NDArray < Byte > fill fun NDArray < Byte >.fill(f: (idx: IntArray ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Byte >.fillBoth(f: (nd: IntArray , linear: Int ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Byte >.fillLinear(f: (idx: Int ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun NDArray < Byte >.forEach(f: (ele: Byte ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun NDArray < Byte >.forEachIndexed(f: (idx: Int , ele: Byte ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Byte >.forEachIndexedN(f: (idx: IntArray , ele: Byte ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun NDArray < Byte >.map(f: ( Byte ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun NDArray < Byte >.mapIndexed(f: (idx: Int , ele: Byte ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Byte >.mapIndexedN(f: (idx: IntArray , ele: Byte ) -> Byte ): NDArray < Byte > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Byte >.minus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.minus(other: NDArray < Byte >): NDArray < Byte > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Byte >.plus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.plus(other: NDArray < Byte >): NDArray < Byte > pow infix fun NDArray < Byte >.pow(exponent: Int ): NDArray < Byte > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun NDArray < Byte >.set(vararg indices: Int , value: NDArray < Byte >): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: Byte ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit times operator fun NDArray < Byte >.times(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Byte >.times(other: Byte ): NDArray < Byte > toByteArray fun NDArray < Byte >.toByteArray(): ByteArray Converts this NDArray into a one-dimensional ByteArray in row-major order. toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Byte >.unaryMinus(): NDArray < Byte > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / <init> <init> DefaultByteNDArray(vararg shape: Int , init: ( IntArray ) -> Byte ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/-init-.html#init","text":"DefaultByteNDArray(vararg shape: Int , init: ( IntArray ) -> Byte ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/-init-.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/copy.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / copy copy open fun copy(): NDArray < Byte > Overrides NDArray.copy","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/copy.html#copy","text":"open fun copy(): NDArray < Byte > Overrides NDArray.copy","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-base-array.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / getBaseArray getBaseArray open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"Get base array"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-base-array.html#getbasearray","text":"open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"getBaseArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / getByte getByte open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"Get byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-byte.html#getbyte","text":"open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"getByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / getDouble getDouble open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-double.html#getdouble","text":"open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / getFloat getFloat open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-float.html#getfloat","text":"open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / getGeneric getGeneric open fun getGeneric(vararg indices: Int ): Byte Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Byte Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-generic.html#getgeneric","text":"open fun getGeneric(vararg indices: Int ): Byte Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Byte Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / getInt getInt open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-int.html#getint","text":"open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / getLong getLong open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"Get long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-long.html#getlong","text":"open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"getLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / getShort getShort open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"Get short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/get-short.html#getshort","text":"open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"getShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / setByte setByte open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"Set byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-byte.html#setbyte","text":"open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"setByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / setDouble setDouble open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-double.html#setdouble","text":"open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / setFloat setFloat open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-float.html#setfloat","text":"open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / setGeneric setGeneric open fun setGeneric(i: Int , value: Byte ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Byte ): Unit Overrides NDArray.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-generic.html#setgeneric","text":"open fun setGeneric(i: Int , value: Byte ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Byte ): Unit Overrides NDArray.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / setInt setInt open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-int.html#setint","text":"open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / setLong setLong open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"Set long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-long.html#setlong","text":"open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"setLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / setShort setShort open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"Set short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/set-short.html#setshort","text":"open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"setShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/shape.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / shape shape open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"Shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/shape.html#shape","text":"open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/size.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArray / size size open val size: Int Overrides NDArray.size","title":"Size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array/size.html#size","text":"open val size: Int Overrides NDArray.size","title":"size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArrayFactory DefaultByteNDArrayFactory class DefaultByteNDArrayFactory : NumericalNDArrayFactory < Byte > Constructors Name Summary <init> DefaultByteNDArrayFactory() Functions Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Byte ): DefaultByteNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultByteNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultByteNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultByteNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultByteNDArray Generate a zero initialized ND container of the requested shape Extension Functions Name Summary create fun NumericalNDArrayFactory < Byte >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Byte ): NDArray < Byte > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/index.html#defaultbytendarrayfactory","text":"class DefaultByteNDArrayFactory : NumericalNDArrayFactory < Byte >","title":"DefaultByteNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/index.html#constructors","text":"Name Summary <init> DefaultByteNDArrayFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/index.html#functions","text":"Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Byte ): DefaultByteNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultByteNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultByteNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultByteNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultByteNDArray Generate a zero initialized ND container of the requested shape","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/index.html#extension-functions","text":"Name Summary create fun NumericalNDArrayFactory < Byte >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Byte ): NDArray < Byte > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArrayFactory / <init> <init> DefaultByteNDArrayFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/-init-.html#init","text":"DefaultByteNDArrayFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/create-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArrayFactory / createGeneric createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Byte ): DefaultByteNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"Create generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/create-generic.html#creategeneric","text":"fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Byte ): DefaultByteNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"createGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/ones.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArrayFactory / ones ones fun ones(vararg lengths: Int ): DefaultByteNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/ones.html#ones","text":"fun ones(vararg lengths: Int ): DefaultByteNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/rand.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArrayFactory / rand rand fun rand(vararg lengths: Int ): DefaultByteNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/rand.html#rand","text":"fun rand(vararg lengths: Int ): DefaultByteNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/randn.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArrayFactory / randn randn fun randn(vararg lengths: Int ): DefaultByteNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/randn.html#randn","text":"fun randn(vararg lengths: Int ): DefaultByteNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/zeros.html","text":"api / koma.internal.default.generated.ndarray / DefaultByteNDArrayFactory / zeros zeros fun zeros(vararg lengths: Int ): DefaultByteNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"Zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-byte-n-d-array-factory/zeros.html#zeros","text":"fun zeros(vararg lengths: Int ): DefaultByteNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray DefaultDoubleNDArray open class DefaultDoubleNDArray : NDArray < Double > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value. Constructors Name Summary <init> DefaultDoubleNDArray(vararg shape: Int , init: ( IntArray ) -> Double ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Properties Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int Functions Name Summary copy open fun copy(): NDArray < Double > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Double open fun getGeneric(i: Int ): Double getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Double ): Unit open fun setGeneric(vararg indices: Int , value: Double ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int > Inherited Functions Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Extension Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > fill fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun NDArray < Double >.forEach(f: (ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun NDArray < Double >.map(f: ( Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double > pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > reshape fun NDArray < Double >.reshape(rows: Int , cols: Int ): Matrix < Double > Returns a new Matrix with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double > toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/index.html#defaultdoublendarray","text":"open class DefaultDoubleNDArray : NDArray < Double > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"DefaultDoubleNDArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/index.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/index.html#constructors","text":"Name Summary <init> DefaultDoubleNDArray(vararg shape: Int , init: ( IntArray ) -> Double ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/index.html#properties","text":"Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/index.html#functions","text":"Name Summary copy open fun copy(): NDArray < Double > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Double open fun getGeneric(i: Int ): Double getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Double ): Unit open fun setGeneric(vararg indices: Int , value: Double ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/index.html#inherited-functions","text":"Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/index.html#extension-functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > fill fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun NDArray < Double >.forEach(f: (ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun NDArray < Double >.map(f: ( Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double > pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > reshape fun NDArray < Double >.reshape(rows: Int , cols: Int ): Matrix < Double > Returns a new Matrix with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double > toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / <init> <init> DefaultDoubleNDArray(vararg shape: Int , init: ( IntArray ) -> Double ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/-init-.html#init","text":"DefaultDoubleNDArray(vararg shape: Int , init: ( IntArray ) -> Double ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/-init-.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/copy.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / copy copy open fun copy(): NDArray < Double > Overrides NDArray.copy","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/copy.html#copy","text":"open fun copy(): NDArray < Double > Overrides NDArray.copy","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-base-array.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / getBaseArray getBaseArray open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"Get base array"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-base-array.html#getbasearray","text":"open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"getBaseArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / getByte getByte open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"Get byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-byte.html#getbyte","text":"open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"getByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / getDouble getDouble open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-double.html#getdouble","text":"open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / getFloat getFloat open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-float.html#getfloat","text":"open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / getGeneric getGeneric open fun getGeneric(vararg indices: Int ): Double Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Double Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-generic.html#getgeneric","text":"open fun getGeneric(vararg indices: Int ): Double Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Double Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / getInt getInt open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-int.html#getint","text":"open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / getLong getLong open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"Get long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-long.html#getlong","text":"open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"getLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / getShort getShort open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"Get short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/get-short.html#getshort","text":"open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"getShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / setByte setByte open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"Set byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-byte.html#setbyte","text":"open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"setByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / setDouble setDouble open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-double.html#setdouble","text":"open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / setFloat setFloat open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-float.html#setfloat","text":"open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / setGeneric setGeneric open fun setGeneric(i: Int , value: Double ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Double ): Unit Overrides NDArray.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-generic.html#setgeneric","text":"open fun setGeneric(i: Int , value: Double ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Double ): Unit Overrides NDArray.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / setInt setInt open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-int.html#setint","text":"open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / setLong setLong open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"Set long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-long.html#setlong","text":"open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"setLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / setShort setShort open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"Set short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/set-short.html#setshort","text":"open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"setShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/shape.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / shape shape open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"Shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/shape.html#shape","text":"open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/size.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArray / size size open val size: Int Overrides NDArray.size","title":"Size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array/size.html#size","text":"open val size: Int Overrides NDArray.size","title":"size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArrayFactory DefaultDoubleNDArrayFactory class DefaultDoubleNDArrayFactory : NumericalNDArrayFactory < Double > Constructors Name Summary <init> DefaultDoubleNDArrayFactory() Functions Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Double ): DefaultDoubleNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultDoubleNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultDoubleNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultDoubleNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultDoubleNDArray Generate a zero initialized ND container of the requested shape Extension Functions Name Summary create fun NumericalNDArrayFactory < Double >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/index.html#defaultdoublendarrayfactory","text":"class DefaultDoubleNDArrayFactory : NumericalNDArrayFactory < Double >","title":"DefaultDoubleNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/index.html#constructors","text":"Name Summary <init> DefaultDoubleNDArrayFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/index.html#functions","text":"Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Double ): DefaultDoubleNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultDoubleNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultDoubleNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultDoubleNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultDoubleNDArray Generate a zero initialized ND container of the requested shape","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/index.html#extension-functions","text":"Name Summary create fun NumericalNDArrayFactory < Double >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArrayFactory / <init> <init> DefaultDoubleNDArrayFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/-init-.html#init","text":"DefaultDoubleNDArrayFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/create-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArrayFactory / createGeneric createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Double ): DefaultDoubleNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"Create generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/create-generic.html#creategeneric","text":"fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Double ): DefaultDoubleNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"createGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/ones.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArrayFactory / ones ones fun ones(vararg lengths: Int ): DefaultDoubleNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/ones.html#ones","text":"fun ones(vararg lengths: Int ): DefaultDoubleNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/rand.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArrayFactory / rand rand fun rand(vararg lengths: Int ): DefaultDoubleNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/rand.html#rand","text":"fun rand(vararg lengths: Int ): DefaultDoubleNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/randn.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArrayFactory / randn randn fun randn(vararg lengths: Int ): DefaultDoubleNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/randn.html#randn","text":"fun randn(vararg lengths: Int ): DefaultDoubleNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/zeros.html","text":"api / koma.internal.default.generated.ndarray / DefaultDoubleNDArrayFactory / zeros zeros fun zeros(vararg lengths: Int ): DefaultDoubleNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"Zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-double-n-d-array-factory/zeros.html#zeros","text":"fun zeros(vararg lengths: Int ): DefaultDoubleNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray DefaultFloatNDArray open class DefaultFloatNDArray : NDArray < Float > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value. Constructors Name Summary <init> DefaultFloatNDArray(vararg shape: Int , init: ( IntArray ) -> Float ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Properties Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int Functions Name Summary copy open fun copy(): NDArray < Float > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Float open fun getGeneric(i: Int ): Float getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Float ): Unit open fun setGeneric(vararg indices: Int , value: Float ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int > Inherited Functions Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Extension Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Float >.div(other: Float ): NDArray < Float > fill fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun NDArray < Float >.forEach(f: (ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun NDArray < Float >.map(f: ( Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > pow infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > reshape fun NDArray < Float >.reshape(rows: Int , cols: Int ): Matrix < Float > Returns a new Matrix with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit times operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Float >.times(other: Float ): NDArray < Float > toFloatArray fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order. toMatrix fun NDArray < Float >.toMatrix(): Matrix < Float > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Float >.unaryMinus(): NDArray < Float > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/index.html#defaultfloatndarray","text":"open class DefaultFloatNDArray : NDArray < Float > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"DefaultFloatNDArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/index.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/index.html#constructors","text":"Name Summary <init> DefaultFloatNDArray(vararg shape: Int , init: ( IntArray ) -> Float ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/index.html#properties","text":"Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/index.html#functions","text":"Name Summary copy open fun copy(): NDArray < Float > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Float open fun getGeneric(i: Int ): Float getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Float ): Unit open fun setGeneric(vararg indices: Int , value: Float ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/index.html#inherited-functions","text":"Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/index.html#extension-functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Float >.div(other: Float ): NDArray < Float > fill fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun NDArray < Float >.forEach(f: (ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun NDArray < Float >.map(f: ( Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > pow infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > reshape fun NDArray < Float >.reshape(rows: Int , cols: Int ): Matrix < Float > Returns a new Matrix with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit times operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Float >.times(other: Float ): NDArray < Float > toFloatArray fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order. toMatrix fun NDArray < Float >.toMatrix(): Matrix < Float > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Float >.unaryMinus(): NDArray < Float > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / <init> <init> DefaultFloatNDArray(vararg shape: Int , init: ( IntArray ) -> Float ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/-init-.html#init","text":"DefaultFloatNDArray(vararg shape: Int , init: ( IntArray ) -> Float ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/-init-.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/copy.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / copy copy open fun copy(): NDArray < Float > Overrides NDArray.copy","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/copy.html#copy","text":"open fun copy(): NDArray < Float > Overrides NDArray.copy","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-base-array.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / getBaseArray getBaseArray open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"Get base array"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-base-array.html#getbasearray","text":"open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"getBaseArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / getByte getByte open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"Get byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-byte.html#getbyte","text":"open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"getByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / getDouble getDouble open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-double.html#getdouble","text":"open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / getFloat getFloat open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-float.html#getfloat","text":"open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / getGeneric getGeneric open fun getGeneric(vararg indices: Int ): Float Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Float Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-generic.html#getgeneric","text":"open fun getGeneric(vararg indices: Int ): Float Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Float Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / getInt getInt open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-int.html#getint","text":"open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / getLong getLong open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"Get long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-long.html#getlong","text":"open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"getLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / getShort getShort open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"Get short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/get-short.html#getshort","text":"open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"getShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / setByte setByte open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"Set byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-byte.html#setbyte","text":"open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"setByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / setDouble setDouble open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-double.html#setdouble","text":"open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / setFloat setFloat open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-float.html#setfloat","text":"open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / setGeneric setGeneric open fun setGeneric(i: Int , value: Float ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Float ): Unit Overrides NDArray.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-generic.html#setgeneric","text":"open fun setGeneric(i: Int , value: Float ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Float ): Unit Overrides NDArray.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / setInt setInt open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-int.html#setint","text":"open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / setLong setLong open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"Set long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-long.html#setlong","text":"open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"setLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / setShort setShort open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"Set short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/set-short.html#setshort","text":"open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"setShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/shape.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / shape shape open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"Shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/shape.html#shape","text":"open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/size.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArray / size size open val size: Int Overrides NDArray.size","title":"Size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array/size.html#size","text":"open val size: Int Overrides NDArray.size","title":"size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArrayFactory DefaultFloatNDArrayFactory class DefaultFloatNDArrayFactory : NumericalNDArrayFactory < Float > Constructors Name Summary <init> DefaultFloatNDArrayFactory() Functions Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Float ): DefaultFloatNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultFloatNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultFloatNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultFloatNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultFloatNDArray Generate a zero initialized ND container of the requested shape Extension Functions Name Summary create fun NumericalNDArrayFactory < Float >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/index.html#defaultfloatndarrayfactory","text":"class DefaultFloatNDArrayFactory : NumericalNDArrayFactory < Float >","title":"DefaultFloatNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/index.html#constructors","text":"Name Summary <init> DefaultFloatNDArrayFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/index.html#functions","text":"Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Float ): DefaultFloatNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultFloatNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultFloatNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultFloatNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultFloatNDArray Generate a zero initialized ND container of the requested shape","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/index.html#extension-functions","text":"Name Summary create fun NumericalNDArrayFactory < Float >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArrayFactory / <init> <init> DefaultFloatNDArrayFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/-init-.html#init","text":"DefaultFloatNDArrayFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/create-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArrayFactory / createGeneric createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Float ): DefaultFloatNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"Create generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/create-generic.html#creategeneric","text":"fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Float ): DefaultFloatNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"createGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/ones.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArrayFactory / ones ones fun ones(vararg lengths: Int ): DefaultFloatNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/ones.html#ones","text":"fun ones(vararg lengths: Int ): DefaultFloatNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/rand.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArrayFactory / rand rand fun rand(vararg lengths: Int ): DefaultFloatNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/rand.html#rand","text":"fun rand(vararg lengths: Int ): DefaultFloatNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/randn.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArrayFactory / randn randn fun randn(vararg lengths: Int ): DefaultFloatNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/randn.html#randn","text":"fun randn(vararg lengths: Int ): DefaultFloatNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/zeros.html","text":"api / koma.internal.default.generated.ndarray / DefaultFloatNDArrayFactory / zeros zeros fun zeros(vararg lengths: Int ): DefaultFloatNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"Zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-float-n-d-array-factory/zeros.html#zeros","text":"fun zeros(vararg lengths: Int ): DefaultFloatNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray DefaultGenericNDArray open class DefaultGenericNDArray<T> : NDArray < T > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value. Constructors Name Summary <init> DefaultGenericNDArray(vararg shape: Int , init: ( IntArray ) -> T ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Properties Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int Functions Name Summary copy open fun copy(): NDArray < T > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T open fun getGeneric(i: Int ): T getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int > Inherited Functions Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Extension Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. reshape fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/index.html#defaultgenericndarray","text":"open class DefaultGenericNDArray<T> : NDArray < T > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"DefaultGenericNDArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/index.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/index.html#constructors","text":"Name Summary <init> DefaultGenericNDArray(vararg shape: Int , init: ( IntArray ) -> T ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/index.html#properties","text":"Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/index.html#functions","text":"Name Summary copy open fun copy(): NDArray < T > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T open fun getGeneric(i: Int ): T getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/index.html#inherited-functions","text":"Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/index.html#extension-functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. reshape fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / <init> <init> DefaultGenericNDArray(vararg shape: Int , init: ( IntArray ) -> T ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/-init-.html#init","text":"DefaultGenericNDArray(vararg shape: Int , init: ( IntArray ) -> T ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/-init-.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/copy.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / copy copy open fun copy(): NDArray < T > Overrides NDArray.copy","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/copy.html#copy","text":"open fun copy(): NDArray < T > Overrides NDArray.copy","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-base-array.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / getBaseArray getBaseArray open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"Get base array"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-base-array.html#getbasearray","text":"open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"getBaseArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / getByte getByte open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"Get byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-byte.html#getbyte","text":"open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"getByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / getDouble getDouble open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-double.html#getdouble","text":"open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / getFloat getFloat open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-float.html#getfloat","text":"open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / getGeneric getGeneric open fun getGeneric(vararg indices: Int ): T Overrides NDArray.getGeneric open fun getGeneric(i: Int ): T Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-generic.html#getgeneric","text":"open fun getGeneric(vararg indices: Int ): T Overrides NDArray.getGeneric open fun getGeneric(i: Int ): T Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / getInt getInt open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-int.html#getint","text":"open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / getLong getLong open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"Get long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-long.html#getlong","text":"open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"getLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / getShort getShort open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"Get short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/get-short.html#getshort","text":"open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"getShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / setByte setByte open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"Set byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-byte.html#setbyte","text":"open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"setByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / setDouble setDouble open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-double.html#setdouble","text":"open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / setFloat setFloat open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-float.html#setfloat","text":"open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / setGeneric setGeneric open fun setGeneric(i: Int , value: T ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: T ): Unit Overrides NDArray.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-generic.html#setgeneric","text":"open fun setGeneric(i: Int , value: T ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: T ): Unit Overrides NDArray.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / setInt setInt open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-int.html#setint","text":"open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / setLong setLong open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"Set long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-long.html#setlong","text":"open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"setLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / setShort setShort open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"Set short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/set-short.html#setshort","text":"open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"setShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/shape.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / shape shape open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"Shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/shape.html#shape","text":"open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/size.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArray / size size open val size: Int Overrides NDArray.size","title":"Size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array/size.html#size","text":"open val size: Int Overrides NDArray.size","title":"size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array-factory/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArrayFactory DefaultGenericNDArrayFactory class DefaultGenericNDArrayFactory<T> : GenericNDArrayFactory < T > Constructors Name Summary <init> DefaultGenericNDArrayFactory() Functions Name Summary createGeneric fun createGeneric(vararg lengths: Int , filler: ( IntArray ) -> T ): DefaultGenericNDArray < T > Generate an ND container of the requested shape without initializing its contents. Extension Functions Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array-factory/index.html#defaultgenericndarrayfactory","text":"class DefaultGenericNDArrayFactory<T> : GenericNDArrayFactory < T >","title":"DefaultGenericNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array-factory/index.html#constructors","text":"Name Summary <init> DefaultGenericNDArrayFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array-factory/index.html#functions","text":"Name Summary createGeneric fun createGeneric(vararg lengths: Int , filler: ( IntArray ) -> T ): DefaultGenericNDArray < T > Generate an ND container of the requested shape without initializing its contents.","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array-factory/index.html#extension-functions","text":"Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array-factory/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArrayFactory / <init> <init> DefaultGenericNDArrayFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array-factory/-init-.html#init","text":"DefaultGenericNDArrayFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array-factory/create-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultGenericNDArrayFactory / createGeneric createGeneric fun createGeneric(vararg lengths: Int , filler: ( IntArray ) -> T ): DefaultGenericNDArray < T > Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"Create generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-generic-n-d-array-factory/create-generic.html#creategeneric","text":"fun createGeneric(vararg lengths: Int , filler: ( IntArray ) -> T ): DefaultGenericNDArray < T > Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"createGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray DefaultIntNDArray open class DefaultIntNDArray : NDArray < Int > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value. Constructors Name Summary <init> DefaultIntNDArray(vararg shape: Int , init: ( IntArray ) -> Int ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Properties Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int Functions Name Summary copy open fun copy(): NDArray < Int > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Int open fun getGeneric(i: Int ): Int getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Int ): Unit open fun setGeneric(vararg indices: Int , value: Int ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int > Inherited Functions Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Extension Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Int >.div(other: Int ): NDArray < Int > fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Int >.forEach(f: (ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.map(f: ( Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > pow infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > reshape fun NDArray < Int >.reshape(rows: Int , cols: Int ): Matrix < Int > Returns a new Matrix with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit times operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Int >.times(other: Int ): NDArray < Int > toIntArray fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order. toMatrix fun NDArray < Int >.toMatrix(): Matrix < Int > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Int >.unaryMinus(): NDArray < Int > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/index.html#defaultintndarray","text":"open class DefaultIntNDArray : NDArray < Int > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"DefaultIntNDArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/index.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/index.html#constructors","text":"Name Summary <init> DefaultIntNDArray(vararg shape: Int , init: ( IntArray ) -> Int ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/index.html#properties","text":"Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/index.html#functions","text":"Name Summary copy open fun copy(): NDArray < Int > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Int open fun getGeneric(i: Int ): Int getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Int ): Unit open fun setGeneric(vararg indices: Int , value: Int ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/index.html#inherited-functions","text":"Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/index.html#extension-functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Int >.div(other: Int ): NDArray < Int > fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Int >.forEach(f: (ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.map(f: ( Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > pow infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > reshape fun NDArray < Int >.reshape(rows: Int , cols: Int ): Matrix < Int > Returns a new Matrix with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit times operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Int >.times(other: Int ): NDArray < Int > toIntArray fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order. toMatrix fun NDArray < Int >.toMatrix(): Matrix < Int > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Int >.unaryMinus(): NDArray < Int > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / <init> <init> DefaultIntNDArray(vararg shape: Int , init: ( IntArray ) -> Int ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/-init-.html#init","text":"DefaultIntNDArray(vararg shape: Int , init: ( IntArray ) -> Int ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/-init-.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/copy.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / copy copy open fun copy(): NDArray < Int > Overrides NDArray.copy","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/copy.html#copy","text":"open fun copy(): NDArray < Int > Overrides NDArray.copy","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-base-array.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / getBaseArray getBaseArray open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"Get base array"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-base-array.html#getbasearray","text":"open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"getBaseArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / getByte getByte open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"Get byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-byte.html#getbyte","text":"open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"getByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / getDouble getDouble open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-double.html#getdouble","text":"open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / getFloat getFloat open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-float.html#getfloat","text":"open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / getGeneric getGeneric open fun getGeneric(vararg indices: Int ): Int Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Int Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-generic.html#getgeneric","text":"open fun getGeneric(vararg indices: Int ): Int Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Int Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / getInt getInt open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-int.html#getint","text":"open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / getLong getLong open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"Get long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-long.html#getlong","text":"open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"getLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / getShort getShort open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"Get short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/get-short.html#getshort","text":"open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"getShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / setByte setByte open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"Set byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-byte.html#setbyte","text":"open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"setByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / setDouble setDouble open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-double.html#setdouble","text":"open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / setFloat setFloat open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-float.html#setfloat","text":"open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / setGeneric setGeneric open fun setGeneric(i: Int , value: Int ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Int ): Unit Overrides NDArray.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-generic.html#setgeneric","text":"open fun setGeneric(i: Int , value: Int ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Int ): Unit Overrides NDArray.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / setInt setInt open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-int.html#setint","text":"open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / setLong setLong open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"Set long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-long.html#setlong","text":"open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"setLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / setShort setShort open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"Set short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/set-short.html#setshort","text":"open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"setShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/shape.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / shape shape open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"Shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/shape.html#shape","text":"open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/size.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArray / size size open val size: Int Overrides NDArray.size","title":"Size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array/size.html#size","text":"open val size: Int Overrides NDArray.size","title":"size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArrayFactory DefaultIntNDArrayFactory class DefaultIntNDArrayFactory : NumericalNDArrayFactory < Int > Constructors Name Summary <init> DefaultIntNDArrayFactory() Functions Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Int ): DefaultIntNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultIntNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultIntNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultIntNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultIntNDArray Generate a zero initialized ND container of the requested shape Extension Functions Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > fun NumericalNDArrayFactory < Int >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Int ): NDArray < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/index.html#defaultintndarrayfactory","text":"class DefaultIntNDArrayFactory : NumericalNDArrayFactory < Int >","title":"DefaultIntNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/index.html#constructors","text":"Name Summary <init> DefaultIntNDArrayFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/index.html#functions","text":"Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Int ): DefaultIntNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultIntNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultIntNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultIntNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultIntNDArray Generate a zero initialized ND container of the requested shape","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/index.html#extension-functions","text":"Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > fun NumericalNDArrayFactory < Int >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Int ): NDArray < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArrayFactory / <init> <init> DefaultIntNDArrayFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/-init-.html#init","text":"DefaultIntNDArrayFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/create-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArrayFactory / createGeneric createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Int ): DefaultIntNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"Create generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/create-generic.html#creategeneric","text":"fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Int ): DefaultIntNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"createGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/ones.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArrayFactory / ones ones fun ones(vararg lengths: Int ): DefaultIntNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/ones.html#ones","text":"fun ones(vararg lengths: Int ): DefaultIntNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/rand.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArrayFactory / rand rand fun rand(vararg lengths: Int ): DefaultIntNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/rand.html#rand","text":"fun rand(vararg lengths: Int ): DefaultIntNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/randn.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArrayFactory / randn randn fun randn(vararg lengths: Int ): DefaultIntNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/randn.html#randn","text":"fun randn(vararg lengths: Int ): DefaultIntNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/zeros.html","text":"api / koma.internal.default.generated.ndarray / DefaultIntNDArrayFactory / zeros zeros fun zeros(vararg lengths: Int ): DefaultIntNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"Zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-int-n-d-array-factory/zeros.html#zeros","text":"fun zeros(vararg lengths: Int ): DefaultIntNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray DefaultLongNDArray open class DefaultLongNDArray : NDArray < Long > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value. Constructors Name Summary <init> DefaultLongNDArray(vararg shape: Int , init: ( IntArray ) -> Long ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Properties Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int Functions Name Summary copy open fun copy(): NDArray < Long > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Long open fun getGeneric(i: Int ): Long getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Long ): Unit open fun setGeneric(vararg indices: Int , value: Long ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int > Inherited Functions Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Extension Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Long >.div(other: Long ): NDArray < Long > fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Long >.fill(f: (idx: IntArray ) -> Long ): NDArray < Long > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Long >.fillBoth(f: (nd: IntArray , linear: Int ) -> Long ): NDArray < Long > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Long >.fillLinear(f: (idx: Int ) -> Long ): NDArray < Long > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Long >.forEach(f: (ele: Long ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Long >.forEachIndexed(f: (idx: Int , ele: Long ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Long >.forEachIndexedN(f: (idx: IntArray , ele: Long ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Long >.map(f: ( Long ) -> Long ): NDArray < Long > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Long >.mapIndexed(f: (idx: Int , ele: Long ) -> Long ): NDArray < Long > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Long >.mapIndexedN(f: (idx: IntArray , ele: Long ) -> Long ): NDArray < Long > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Long >.minus(other: Long ): NDArray < Long > operator fun NDArray < Long >.minus(other: NDArray < Long >): NDArray < Long > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Long >.plus(other: Long ): NDArray < Long > operator fun NDArray < Long >.plus(other: NDArray < Long >): NDArray < Long > pow infix fun NDArray < Long >.pow(exponent: Int ): NDArray < Long > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: NDArray < Long >): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: Long ): Unit times operator fun NDArray < Long >.times(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Long >.times(other: Long ): NDArray < Long > toLongArray fun NDArray < Long >.toLongArray(): LongArray Converts this NDArray into a one-dimensional LongArray in row-major order. toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Long >.unaryMinus(): NDArray < Long > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/index.html#defaultlongndarray","text":"open class DefaultLongNDArray : NDArray < Long > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"DefaultLongNDArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/index.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/index.html#constructors","text":"Name Summary <init> DefaultLongNDArray(vararg shape: Int , init: ( IntArray ) -> Long ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/index.html#properties","text":"Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/index.html#functions","text":"Name Summary copy open fun copy(): NDArray < Long > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Long open fun getGeneric(i: Int ): Long getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Long ): Unit open fun setGeneric(vararg indices: Int , value: Long ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/index.html#inherited-functions","text":"Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/index.html#extension-functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Long >.div(other: Long ): NDArray < Long > fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Long >.fill(f: (idx: IntArray ) -> Long ): NDArray < Long > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Long >.fillBoth(f: (nd: IntArray , linear: Int ) -> Long ): NDArray < Long > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Long >.fillLinear(f: (idx: Int ) -> Long ): NDArray < Long > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Long >.forEach(f: (ele: Long ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Long >.forEachIndexed(f: (idx: Int , ele: Long ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Long >.forEachIndexedN(f: (idx: IntArray , ele: Long ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Long >.map(f: ( Long ) -> Long ): NDArray < Long > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Long >.mapIndexed(f: (idx: Int , ele: Long ) -> Long ): NDArray < Long > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Long >.mapIndexedN(f: (idx: IntArray , ele: Long ) -> Long ): NDArray < Long > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Long >.minus(other: Long ): NDArray < Long > operator fun NDArray < Long >.minus(other: NDArray < Long >): NDArray < Long > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Long >.plus(other: Long ): NDArray < Long > operator fun NDArray < Long >.plus(other: NDArray < Long >): NDArray < Long > pow infix fun NDArray < Long >.pow(exponent: Int ): NDArray < Long > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: NDArray < Long >): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: Long ): Unit times operator fun NDArray < Long >.times(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Long >.times(other: Long ): NDArray < Long > toLongArray fun NDArray < Long >.toLongArray(): LongArray Converts this NDArray into a one-dimensional LongArray in row-major order. toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Long >.unaryMinus(): NDArray < Long > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / <init> <init> DefaultLongNDArray(vararg shape: Int , init: ( IntArray ) -> Long ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/-init-.html#init","text":"DefaultLongNDArray(vararg shape: Int , init: ( IntArray ) -> Long ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/-init-.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/copy.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / copy copy open fun copy(): NDArray < Long > Overrides NDArray.copy","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/copy.html#copy","text":"open fun copy(): NDArray < Long > Overrides NDArray.copy","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-base-array.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / getBaseArray getBaseArray open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"Get base array"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-base-array.html#getbasearray","text":"open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"getBaseArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / getByte getByte open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"Get byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-byte.html#getbyte","text":"open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"getByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / getDouble getDouble open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-double.html#getdouble","text":"open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / getFloat getFloat open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-float.html#getfloat","text":"open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / getGeneric getGeneric open fun getGeneric(vararg indices: Int ): Long Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Long Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-generic.html#getgeneric","text":"open fun getGeneric(vararg indices: Int ): Long Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Long Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / getInt getInt open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-int.html#getint","text":"open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / getLong getLong open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"Get long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-long.html#getlong","text":"open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"getLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / getShort getShort open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"Get short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/get-short.html#getshort","text":"open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"getShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / setByte setByte open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"Set byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-byte.html#setbyte","text":"open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"setByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / setDouble setDouble open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-double.html#setdouble","text":"open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / setFloat setFloat open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-float.html#setfloat","text":"open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / setGeneric setGeneric open fun setGeneric(i: Int , value: Long ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Long ): Unit Overrides NDArray.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-generic.html#setgeneric","text":"open fun setGeneric(i: Int , value: Long ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Long ): Unit Overrides NDArray.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / setInt setInt open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-int.html#setint","text":"open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / setLong setLong open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"Set long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-long.html#setlong","text":"open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"setLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / setShort setShort open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"Set short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/set-short.html#setshort","text":"open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"setShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/shape.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / shape shape open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"Shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/shape.html#shape","text":"open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/size.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArray / size size open val size: Int Overrides NDArray.size","title":"Size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array/size.html#size","text":"open val size: Int Overrides NDArray.size","title":"size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArrayFactory DefaultLongNDArrayFactory class DefaultLongNDArrayFactory : NumericalNDArrayFactory < Long > Constructors Name Summary <init> DefaultLongNDArrayFactory() Functions Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Long ): DefaultLongNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultLongNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultLongNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultLongNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultLongNDArray Generate a zero initialized ND container of the requested shape Extension Functions Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > fun NumericalNDArrayFactory < Long >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Long ): NDArray < Long >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/index.html#defaultlongndarrayfactory","text":"class DefaultLongNDArrayFactory : NumericalNDArrayFactory < Long >","title":"DefaultLongNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/index.html#constructors","text":"Name Summary <init> DefaultLongNDArrayFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/index.html#functions","text":"Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Long ): DefaultLongNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultLongNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultLongNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultLongNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultLongNDArray Generate a zero initialized ND container of the requested shape","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/index.html#extension-functions","text":"Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > fun NumericalNDArrayFactory < Long >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Long ): NDArray < Long >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArrayFactory / <init> <init> DefaultLongNDArrayFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/-init-.html#init","text":"DefaultLongNDArrayFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/create-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArrayFactory / createGeneric createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Long ): DefaultLongNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"Create generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/create-generic.html#creategeneric","text":"fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Long ): DefaultLongNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"createGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/ones.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArrayFactory / ones ones fun ones(vararg lengths: Int ): DefaultLongNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/ones.html#ones","text":"fun ones(vararg lengths: Int ): DefaultLongNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/rand.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArrayFactory / rand rand fun rand(vararg lengths: Int ): DefaultLongNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/rand.html#rand","text":"fun rand(vararg lengths: Int ): DefaultLongNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/randn.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArrayFactory / randn randn fun randn(vararg lengths: Int ): DefaultLongNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/randn.html#randn","text":"fun randn(vararg lengths: Int ): DefaultLongNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/zeros.html","text":"api / koma.internal.default.generated.ndarray / DefaultLongNDArrayFactory / zeros zeros fun zeros(vararg lengths: Int ): DefaultLongNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"Zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-long-n-d-array-factory/zeros.html#zeros","text":"fun zeros(vararg lengths: Int ): DefaultLongNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray DefaultShortNDArray open class DefaultShortNDArray : NDArray < Short > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value. Constructors Name Summary <init> DefaultShortNDArray(vararg shape: Int , init: ( IntArray ) -> Short ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Properties Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int Functions Name Summary copy open fun copy(): NDArray < Short > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Short open fun getGeneric(i: Int ): Short getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Short ): Unit open fun setGeneric(vararg indices: Int , value: Short ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int > Inherited Functions Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Extension Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Short >.div(other: Short ): NDArray < Short > fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Short >.fill(f: (idx: IntArray ) -> Short ): NDArray < Short > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Short >.fillBoth(f: (nd: IntArray , linear: Int ) -> Short ): NDArray < Short > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Short >.fillLinear(f: (idx: Int ) -> Short ): NDArray < Short > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Short >.forEach(f: (ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Short >.forEachIndexed(f: (idx: Int , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Short >.forEachIndexedN(f: (idx: IntArray , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Short >.map(f: ( Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Short >.mapIndexed(f: (idx: Int , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Short >.mapIndexedN(f: (idx: IntArray , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Short >.minus(other: Short ): NDArray < Short > operator fun NDArray < Short >.minus(other: NDArray < Short >): NDArray < Short > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Short >.plus(other: Short ): NDArray < Short > operator fun NDArray < Short >.plus(other: NDArray < Short >): NDArray < Short > pow infix fun NDArray < Short >.pow(exponent: Int ): NDArray < Short > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: NDArray < Short >): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: Short ): Unit times operator fun NDArray < Short >.times(other: NDArray < Short >): NDArray < Short > operator fun NDArray < Short >.times(other: Short ): NDArray < Short > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toShortArray fun NDArray < Short >.toShortArray(): ShortArray Converts this NDArray into a one-dimensional ShortArray in row-major order. toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Short >.unaryMinus(): NDArray < Short > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/index.html#defaultshortndarray","text":"open class DefaultShortNDArray : NDArray < Short > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"DefaultShortNDArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/index.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/index.html#constructors","text":"Name Summary <init> DefaultShortNDArray(vararg shape: Int , init: ( IntArray ) -> Short ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/index.html#properties","text":"Name Summary shape vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) size open val size: Int","title":"Properties"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/index.html#functions","text":"Name Summary copy open fun copy(): NDArray < Short > getBaseArray open fun getBaseArray(): Any getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): Short open fun getGeneric(i: Int ): Short getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , value: Short ): Unit open fun setGeneric(vararg indices: Int , value: Short ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit shape open fun shape(): List < Int >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/index.html#inherited-functions","text":"Name Summary getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float getInt open fun getInt(vararg indices: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/index.html#extension-functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Short >.div(other: Short ): NDArray < Short > fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Short >.fill(f: (idx: IntArray ) -> Short ): NDArray < Short > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Short >.fillBoth(f: (nd: IntArray , linear: Int ) -> Short ): NDArray < Short > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Short >.fillLinear(f: (idx: Int ) -> Short ): NDArray < Short > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Short >.forEach(f: (ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Short >.forEachIndexed(f: (idx: Int , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Short >.forEachIndexedN(f: (idx: IntArray , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Short >.map(f: ( Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Short >.mapIndexed(f: (idx: Int , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Short >.mapIndexedN(f: (idx: IntArray , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Short >.minus(other: Short ): NDArray < Short > operator fun NDArray < Short >.minus(other: NDArray < Short >): NDArray < Short > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Short >.plus(other: Short ): NDArray < Short > operator fun NDArray < Short >.plus(other: NDArray < Short >): NDArray < Short > pow infix fun NDArray < Short >.pow(exponent: Int ): NDArray < Short > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: NDArray < Short >): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: Short ): Unit times operator fun NDArray < Short >.times(other: NDArray < Short >): NDArray < Short > operator fun NDArray < Short >.times(other: Short ): NDArray < Short > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toShortArray fun NDArray < Short >.toShortArray(): ShortArray Converts this NDArray into a one-dimensional ShortArray in row-major order. toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Short >.unaryMinus(): NDArray < Short > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / <init> <init> DefaultShortNDArray(vararg shape: Int , init: ( IntArray ) -> Short ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Parameters shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/-init-.html#init","text":"DefaultShortNDArray(vararg shape: Int , init: ( IntArray ) -> Short ) An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/-init-.html#parameters","text":"shape - A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8) init - A function that takes a location in the new array and returns its initial value.","title":"Parameters"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/copy.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / copy copy open fun copy(): NDArray < Short > Overrides NDArray.copy","title":"Copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/copy.html#copy","text":"open fun copy(): NDArray < Short > Overrides NDArray.copy","title":"copy"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-base-array.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / getBaseArray getBaseArray open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"Get base array"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-base-array.html#getbasearray","text":"open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"getBaseArray"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / getByte getByte open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"Get byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-byte.html#getbyte","text":"open fun getByte(i: Int ): Byte Overrides NDArray.getByte","title":"getByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / getDouble getDouble open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-double.html#getdouble","text":"open fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / getFloat getFloat open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-float.html#getfloat","text":"open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / getGeneric getGeneric open fun getGeneric(vararg indices: Int ): Short Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Short Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-generic.html#getgeneric","text":"open fun getGeneric(vararg indices: Int ): Short Overrides NDArray.getGeneric open fun getGeneric(i: Int ): Short Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / getInt getInt open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-int.html#getint","text":"open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / getLong getLong open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"Get long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-long.html#getlong","text":"open fun getLong(i: Int ): Long Overrides NDArray.getLong","title":"getLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / getShort getShort open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"Get short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/get-short.html#getshort","text":"open fun getShort(i: Int ): Short Overrides NDArray.getShort","title":"getShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-byte.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / setByte setByte open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"Set byte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-byte.html#setbyte","text":"open fun setByte(i: Int , v: Byte ): Unit Overrides NDArray.setByte","title":"setByte"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-double.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / setDouble setDouble open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-double.html#setdouble","text":"open fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-float.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / setFloat setFloat open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-float.html#setfloat","text":"open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / setGeneric setGeneric open fun setGeneric(i: Int , value: Short ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Short ): Unit Overrides NDArray.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-generic.html#setgeneric","text":"open fun setGeneric(i: Int , value: Short ): Unit Overrides NDArray.setGeneric open fun setGeneric(vararg indices: Int , value: Short ): Unit Overrides NDArray.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-int.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / setInt setInt open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-int.html#setint","text":"open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-long.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / setLong setLong open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"Set long"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-long.html#setlong","text":"open fun setLong(i: Int , v: Long ): Unit Overrides NDArray.setLong","title":"setLong"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-short.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / setShort setShort open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"Set short"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/set-short.html#setshort","text":"open fun setShort(i: Int , v: Short ): Unit Overrides NDArray.setShort","title":"setShort"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/shape.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / shape shape open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"Shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/shape.html#shape","text":"open fun shape(): List < Int > Overrides NDArray.shape protected vararg val shape: IntArray A vararg specifying the size of each dimension, e.g. a 3D array with size 4x6x8 would pass in 4,6,8)","title":"shape"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/size.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArray / size size open val size: Int Overrides NDArray.size","title":"Size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array/size.html#size","text":"open val size: Int Overrides NDArray.size","title":"size"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/index.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArrayFactory DefaultShortNDArrayFactory class DefaultShortNDArrayFactory : NumericalNDArrayFactory < Short > Constructors Name Summary <init> DefaultShortNDArrayFactory() Functions Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Short ): DefaultShortNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultShortNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultShortNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultShortNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultShortNDArray Generate a zero initialized ND container of the requested shape Extension Functions Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > fun NumericalNDArrayFactory < Short >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Short ): NDArray < Short >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/index.html#defaultshortndarrayfactory","text":"class DefaultShortNDArrayFactory : NumericalNDArrayFactory < Short >","title":"DefaultShortNDArrayFactory"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/index.html#constructors","text":"Name Summary <init> DefaultShortNDArrayFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/index.html#functions","text":"Name Summary createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Short ): DefaultShortNDArray Generate an ND container of the requested shape without initializing its contents. ones fun ones(vararg lengths: Int ): DefaultShortNDArray Creates a 1 initialized ND container of the requested shape rand fun rand(vararg lengths: Int ): DefaultShortNDArray Creates a ND container of uniform 0-1 random samples randn fun randn(vararg lengths: Int ): DefaultShortNDArray Creates a ND container of unit-normal random samples zeros fun zeros(vararg lengths: Int ): DefaultShortNDArray Generate a zero initialized ND container of the requested shape","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/index.html#extension-functions","text":"Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > fun NumericalNDArrayFactory < Short >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Short ): NDArray < Short >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/-init-.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArrayFactory / <init> <init> DefaultShortNDArrayFactory()","title":" init "},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/-init-.html#init","text":"DefaultShortNDArrayFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/create-generic.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArrayFactory / createGeneric createGeneric fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Short ): DefaultShortNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"Create generic"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/create-generic.html#creategeneric","text":"fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> Short ): DefaultShortNDArray Overrides GenericNDArrayFactory.createGeneric Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"createGeneric"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/ones.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArrayFactory / ones ones fun ones(vararg lengths: Int ): DefaultShortNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/ones.html#ones","text":"fun ones(vararg lengths: Int ): DefaultShortNDArray Overrides NumericalNDArrayFactory.ones Creates a 1 initialized ND container of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/rand.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArrayFactory / rand rand fun rand(vararg lengths: Int ): DefaultShortNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/rand.html#rand","text":"fun rand(vararg lengths: Int ): DefaultShortNDArray Overrides NumericalNDArrayFactory.rand Creates a ND container of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/randn.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArrayFactory / randn randn fun randn(vararg lengths: Int ): DefaultShortNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/randn.html#randn","text":"fun randn(vararg lengths: Int ): DefaultShortNDArray Overrides NumericalNDArrayFactory.randn Creates a ND container of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/zeros.html","text":"api / koma.internal.default.generated.ndarray / DefaultShortNDArrayFactory / zeros zeros fun zeros(vararg lengths: Int ): DefaultShortNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"Zeros"},{"location":"Reference_API_Docs/koma.internal.default.generated.ndarray/-default-short-n-d-array-factory/zeros.html#zeros","text":"fun zeros(vararg lengths: Int ): DefaultShortNDArray Overrides NumericalNDArrayFactory.zeros Generate a zero initialized ND container of the requested shape","title":"zeros"},{"location":"Reference_API_Docs/koma.internal.default.utils/index.html","text":"api / koma.internal.default.utils Package koma.internal.default.utils Extensions for External Classes Name Summary kotlin.collections.List Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.utils/index.html#package-komainternaldefaultutils","text":"","title":"Package koma.internal.default.utils"},{"location":"Reference_API_Docs/koma.internal.default.utils/index.html#extensions-for-external-classes","text":"Name Summary kotlin.collections.List","title":"Extensions for External Classes"},{"location":"Reference_API_Docs/koma.internal.default.utils/index.html#functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.default.utils/check-indices.html","text":"api / koma.internal.default.utils / checkIndices checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray","title":"Check indices"},{"location":"Reference_API_Docs/koma.internal.default.utils/check-indices.html#checkindices","text":"fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray","title":"checkIndices"},{"location":"Reference_API_Docs/koma.internal.default.utils/check-linear-index.html","text":"api / koma.internal.default.utils / checkLinearIndex checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int","title":"Check linear index"},{"location":"Reference_API_Docs/koma.internal.default.utils/check-linear-index.html#checklinearindex","text":"fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int","title":"checkLinearIndex"},{"location":"Reference_API_Docs/koma.internal.default.utils/linear-to-n-idx.html","text":"api / koma.internal.default.utils / linearToNIdx linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear .","title":"Linear to n idx"},{"location":"Reference_API_Docs/koma.internal.default.utils/linear-to-n-idx.html#lineartonidx","text":"fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear .","title":"linearToNIdx"},{"location":"Reference_API_Docs/koma.internal.default.utils/n-idx-to-linear.html","text":"api / koma.internal.default.utils / nIdxToLinear nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array.","title":"N idx to linear"},{"location":"Reference_API_Docs/koma.internal.default.utils/n-idx-to-linear.html#nidxtolinear","text":"fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array.","title":"nIdxToLinear"},{"location":"Reference_API_Docs/koma.internal.default.utils/safe-n-idx-to-linear.html","text":"api / koma.internal.default.utils / safeNIdxToLinear safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int","title":"Safe n idx to linear"},{"location":"Reference_API_Docs/koma.internal.default.utils/safe-n-idx-to-linear.html#safenidxtolinear","text":"fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int","title":"safeNIdxToLinear"},{"location":"Reference_API_Docs/koma.internal.default.utils/width-of-dims.html","text":"api / koma.internal.default.utils / widthOfDims widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Width of dims"},{"location":"Reference_API_Docs/koma.internal.default.utils/width-of-dims.html#widthofdims","text":"fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"widthOfDims"},{"location":"Reference_API_Docs/koma.internal.default.utils/kotlin.collections.-list/index.html","text":"api / koma.internal.default.utils / kotlin.collections.List Extensions for kotlin.collections.List Name Summary accumulateRight fun <T> List < T >.accumulateRight(f: ( T , T ) -> T ): ArrayList < T > Similar to reduceRight, except the results of each stage are stored off into the output list instead of just the final result.","title":"Index"},{"location":"Reference_API_Docs/koma.internal.default.utils/kotlin.collections.-list/index.html#extensions-for-kotlincollectionslist","text":"Name Summary accumulateRight fun <T> List < T >.accumulateRight(f: ( T , T ) -> T ): ArrayList < T > Similar to reduceRight, except the results of each stage are stored off into the output list instead of just the final result.","title":"Extensions for kotlin.collections.List"},{"location":"Reference_API_Docs/koma.internal.default.utils/kotlin.collections.-list/accumulate-right.html","text":"api / koma.internal.default.utils / kotlin.collections.List / accumulateRight accumulateRight fun <T> List < T >.accumulateRight(f: ( T , T ) -> T ): ArrayList < T > Similar to reduceRight, except the results of each stage are stored off into the output list instead of just the final result.","title":"Accumulate right"},{"location":"Reference_API_Docs/koma.internal.default.utils/kotlin.collections.-list/accumulate-right.html#accumulateright","text":"fun <T> List < T >.accumulateRight(f: ( T , T ) -> T ): ArrayList < T > Similar to reduceRight, except the results of each stage are stored off into the output list instead of just the final result.","title":"accumulateRight"},{"location":"Reference_API_Docs/koma.internal.ports/index.html","text":"api / koma.internal.ports Package koma.internal.ports Functions Name Summary expm fun expm(matrix: Matrix < Double >): Matrix < Double > A backend agnostic implementation of the matrix exponential (i.e. e to the matrix).","title":"Index"},{"location":"Reference_API_Docs/koma.internal.ports/index.html#package-komainternalports","text":"","title":"Package koma.internal.ports"},{"location":"Reference_API_Docs/koma.internal.ports/index.html#functions","text":"Name Summary expm fun expm(matrix: Matrix < Double >): Matrix < Double > A backend agnostic implementation of the matrix exponential (i.e. e to the matrix).","title":"Functions"},{"location":"Reference_API_Docs/koma.internal.ports/expm.html","text":"api / koma.internal.ports / expm expm fun expm(matrix: Matrix < Double >): Matrix < Double > A backend agnostic implementation of the matrix exponential (i.e. e to the matrix).","title":"Expm"},{"location":"Reference_API_Docs/koma.internal.ports/expm.html#expm","text":"fun expm(matrix: Matrix < Double >): Matrix < Double > A backend agnostic implementation of the matrix exponential (i.e. e to the matrix).","title":"expm"},{"location":"Reference_API_Docs/koma.matrix/index.html","text":"api / koma.matrix Package koma.matrix Types Name Summary Matrix interface Matrix<T> : NDArray < T > A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see koma.ndarray.NDArray . MatrixFactory interface MatrixFactory<out T : Matrix <*>> A set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc. MatrixTypes object MatrixTypes Intended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T). Type Aliases Name Summary MatrixType typealias MatrixType<T> = () -> MatrixFactory < Matrix < T >> Properties Name Summary doubleFactory var ~~doubleFactory~~: MatrixFactory < Matrix < Double >> floatFactory var ~~floatFactory~~: MatrixFactory < Matrix < Float >> intFactory var ~~intFactory~~: MatrixFactory < Matrix < Int >>","title":"Index"},{"location":"Reference_API_Docs/koma.matrix/index.html#package-komamatrix","text":"","title":"Package koma.matrix"},{"location":"Reference_API_Docs/koma.matrix/index.html#types","text":"Name Summary Matrix interface Matrix<T> : NDArray < T > A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see koma.ndarray.NDArray . MatrixFactory interface MatrixFactory<out T : Matrix <*>> A set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc. MatrixTypes object MatrixTypes Intended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T).","title":"Types"},{"location":"Reference_API_Docs/koma.matrix/index.html#type-aliases","text":"Name Summary MatrixType typealias MatrixType<T> = () -> MatrixFactory < Matrix < T >>","title":"Type Aliases"},{"location":"Reference_API_Docs/koma.matrix/index.html#properties","text":"Name Summary doubleFactory var ~~doubleFactory~~: MatrixFactory < Matrix < Double >> floatFactory var ~~floatFactory~~: MatrixFactory < Matrix < Float >> intFactory var ~~intFactory~~: MatrixFactory < Matrix < Int >>","title":"Properties"},{"location":"Reference_API_Docs/koma.matrix/-matrix-type.html","text":"api / koma.matrix / MatrixType MatrixType typealias MatrixType<T> = () -> MatrixFactory < Matrix < T >>","title":" matrix type"},{"location":"Reference_API_Docs/koma.matrix/-matrix-type.html#matrixtype","text":"typealias MatrixType<T> = () -> MatrixFactory < Matrix < T >>","title":"MatrixType"},{"location":"Reference_API_Docs/koma.matrix/double-factory.html","text":"api / koma.matrix / doubleFactory doubleFactory var ~~doubleFactory~~: MatrixFactory < Matrix < Double >> Deprecated: Use Matrix.doubleFactory","title":"Double factory"},{"location":"Reference_API_Docs/koma.matrix/double-factory.html#doublefactory","text":"var ~~doubleFactory~~: MatrixFactory < Matrix < Double >> Deprecated: Use Matrix.doubleFactory","title":"doubleFactory"},{"location":"Reference_API_Docs/koma.matrix/float-factory.html","text":"api / koma.matrix / floatFactory floatFactory var ~~floatFactory~~: MatrixFactory < Matrix < Float >> Deprecated: Use Matrix.floatFactory","title":"Float factory"},{"location":"Reference_API_Docs/koma.matrix/float-factory.html#floatfactory","text":"var ~~floatFactory~~: MatrixFactory < Matrix < Float >> Deprecated: Use Matrix.floatFactory","title":"floatFactory"},{"location":"Reference_API_Docs/koma.matrix/int-factory.html","text":"api / koma.matrix / intFactory intFactory var ~~intFactory~~: MatrixFactory < Matrix < Int >> Deprecated: Use Matrix.intFactory","title":"Int factory"},{"location":"Reference_API_Docs/koma.matrix/int-factory.html#intfactory","text":"var ~~intFactory~~: MatrixFactory < Matrix < Int >> Deprecated: Use Matrix.intFactory","title":"intFactory"},{"location":"Reference_API_Docs/koma.matrix/-matrix/index.html","text":"api / koma.matrix / Matrix Matrix interface Matrix<T> : NDArray < T > A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see koma.ndarray.NDArray . Properties Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int Functions Name Summary LU abstract fun LU(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> LU Decomposition. Returns p, l, u matrices as a triple. QR abstract fun QR(): Pair < Matrix < T >, Matrix < T >> SVD abstract fun SVD(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> T open fun T(): Matrix < T > Transpose operator. argMax abstract fun argMax(): Int Row major 1D index. argMin abstract fun argMin(): Int Row major 1D index. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors chol abstract fun chol(): Matrix < T > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy abstract fun copy(): Matrix < T > Returns a copy of this matrix (same values, new memory) cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. det abstract fun det(): T Determinant of the matrix diag abstract fun diag(): Matrix < T > div abstract operator fun div(other: Int ): Matrix < T > abstract operator fun div(other: T ): Matrix < T > elementSum abstract fun elementSum(): T Sum of all the elements in the matrix. elementTimes abstract fun elementTimes(other: Matrix < T >): Matrix < T > Element-wise multiplication with another matrix epow abstract fun epow(other: T ): Matrix < T > Element-wise exponentiation of each element in the matrix abstract infix fun epow(other: Int ): Matrix < T > expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getBaseMatrix abstract fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getByte open fun getByte(vararg indices: Int ): Byte getCol abstract fun getCol(col: Int ): Matrix < T > getDouble abstract fun getDouble(i: Int , j: Int ): Double open fun getDouble(vararg indices: Int ): Double getDoubleData abstract fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory abstract fun getFactory(): MatrixFactory < Matrix < T >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getRow abstract fun getRow(row: Int ): Matrix < T > getShort open fun getShort(vararg indices: Int ): Short inv abstract fun inv(): Matrix < T > Matrix inverse (square matrices) mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. max abstract fun max(): T Maximum value contained in the matrix mean abstract fun mean(): T Mean (average) of all the elements in the matrix. min abstract fun min(): T Minimum value contained in the matrix minus abstract operator fun minus(other: T ): Matrix < T > abstract operator fun minus(other: Matrix < T >): Matrix < T > normF abstract fun normF(): T Frobenius normal of the matrix normIndP1 abstract fun normIndP1(): T Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols abstract fun numCols(): Int Number of columns in the matrix numRows abstract fun numRows(): Int Number of rows in the matrix pinv abstract fun pinv(): Matrix < T > Pseudo-inverse of (non-square) matrix plus abstract operator fun plus(other: T ): Matrix < T > abstract operator fun plus(other: Matrix < T >): Matrix < T > pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble abstract fun setDouble(i: Int , j: Int , v: Double ): Unit open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > solve abstract fun solve(other: Matrix < T >): Matrix < T > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times abstract operator fun times(other: Matrix < T >): Matrix < T > abstract operator fun times(other: T ): Matrix < T > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > trace abstract fun trace(): T The matrix trace. transpose abstract fun transpose(): Matrix < T > Transpose of the matrix unaryMinus abstract operator fun unaryMinus(): Matrix < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange Inherited Functions Name Summary getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric abstract fun getGeneric(i: Int ): T getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric abstract fun setGeneric(i: Int , v: T ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Companion Object Properties Name Summary doubleFactory var doubleFactory: MatrixFactory < Matrix < Double >> Default factory that all top-level functions use when building new matrices. Double precision. floatFactory var floatFactory: MatrixFactory < Matrix < Float >> Default factory that all top-level functions use when building new matrices. Single precision. intFactory var intFactory: MatrixFactory < Matrix < Int >> Default factory that all top-level functions use when building new matrices. Integer matrices. Companion Object Functions Name Summary invoke operator fun <T> invoke(rows: Int , cols: Int , filler: ( Int , Int ) -> T ): Matrix < T > Extension Functions Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun Matrix < Float >.all(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.all(f: ( Int ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean fun Matrix < Float >.allClose(other: Matrix < Float >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun Matrix < Float >.any(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.any(f: ( Int ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun Matrix < Float >.fill(f: (row: Int , col: Int ) -> Float ): Matrix < Float > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > fun Matrix < Int >.fill(f: (row: Int , col: Int ) -> Int ): Matrix < Int > Fills the matrix with the values returned by the input function. fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun Matrix < Double >.forEach(f: ( Double ) -> Unit ): Unit fun Matrix < Float >.forEach(f: ( Float ) -> Unit ): Unit fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit fun Matrix < Int >.forEach(f: ( Int ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun Matrix < Float >.forEachIndexed(f: (row: Int , col: Int , ele: Float ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit fun Matrix < Int >.forEachIndexed(f: (row: Int , col: Int , ele: Int ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun Matrix < Double >.get(i: Int , j: Int ): Double operator fun Matrix < Float >.get(i: Int , j: Int ): Float operator fun <T> Matrix < T >.get(i: Int , j: Int ): T operator fun Matrix < Int >.get(i: Int , j: Int ): Int operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T operator fun Matrix < Double >.get(i: Int ): Double operator fun Matrix < Float >.get(i: Int ): Float operator fun <T> Matrix < T >.get(i: Int ): T operator fun Matrix < Int >.get(i: Int ): Int Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.get(rows: IntRange , cols: IntRange ): Matrix < Double > operator fun Matrix < Float >.get(rows: IntRange , cols: IntRange ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: IntRange , cols: IntRange ): Matrix < T > operator fun Matrix < Int >.get(rows: IntRange , cols: IntRange ): Matrix < Int > Allow slicing, e.g. matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.get(rows: IntRange , cols: Int ): Matrix < Double > operator fun Matrix < Float >.get(rows: IntRange , cols: Int ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: IntRange , cols: Int ): Matrix < T > operator fun Matrix < Int >.get(rows: IntRange , cols: Int ): Matrix < Int > Allows for slicing of the rows and selection of a single column operator fun Matrix < Double >.get(rows: Int , cols: IntRange ): Matrix < Double > operator fun Matrix < Float >.get(rows: Int , cols: IntRange ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: Int , cols: IntRange ): Matrix < T > operator fun Matrix < Int >.get(rows: Int , cols: IntRange ): Matrix < Int > Allows for slicing of the cols and selection of a single row linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun Matrix < Double >.map(f: ( Double ) -> Double ): Matrix < Double > fun Matrix < Float >.map(f: ( Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > fun Matrix < Int >.map(f: ( Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun Matrix < Float >.mapIndexed(f: (row: Int , col: Int , ele: Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > fun Matrix < Int >.mapIndexed(f: (row: Int , col: Int , ele: Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars reshape fun <T> Matrix < T >.reshape(rows: Int , cols: Int ): Matrix < T > Returns a new Matrix with the given shape, populated with the data in this array. fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun Matrix < Float >.set(i: Int , v: Float ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit operator fun Matrix < Int >.set(i: Int , v: Int ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Float ): Unit operator fun Matrix < Float >.set(i: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun Matrix < Int >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Int ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int > Inheritors Name Summary CBlasMatrix class CBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using raw cblas calls. DefaultDoubleMatrix class DefaultDoubleMatrix : Matrix < Double > DefaultFloatMatrix class DefaultFloatMatrix : Matrix < Float > DefaultIntMatrix class DefaultIntMatrix : Matrix < Int > EJMLMatrix class EJMLMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . JBlasMatrix class JBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . MTJMatrix class MTJMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory . MatrixBase abstract class MatrixBase<T> : Matrix < T >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix/-matrix/index.html#matrix","text":"interface Matrix<T> : NDArray < T > A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see koma.ndarray.NDArray .","title":"Matrix"},{"location":"Reference_API_Docs/koma.matrix/-matrix/index.html#properties","text":"Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int","title":"Properties"},{"location":"Reference_API_Docs/koma.matrix/-matrix/index.html#functions","text":"Name Summary LU abstract fun LU(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> LU Decomposition. Returns p, l, u matrices as a triple. QR abstract fun QR(): Pair < Matrix < T >, Matrix < T >> SVD abstract fun SVD(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> T open fun T(): Matrix < T > Transpose operator. argMax abstract fun argMax(): Int Row major 1D index. argMin abstract fun argMin(): Int Row major 1D index. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors chol abstract fun chol(): Matrix < T > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy abstract fun copy(): Matrix < T > Returns a copy of this matrix (same values, new memory) cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. det abstract fun det(): T Determinant of the matrix diag abstract fun diag(): Matrix < T > div abstract operator fun div(other: Int ): Matrix < T > abstract operator fun div(other: T ): Matrix < T > elementSum abstract fun elementSum(): T Sum of all the elements in the matrix. elementTimes abstract fun elementTimes(other: Matrix < T >): Matrix < T > Element-wise multiplication with another matrix epow abstract fun epow(other: T ): Matrix < T > Element-wise exponentiation of each element in the matrix abstract infix fun epow(other: Int ): Matrix < T > expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getBaseMatrix abstract fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getByte open fun getByte(vararg indices: Int ): Byte getCol abstract fun getCol(col: Int ): Matrix < T > getDouble abstract fun getDouble(i: Int , j: Int ): Double open fun getDouble(vararg indices: Int ): Double getDoubleData abstract fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory abstract fun getFactory(): MatrixFactory < Matrix < T >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getRow abstract fun getRow(row: Int ): Matrix < T > getShort open fun getShort(vararg indices: Int ): Short inv abstract fun inv(): Matrix < T > Matrix inverse (square matrices) mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. max abstract fun max(): T Maximum value contained in the matrix mean abstract fun mean(): T Mean (average) of all the elements in the matrix. min abstract fun min(): T Minimum value contained in the matrix minus abstract operator fun minus(other: T ): Matrix < T > abstract operator fun minus(other: Matrix < T >): Matrix < T > normF abstract fun normF(): T Frobenius normal of the matrix normIndP1 abstract fun normIndP1(): T Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols abstract fun numCols(): Int Number of columns in the matrix numRows abstract fun numRows(): Int Number of rows in the matrix pinv abstract fun pinv(): Matrix < T > Pseudo-inverse of (non-square) matrix plus abstract operator fun plus(other: T ): Matrix < T > abstract operator fun plus(other: Matrix < T >): Matrix < T > pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble abstract fun setDouble(i: Int , j: Int , v: Double ): Unit open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > solve abstract fun solve(other: Matrix < T >): Matrix < T > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times abstract operator fun times(other: Matrix < T >): Matrix < T > abstract operator fun times(other: T ): Matrix < T > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > trace abstract fun trace(): T The matrix trace. transpose abstract fun transpose(): Matrix < T > Transpose of the matrix unaryMinus abstract operator fun unaryMinus(): Matrix < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix/-matrix/index.html#inherited-functions","text":"Name Summary getByte open fun getByte(i: Int ): Byte getDouble open fun getDouble(i: Int ): Double getFloat open fun getFloat(i: Int ): Float getGeneric abstract fun getGeneric(i: Int ): T getInt open fun getInt(i: Int ): Int getLong open fun getLong(i: Int ): Long getShort open fun getShort(i: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit setGeneric abstract fun setGeneric(i: Int , v: T ): Unit setInt open fun setInt(i: Int , v: Int ): Unit setLong open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(i: Int , v: Short ): Unit toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix/-matrix/index.html#companion-object-properties","text":"Name Summary doubleFactory var doubleFactory: MatrixFactory < Matrix < Double >> Default factory that all top-level functions use when building new matrices. Double precision. floatFactory var floatFactory: MatrixFactory < Matrix < Float >> Default factory that all top-level functions use when building new matrices. Single precision. intFactory var intFactory: MatrixFactory < Matrix < Int >> Default factory that all top-level functions use when building new matrices. Integer matrices.","title":"Companion Object Properties"},{"location":"Reference_API_Docs/koma.matrix/-matrix/index.html#companion-object-functions","text":"Name Summary invoke operator fun <T> invoke(rows: Int , cols: Int , filler: ( Int , Int ) -> T ): Matrix < T >","title":"Companion Object Functions"},{"location":"Reference_API_Docs/koma.matrix/-matrix/index.html#extension-functions","text":"Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun Matrix < Float >.all(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.all(f: ( Int ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean fun Matrix < Float >.allClose(other: Matrix < Float >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun Matrix < Float >.any(f: ( Float ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean fun Matrix < Int >.any(f: ( Int ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun Matrix < Float >.fill(f: (row: Int , col: Int ) -> Float ): Matrix < Float > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > fun Matrix < Int >.fill(f: (row: Int , col: Int ) -> Int ): Matrix < Int > Fills the matrix with the values returned by the input function. fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun Matrix < Double >.forEach(f: ( Double ) -> Unit ): Unit fun Matrix < Float >.forEach(f: ( Float ) -> Unit ): Unit fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit fun Matrix < Int >.forEach(f: ( Int ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun Matrix < Float >.forEachIndexed(f: (row: Int , col: Int , ele: Float ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit fun Matrix < Int >.forEachIndexed(f: (row: Int , col: Int , ele: Int ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun Matrix < Double >.get(i: Int , j: Int ): Double operator fun Matrix < Float >.get(i: Int , j: Int ): Float operator fun <T> Matrix < T >.get(i: Int , j: Int ): T operator fun Matrix < Int >.get(i: Int , j: Int ): Int operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T operator fun Matrix < Double >.get(i: Int ): Double operator fun Matrix < Float >.get(i: Int ): Float operator fun <T> Matrix < T >.get(i: Int ): T operator fun Matrix < Int >.get(i: Int ): Int Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.get(rows: IntRange , cols: IntRange ): Matrix < Double > operator fun Matrix < Float >.get(rows: IntRange , cols: IntRange ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: IntRange , cols: IntRange ): Matrix < T > operator fun Matrix < Int >.get(rows: IntRange , cols: IntRange ): Matrix < Int > Allow slicing, e.g. matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.get(rows: IntRange , cols: Int ): Matrix < Double > operator fun Matrix < Float >.get(rows: IntRange , cols: Int ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: IntRange , cols: Int ): Matrix < T > operator fun Matrix < Int >.get(rows: IntRange , cols: Int ): Matrix < Int > Allows for slicing of the rows and selection of a single column operator fun Matrix < Double >.get(rows: Int , cols: IntRange ): Matrix < Double > operator fun Matrix < Float >.get(rows: Int , cols: IntRange ): Matrix < Float > operator fun <T> Matrix < T >.get(rows: Int , cols: IntRange ): Matrix < T > operator fun Matrix < Int >.get(rows: Int , cols: IntRange ): Matrix < Int > Allows for slicing of the cols and selection of a single row linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun Matrix < Double >.map(f: ( Double ) -> Double ): Matrix < Double > fun Matrix < Float >.map(f: ( Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > fun Matrix < Int >.map(f: ( Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun Matrix < Float >.mapIndexed(f: (row: Int , col: Int , ele: Float ) -> Float ): Matrix < Float > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > fun Matrix < Int >.mapIndexed(f: (row: Int , col: Int , ele: Int ) -> Int ): Matrix < Int > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars reshape fun <T> Matrix < T >.reshape(rows: Int , cols: Int ): Matrix < T > Returns a new Matrix with the given shape, populated with the data in this array. fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun Matrix < Float >.set(i: Int , v: Float ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit operator fun Matrix < Int >.set(i: Int , v: Int ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Float ): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Float ): Unit operator fun Matrix < Float >.set(i: Int , v: Int ): Unit operator fun Matrix < Float >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun Matrix < Int >.set(i: Int , j: Int , v: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Int ): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Int ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: Int , cols: IntRange , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: Int , cols: IntRange , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun Matrix < Float >.set(rows: IntRange , cols: Int , value: Matrix < Float >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit operator fun Matrix < Int >.set(rows: IntRange , cols: Int , value: Matrix < Int >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.matrix/-matrix/index.html#inheritors","text":"Name Summary CBlasMatrix class CBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using raw cblas calls. DefaultDoubleMatrix class DefaultDoubleMatrix : Matrix < Double > DefaultFloatMatrix class DefaultFloatMatrix : Matrix < Float > DefaultIntMatrix class DefaultIntMatrix : Matrix < Int > EJMLMatrix class EJMLMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . JBlasMatrix class JBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . MTJMatrix class MTJMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory . MatrixBase abstract class MatrixBase<T> : Matrix < T >","title":"Inheritors"},{"location":"Reference_API_Docs/koma.matrix/-matrix/-l-u.html","text":"api / koma.matrix / Matrix / LU LU abstract fun LU(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> LU Decomposition. Returns p, l, u matrices as a triple.","title":" l u"},{"location":"Reference_API_Docs/koma.matrix/-matrix/-l-u.html#lu","text":"abstract fun LU(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> LU Decomposition. Returns p, l, u matrices as a triple.","title":"LU"},{"location":"Reference_API_Docs/koma.matrix/-matrix/-q-r.html","text":"api / koma.matrix / Matrix / QR QR abstract fun QR(): Pair < Matrix < T >, Matrix < T >>","title":" q r"},{"location":"Reference_API_Docs/koma.matrix/-matrix/-q-r.html#qr","text":"abstract fun QR(): Pair < Matrix < T >, Matrix < T >>","title":"QR"},{"location":"Reference_API_Docs/koma.matrix/-matrix/-s-v-d.html","text":"api / koma.matrix / Matrix / SVD SVD abstract fun SVD(): Triple < Matrix < T >, Matrix < T >, Matrix < T >>","title":" s v d"},{"location":"Reference_API_Docs/koma.matrix/-matrix/-s-v-d.html#svd","text":"abstract fun SVD(): Triple < Matrix < T >, Matrix < T >, Matrix < T >>","title":"SVD"},{"location":"Reference_API_Docs/koma.matrix/-matrix/-t.html","text":"api / koma.matrix / Matrix / T T open fun T(): Matrix < T > open val T: Matrix < T > Transpose operator.","title":" t"},{"location":"Reference_API_Docs/koma.matrix/-matrix/-t.html#t","text":"open fun T(): Matrix < T > open val T: Matrix < T > Transpose operator.","title":"T"},{"location":"Reference_API_Docs/koma.matrix/-matrix/arg-max.html","text":"api / koma.matrix / Matrix / argMax argMax abstract fun argMax(): Int Row major 1D index.","title":"Arg max"},{"location":"Reference_API_Docs/koma.matrix/-matrix/arg-max.html#argmax","text":"abstract fun argMax(): Int Row major 1D index.","title":"argMax"},{"location":"Reference_API_Docs/koma.matrix/-matrix/arg-min.html","text":"api / koma.matrix / Matrix / argMin argMin abstract fun argMin(): Int Row major 1D index.","title":"Arg min"},{"location":"Reference_API_Docs/koma.matrix/-matrix/arg-min.html#argmin","text":"abstract fun argMin(): Int Row major 1D index.","title":"argMin"},{"location":"Reference_API_Docs/koma.matrix/-matrix/as-col-vector.html","text":"api / koma.matrix / Matrix / asColVector asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors","title":"As col vector"},{"location":"Reference_API_Docs/koma.matrix/-matrix/as-col-vector.html#ascolvector","text":"open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors","title":"asColVector"},{"location":"Reference_API_Docs/koma.matrix/-matrix/as-row-vector.html","text":"api / koma.matrix / Matrix / asRowVector asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors","title":"As row vector"},{"location":"Reference_API_Docs/koma.matrix/-matrix/as-row-vector.html#asrowvector","text":"open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors","title":"asRowVector"},{"location":"Reference_API_Docs/koma.matrix/-matrix/chol.html","text":"api / koma.matrix / Matrix / chol chol abstract fun chol(): Matrix < T > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"Chol"},{"location":"Reference_API_Docs/koma.matrix/-matrix/chol.html#chol","text":"abstract fun chol(): Matrix < T > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"chol"},{"location":"Reference_API_Docs/koma.matrix/-matrix/copy.html","text":"api / koma.matrix / Matrix / copy copy abstract fun copy(): Matrix < T > Overrides NDArray.copy Returns a copy of this matrix (same values, new memory)","title":"Copy"},{"location":"Reference_API_Docs/koma.matrix/-matrix/copy.html#copy","text":"abstract fun copy(): Matrix < T > Overrides NDArray.copy Returns a copy of this matrix (same values, new memory)","title":"copy"},{"location":"Reference_API_Docs/koma.matrix/-matrix/cum-sum.html","text":"api / koma.matrix / Matrix / cumSum cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. @return A 1xarr.numRows*arr.numCols vector storing the ongoing cumsum.","title":"Cum sum"},{"location":"Reference_API_Docs/koma.matrix/-matrix/cum-sum.html#cumsum","text":"open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. @return A 1xarr.numRows*arr.numCols vector storing the ongoing cumsum.","title":"cumSum"},{"location":"Reference_API_Docs/koma.matrix/-matrix/det.html","text":"api / koma.matrix / Matrix / det det abstract fun det(): T Determinant of the matrix","title":"Det"},{"location":"Reference_API_Docs/koma.matrix/-matrix/det.html#det","text":"abstract fun det(): T Determinant of the matrix","title":"det"},{"location":"Reference_API_Docs/koma.matrix/-matrix/diag.html","text":"api / koma.matrix / Matrix / diag diag abstract fun diag(): Matrix < T >","title":"Diag"},{"location":"Reference_API_Docs/koma.matrix/-matrix/diag.html#diag","text":"abstract fun diag(): Matrix < T >","title":"diag"},{"location":"Reference_API_Docs/koma.matrix/-matrix/div.html","text":"api / koma.matrix / Matrix / div div abstract operator fun div(other: Int ): Matrix < T > abstract operator fun div(other: T ): Matrix < T >","title":"Div"},{"location":"Reference_API_Docs/koma.matrix/-matrix/div.html#div","text":"abstract operator fun div(other: Int ): Matrix < T > abstract operator fun div(other: T ): Matrix < T >","title":"div"},{"location":"Reference_API_Docs/koma.matrix/-matrix/double-factory.html","text":"api / koma.matrix / Matrix / doubleFactory doubleFactory var doubleFactory: MatrixFactory < Matrix < Double >> Default factory that all top-level functions use when building new matrices. Double precision. Replace this factory at runtime with e.g. koma.matrix.ejml.EJMLMatrixFactory() to change what backend the top-level functions use for computation.","title":"Double factory"},{"location":"Reference_API_Docs/koma.matrix/-matrix/double-factory.html#doublefactory","text":"var doubleFactory: MatrixFactory < Matrix < Double >> Default factory that all top-level functions use when building new matrices. Double precision. Replace this factory at runtime with e.g. koma.matrix.ejml.EJMLMatrixFactory() to change what backend the top-level functions use for computation.","title":"doubleFactory"},{"location":"Reference_API_Docs/koma.matrix/-matrix/element-sum.html","text":"api / koma.matrix / Matrix / elementSum elementSum abstract fun elementSum(): T Sum of all the elements in the matrix.","title":"Element sum"},{"location":"Reference_API_Docs/koma.matrix/-matrix/element-sum.html#elementsum","text":"abstract fun elementSum(): T Sum of all the elements in the matrix.","title":"elementSum"},{"location":"Reference_API_Docs/koma.matrix/-matrix/element-times.html","text":"api / koma.matrix / Matrix / elementTimes elementTimes abstract fun elementTimes(other: Matrix < T >): Matrix < T > Element-wise multiplication with another matrix","title":"Element times"},{"location":"Reference_API_Docs/koma.matrix/-matrix/element-times.html#elementtimes","text":"abstract fun elementTimes(other: Matrix < T >): Matrix < T > Element-wise multiplication with another matrix","title":"elementTimes"},{"location":"Reference_API_Docs/koma.matrix/-matrix/epow.html","text":"api / koma.matrix / Matrix / epow epow abstract fun epow(other: T ): Matrix < T > Element-wise exponentiation of each element in the matrix abstract infix fun epow(other: Int ): Matrix < T >","title":"Epow"},{"location":"Reference_API_Docs/koma.matrix/-matrix/epow.html#epow","text":"abstract fun epow(other: T ): Matrix < T > Element-wise exponentiation of each element in the matrix abstract infix fun epow(other: Int ): Matrix < T >","title":"epow"},{"location":"Reference_API_Docs/koma.matrix/-matrix/expm.html","text":"api / koma.matrix / Matrix / expm expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise)","title":"Expm"},{"location":"Reference_API_Docs/koma.matrix/-matrix/expm.html#expm","text":"abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise)","title":"expm"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-cols-indexed.html","text":"api / koma.matrix / Matrix / filterColsIndexed filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. Parameters f - A function which takes a column index and a column, and returns true if that column should be included in the output matrix.","title":"Filter cols indexed"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-cols-indexed.html#filtercolsindexed","text":"open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true.","title":"filterColsIndexed"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-cols-indexed.html#parameters","text":"f - A function which takes a column index and a column, and returns true if that column should be included in the output matrix.","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-cols.html","text":"api / koma.matrix / Matrix / filterCols filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. Parameters f - A function which takes a column and returns true if that column should be included in the output matrix.","title":"Filter cols"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-cols.html#filtercols","text":"open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true.","title":"filterCols"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-cols.html#parameters","text":"f - A function which takes a column and returns true if that column should be included in the output matrix.","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-rows-indexed.html","text":"api / koma.matrix / Matrix / filterRowsIndexed filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. Parameters f - A function which takes a row index and a row, and returns true if that row should be included in the output matrix.","title":"Filter rows indexed"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-rows-indexed.html#filterrowsindexed","text":"open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true.","title":"filterRowsIndexed"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-rows-indexed.html#parameters","text":"f - A function which takes a row index and a row, and returns true if that row should be included in the output matrix.","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-rows.html","text":"api / koma.matrix / Matrix / filterRows filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. Parameters f - A function which takes a row and returns true if that row should be be included in the output matrix.","title":"Filter rows"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-rows.html#filterrows","text":"open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true.","title":"filterRows"},{"location":"Reference_API_Docs/koma.matrix/-matrix/filter-rows.html#parameters","text":"f - A function which takes a row and returns true if that row should be be included in the output matrix.","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/float-factory.html","text":"api / koma.matrix / Matrix / floatFactory floatFactory var floatFactory: MatrixFactory < Matrix < Float >> Default factory that all top-level functions use when building new matrices. Single precision. Replace this factory at runtime with another to change what backend the top-level functions use for computation.","title":"Float factory"},{"location":"Reference_API_Docs/koma.matrix/-matrix/float-factory.html#floatfactory","text":"var floatFactory: MatrixFactory < Matrix < Float >> Default factory that all top-level functions use when building new matrices. Single precision. Replace this factory at runtime with another to change what backend the top-level functions use for computation.","title":"floatFactory"},{"location":"Reference_API_Docs/koma.matrix/-matrix/for-each-col.html","text":"api / koma.matrix / Matrix / forEachCol forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. Parameters f - A function that takes in a row (i.e. 1xN matrix)","title":"For each col"},{"location":"Reference_API_Docs/koma.matrix/-matrix/for-each-col.html#foreachcol","text":"open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function.","title":"forEachCol"},{"location":"Reference_API_Docs/koma.matrix/-matrix/for-each-col.html#parameters","text":"f - A function that takes in a row (i.e. 1xN matrix)","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/for-each-row.html","text":"api / koma.matrix / Matrix / forEachRow forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. Parameters f - A function that takes in a row (i.e. 1xN matrix)","title":"For each row"},{"location":"Reference_API_Docs/koma.matrix/-matrix/for-each-row.html#foreachrow","text":"open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function.","title":"forEachRow"},{"location":"Reference_API_Docs/koma.matrix/-matrix/for-each-row.html#parameters","text":"f - A function that takes in a row (i.e. 1xN matrix)","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-base-array.html","text":"api / koma.matrix / Matrix / getBaseArray getBaseArray open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"Get base array"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-base-array.html#getbasearray","text":"open fun getBaseArray(): Any Overrides NDArray.getBaseArray","title":"getBaseArray"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-base-matrix.html","text":"api / koma.matrix / Matrix / getBaseMatrix getBaseMatrix abstract fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"Get base matrix"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-base-matrix.html#getbasematrix","text":"abstract fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"getBaseMatrix"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-byte.html","text":"api / koma.matrix / Matrix / getByte getByte open fun getByte(vararg indices: Int ): Byte Overrides NDArray.getByte","title":"Get byte"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-byte.html#getbyte","text":"open fun getByte(vararg indices: Int ): Byte Overrides NDArray.getByte","title":"getByte"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-col.html","text":"api / koma.matrix / Matrix / getCol getCol abstract fun getCol(col: Int ): Matrix < T >","title":"Get col"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-col.html#getcol","text":"abstract fun getCol(col: Int ): Matrix < T >","title":"getCol"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-double-data.html","text":"api / koma.matrix / Matrix / getDoubleData getDoubleData abstract fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"Get double data"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-double-data.html#getdoubledata","text":"abstract fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"getDoubleData"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-double.html","text":"api / koma.matrix / Matrix / getDouble getDouble abstract fun getDouble(i: Int , j: Int ): Double open fun getDouble(vararg indices: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-double.html#getdouble","text":"abstract fun getDouble(i: Int , j: Int ): Double open fun getDouble(vararg indices: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-factory.html","text":"api / koma.matrix / Matrix / getFactory getFactory abstract fun getFactory(): MatrixFactory < Matrix < T >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"Get factory"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-factory.html#getfactory","text":"abstract fun getFactory(): MatrixFactory < Matrix < T >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"getFactory"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-float.html","text":"api / koma.matrix / Matrix / getFloat getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-float.html#getfloat","text":"abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-generic.html","text":"api / koma.matrix / Matrix / getGeneric getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T Overrides NDArray.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-generic.html#getgeneric","text":"abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T Overrides NDArray.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-int.html","text":"api / koma.matrix / Matrix / getInt getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-int.html#getint","text":"abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-linear.html","text":"api / koma.matrix / Matrix / getLinear getLinear open fun getLinear(index: Int ): T Overrides NDArray.getLinear","title":"Get linear"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-linear.html#getlinear","text":"open fun getLinear(index: Int ): T Overrides NDArray.getLinear","title":"getLinear"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-long.html","text":"api / koma.matrix / Matrix / getLong getLong open fun getLong(vararg indices: Int ): Long Overrides NDArray.getLong","title":"Get long"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-long.html#getlong","text":"open fun getLong(vararg indices: Int ): Long Overrides NDArray.getLong","title":"getLong"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-row.html","text":"api / koma.matrix / Matrix / getRow getRow abstract fun getRow(row: Int ): Matrix < T >","title":"Get row"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-row.html#getrow","text":"abstract fun getRow(row: Int ): Matrix < T >","title":"getRow"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-short.html","text":"api / koma.matrix / Matrix / getShort getShort open fun getShort(vararg indices: Int ): Short Overrides NDArray.getShort","title":"Get short"},{"location":"Reference_API_Docs/koma.matrix/-matrix/get-short.html#getshort","text":"open fun getShort(vararg indices: Int ): Short Overrides NDArray.getShort","title":"getShort"},{"location":"Reference_API_Docs/koma.matrix/-matrix/int-factory.html","text":"api / koma.matrix / Matrix / intFactory intFactory var intFactory: MatrixFactory < Matrix < Int >> Default factory that all top-level functions use when building new matrices. Integer matrices. Replace this factory at runtime with another to change what backend the top-level functions use for computation.","title":"Int factory"},{"location":"Reference_API_Docs/koma.matrix/-matrix/int-factory.html#intfactory","text":"var intFactory: MatrixFactory < Matrix < Int >> Default factory that all top-level functions use when building new matrices. Integer matrices. Replace this factory at runtime with another to change what backend the top-level functions use for computation.","title":"intFactory"},{"location":"Reference_API_Docs/koma.matrix/-matrix/inv.html","text":"api / koma.matrix / Matrix / inv inv abstract fun inv(): Matrix < T > Matrix inverse (square matrices)","title":"Inv"},{"location":"Reference_API_Docs/koma.matrix/-matrix/inv.html#inv","text":"abstract fun inv(): Matrix < T > Matrix inverse (square matrices)","title":"inv"},{"location":"Reference_API_Docs/koma.matrix/-matrix/invoke.html","text":"api / koma.matrix / Matrix / invoke invoke inline operator fun <reified T> invoke(rows: Int , cols: Int , crossinline filler: ( Int , Int ) -> T ): Matrix < T >","title":"Invoke"},{"location":"Reference_API_Docs/koma.matrix/-matrix/invoke.html#invoke","text":"inline operator fun <reified T> invoke(rows: Int , cols: Int , crossinline filler: ( Int , Int ) -> T ): Matrix < T >","title":"invoke"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-cols-to-list.html","text":"api / koma.matrix / Matrix / mapColsToList mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. Parameters f - A function that takes in a Nx1 col and returns a Mx1 col. Note that all output cols must be the same length.","title":"Map cols to list"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-cols-to-list.html#mapcolstolist","text":"open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings.","title":"mapColsToList"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-cols-to-list.html#parameters","text":"f - A function that takes in a Nx1 col and returns a Mx1 col. Note that all output cols must be the same length.","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-cols.html","text":"api / koma.matrix / Matrix / mapCols mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. Parameters f - A function that takes in a Nx1 col and returns a Mx1 col. Note that all output cols must be the same length. In addition, the input and output element types must be the same. Return the new matrix after each col is mapped through f","title":"Map cols"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-cols.html#mapcols","text":"open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix.","title":"mapCols"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-cols.html#parameters","text":"f - A function that takes in a Nx1 col and returns a Mx1 col. Note that all output cols must be the same length. In addition, the input and output element types must be the same. Return the new matrix after each col is mapped through f","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-rows-to-list.html","text":"api / koma.matrix / Matrix / mapRowsToList mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. Parameters f - A function that takes in a 1xN row and returns a 1xM row. Note that all output rows must be the same length.","title":"Map rows to list"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-rows-to-list.html#maprowstolist","text":"open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings.","title":"mapRowsToList"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-rows-to-list.html#parameters","text":"f - A function that takes in a 1xN row and returns a 1xM row. Note that all output rows must be the same length.","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-rows.html","text":"api / koma.matrix / Matrix / mapRows mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. Parameters f - A function that takes in a 1xN row and returns a 1xM row. Note that all output rows must be the same length. In addition, the input and output element types must be the same. Return the new matrix after each row is mapped through f","title":"Map rows"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-rows.html#maprows","text":"open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix.","title":"mapRows"},{"location":"Reference_API_Docs/koma.matrix/-matrix/map-rows.html#parameters","text":"f - A function that takes in a 1xN row and returns a 1xM row. Note that all output rows must be the same length. In addition, the input and output element types must be the same. Return the new matrix after each row is mapped through f","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix/-matrix/max.html","text":"api / koma.matrix / Matrix / max max abstract fun max(): T Maximum value contained in the matrix","title":"Max"},{"location":"Reference_API_Docs/koma.matrix/-matrix/max.html#max","text":"abstract fun max(): T Maximum value contained in the matrix","title":"max"},{"location":"Reference_API_Docs/koma.matrix/-matrix/mean.html","text":"api / koma.matrix / Matrix / mean mean abstract fun mean(): T Mean (average) of all the elements in the matrix.","title":"Mean"},{"location":"Reference_API_Docs/koma.matrix/-matrix/mean.html#mean","text":"abstract fun mean(): T Mean (average) of all the elements in the matrix.","title":"mean"},{"location":"Reference_API_Docs/koma.matrix/-matrix/min.html","text":"api / koma.matrix / Matrix / min min abstract fun min(): T Minimum value contained in the matrix","title":"Min"},{"location":"Reference_API_Docs/koma.matrix/-matrix/min.html#min","text":"abstract fun min(): T Minimum value contained in the matrix","title":"min"},{"location":"Reference_API_Docs/koma.matrix/-matrix/minus.html","text":"api / koma.matrix / Matrix / minus minus abstract operator fun minus(other: T ): Matrix < T > abstract operator fun minus(other: Matrix < T >): Matrix < T >","title":"Minus"},{"location":"Reference_API_Docs/koma.matrix/-matrix/minus.html#minus","text":"abstract operator fun minus(other: T ): Matrix < T > abstract operator fun minus(other: Matrix < T >): Matrix < T >","title":"minus"},{"location":"Reference_API_Docs/koma.matrix/-matrix/norm-f.html","text":"api / koma.matrix / Matrix / normF normF abstract fun normF(): T Frobenius normal of the matrix","title":"Norm f"},{"location":"Reference_API_Docs/koma.matrix/-matrix/norm-f.html#normf","text":"abstract fun normF(): T Frobenius normal of the matrix","title":"normF"},{"location":"Reference_API_Docs/koma.matrix/-matrix/norm-ind-p1.html","text":"api / koma.matrix / Matrix / normIndP1 normIndP1 abstract fun normIndP1(): T Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"Norm ind p1"},{"location":"Reference_API_Docs/koma.matrix/-matrix/norm-ind-p1.html#normindp1","text":"abstract fun normIndP1(): T Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"normIndP1"},{"location":"Reference_API_Docs/koma.matrix/-matrix/num-cols.html","text":"api / koma.matrix / Matrix / numCols numCols abstract fun numCols(): Int Number of columns in the matrix","title":"Num cols"},{"location":"Reference_API_Docs/koma.matrix/-matrix/num-cols.html#numcols","text":"abstract fun numCols(): Int Number of columns in the matrix","title":"numCols"},{"location":"Reference_API_Docs/koma.matrix/-matrix/num-rows.html","text":"api / koma.matrix / Matrix / numRows numRows abstract fun numRows(): Int Number of rows in the matrix","title":"Num rows"},{"location":"Reference_API_Docs/koma.matrix/-matrix/num-rows.html#numrows","text":"abstract fun numRows(): Int Number of rows in the matrix","title":"numRows"},{"location":"Reference_API_Docs/koma.matrix/-matrix/pinv.html","text":"api / koma.matrix / Matrix / pinv pinv abstract fun pinv(): Matrix < T > Pseudo-inverse of (non-square) matrix","title":"Pinv"},{"location":"Reference_API_Docs/koma.matrix/-matrix/pinv.html#pinv","text":"abstract fun pinv(): Matrix < T > Pseudo-inverse of (non-square) matrix","title":"pinv"},{"location":"Reference_API_Docs/koma.matrix/-matrix/plus.html","text":"api / koma.matrix / Matrix / plus plus abstract operator fun plus(other: T ): Matrix < T > abstract operator fun plus(other: Matrix < T >): Matrix < T >","title":"Plus"},{"location":"Reference_API_Docs/koma.matrix/-matrix/plus.html#plus","text":"abstract operator fun plus(other: T ): Matrix < T > abstract operator fun plus(other: Matrix < T >): Matrix < T >","title":"plus"},{"location":"Reference_API_Docs/koma.matrix/-matrix/pow.html","text":"api / koma.matrix / Matrix / pow pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication).","title":"Pow"},{"location":"Reference_API_Docs/koma.matrix/-matrix/pow.html#pow","text":"open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication).","title":"pow"},{"location":"Reference_API_Docs/koma.matrix/-matrix/repr.html","text":"api / koma.matrix / Matrix / repr repr open fun repr(): String","title":"Repr"},{"location":"Reference_API_Docs/koma.matrix/-matrix/repr.html#repr","text":"open fun repr(): String","title":"repr"},{"location":"Reference_API_Docs/koma.matrix/-matrix/select-cols.html","text":"api / koma.matrix / Matrix / selectCols selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T >","title":"Select cols"},{"location":"Reference_API_Docs/koma.matrix/-matrix/select-cols.html#selectcols","text":"open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T >","title":"selectCols"},{"location":"Reference_API_Docs/koma.matrix/-matrix/select-rows.html","text":"api / koma.matrix / Matrix / selectRows selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T >","title":"Select rows"},{"location":"Reference_API_Docs/koma.matrix/-matrix/select-rows.html#selectrows","text":"open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T >","title":"selectRows"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-byte.html","text":"api / koma.matrix / Matrix / setByte setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing Overrides NDArray.setByte","title":"Set byte"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-byte.html#setbyte","text":"open fun setByte(vararg indices: Int , value: Byte ): Nothing Overrides NDArray.setByte","title":"setByte"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-col.html","text":"api / koma.matrix / Matrix / setCol setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit","title":"Set col"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-col.html#setcol","text":"abstract fun setCol(index: Int , col: Matrix < T >): Unit","title":"setCol"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-double.html","text":"api / koma.matrix / Matrix / setDouble setDouble abstract fun setDouble(i: Int , j: Int , v: Double ): Unit open fun setDouble(vararg indices: Int , value: Double ): Unit Overrides NDArray.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-double.html#setdouble","text":"abstract fun setDouble(i: Int , j: Int , v: Double ): Unit open fun setDouble(vararg indices: Int , value: Double ): Unit Overrides NDArray.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-float.html","text":"api / koma.matrix / Matrix / setFloat setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit Overrides NDArray.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-float.html#setfloat","text":"abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit Overrides NDArray.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-generic.html","text":"api / koma.matrix / Matrix / setGeneric setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit Overrides NDArray.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-generic.html#setgeneric","text":"abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit Overrides NDArray.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-int.html","text":"api / koma.matrix / Matrix / setInt setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit Overrides NDArray.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-int.html#setint","text":"abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit Overrides NDArray.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-linear.html","text":"api / koma.matrix / Matrix / setLinear setLinear open fun setLinear(index: Int , value: T ): Unit Overrides NDArray.setLinear","title":"Set linear"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-linear.html#setlinear","text":"open fun setLinear(index: Int , value: T ): Unit Overrides NDArray.setLinear","title":"setLinear"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-long.html","text":"api / koma.matrix / Matrix / setLong setLong open fun setLong(vararg indices: Int , value: Long ): Nothing Overrides NDArray.setLong","title":"Set long"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-long.html#setlong","text":"open fun setLong(vararg indices: Int , value: Long ): Nothing Overrides NDArray.setLong","title":"setLong"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-row.html","text":"api / koma.matrix / Matrix / setRow setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit","title":"Set row"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-row.html#setrow","text":"abstract fun setRow(index: Int , row: Matrix < T >): Unit","title":"setRow"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-short.html","text":"api / koma.matrix / Matrix / setShort setShort open fun setShort(vararg indices: Int , value: Short ): Nothing Overrides NDArray.setShort","title":"Set short"},{"location":"Reference_API_Docs/koma.matrix/-matrix/set-short.html#setshort","text":"open fun setShort(vararg indices: Int , value: Short ): Nothing Overrides NDArray.setShort","title":"setShort"},{"location":"Reference_API_Docs/koma.matrix/-matrix/shape.html","text":"api / koma.matrix / Matrix / shape shape open fun shape(): List < Int > Overrides NDArray.shape","title":"Shape"},{"location":"Reference_API_Docs/koma.matrix/-matrix/shape.html#shape","text":"open fun shape(): List < Int > Overrides NDArray.shape","title":"shape"},{"location":"Reference_API_Docs/koma.matrix/-matrix/size.html","text":"api / koma.matrix / Matrix / size size open val size: Int Overrides NDArray.size","title":"Size"},{"location":"Reference_API_Docs/koma.matrix/-matrix/size.html#size","text":"open val size: Int Overrides NDArray.size","title":"size"},{"location":"Reference_API_Docs/koma.matrix/-matrix/solve.html","text":"api / koma.matrix / Matrix / solve solve abstract fun solve(other: Matrix < T >): Matrix < T > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"Solve"},{"location":"Reference_API_Docs/koma.matrix/-matrix/solve.html#solve","text":"abstract fun solve(other: Matrix < T >): Matrix < T > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"solve"},{"location":"Reference_API_Docs/koma.matrix/-matrix/times.html","text":"api / koma.matrix / Matrix / times times abstract operator fun times(other: Matrix < T >): Matrix < T > abstract operator fun times(other: T ): Matrix < T >","title":"Times"},{"location":"Reference_API_Docs/koma.matrix/-matrix/times.html#times","text":"abstract operator fun times(other: Matrix < T >): Matrix < T > abstract operator fun times(other: T ): Matrix < T >","title":"times"},{"location":"Reference_API_Docs/koma.matrix/-matrix/to-iterable.html","text":"api / koma.matrix / Matrix / toIterable toIterable open fun toIterable(): Iterable < T > Overrides NDArray.toIterable","title":"To iterable"},{"location":"Reference_API_Docs/koma.matrix/-matrix/to-iterable.html#toiterable","text":"open fun toIterable(): Iterable < T > Overrides NDArray.toIterable","title":"toIterable"},{"location":"Reference_API_Docs/koma.matrix/-matrix/to2-d-array.html","text":"api / koma.matrix / Matrix / to2DArray to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. Return a 2D array copy of the matrix.","title":"To2 d array"},{"location":"Reference_API_Docs/koma.matrix/-matrix/to2-d-array.html#to2darray","text":"open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. Return a 2D array copy of the matrix.","title":"to2DArray"},{"location":"Reference_API_Docs/koma.matrix/-matrix/trace.html","text":"api / koma.matrix / Matrix / trace trace abstract fun trace(): T The matrix trace.","title":"Trace"},{"location":"Reference_API_Docs/koma.matrix/-matrix/trace.html#trace","text":"abstract fun trace(): T The matrix trace.","title":"trace"},{"location":"Reference_API_Docs/koma.matrix/-matrix/transpose.html","text":"api / koma.matrix / Matrix / transpose transpose abstract fun transpose(): Matrix < T > Transpose of the matrix","title":"Transpose"},{"location":"Reference_API_Docs/koma.matrix/-matrix/transpose.html#transpose","text":"abstract fun transpose(): Matrix < T > Transpose of the matrix","title":"transpose"},{"location":"Reference_API_Docs/koma.matrix/-matrix/unary-minus.html","text":"api / koma.matrix / Matrix / unaryMinus unaryMinus abstract operator fun unaryMinus(): Matrix < T >","title":"Unary minus"},{"location":"Reference_API_Docs/koma.matrix/-matrix/unary-minus.html#unaryminus","text":"abstract operator fun unaryMinus(): Matrix < T >","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.matrix/-matrix/wrap-range.html","text":"api / koma.matrix / Matrix / wrapRange wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Wrap range"},{"location":"Reference_API_Docs/koma.matrix/-matrix/wrap-range.html#wraprange","text":"open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"wrapRange"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/index.html","text":"api / koma.matrix / MatrixFactory MatrixFactory interface MatrixFactory<out T : Matrix <*>> A set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc. Functions Name Summary arange abstract fun arange(start: Double , stop: Double , increment: Double ): T abstract fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. abstract fun arange(start: Double , stop: Double ): T abstract fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. create abstract fun create(data: IntRange ): T Creates a row-vector with initial values pulled from an int range, e.g. 1..45 abstract fun create(data: DoubleArray ): T Creates a row-vector with initial values pulled from a double array abstract fun create(data: Array < DoubleArray >): T Creates a matrix from an array of arrays (row-major) eye abstract fun eye(size: Int ): T Creates an identity matrix of the requested shape abstract fun eye(rows: Int , cols: Int ): T Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones abstract fun ones(rows: Int , cols: Int ): T Creates a one initialized matrix of the requested shape rand abstract fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn abstract fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples zeros abstract fun zeros(rows: Int , cols: Int ): T Generate a zero initialized matrix of the requested shape. Inheritors Name Summary DefaultDoubleMatrixFactory class DefaultDoubleMatrixFactory : MatrixFactory < Matrix < Double >> DefaultFloatMatrixFactory class DefaultFloatMatrixFactory : MatrixFactory < Matrix < Float >> DefaultIntMatrixFactory class DefaultIntMatrixFactory : MatrixFactory < Matrix < Int >> DoubleFactoryBase abstract class DoubleFactoryBase<T : Matrix < Double >> : MatrixFactory < T > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"Index"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/index.html#matrixfactory","text":"interface MatrixFactory<out T : Matrix <*>> A set of constructors that must be implemented by a koma backend. Generates various types of matrices. Generic parameter is the type of element, i.e. T=Matrix or T=Matrix, etc.","title":"MatrixFactory"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/index.html#functions","text":"Name Summary arange abstract fun arange(start: Double , stop: Double , increment: Double ): T abstract fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. abstract fun arange(start: Double , stop: Double ): T abstract fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. create abstract fun create(data: IntRange ): T Creates a row-vector with initial values pulled from an int range, e.g. 1..45 abstract fun create(data: DoubleArray ): T Creates a row-vector with initial values pulled from a double array abstract fun create(data: Array < DoubleArray >): T Creates a matrix from an array of arrays (row-major) eye abstract fun eye(size: Int ): T Creates an identity matrix of the requested shape abstract fun eye(rows: Int , cols: Int ): T Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones abstract fun ones(rows: Int , cols: Int ): T Creates a one initialized matrix of the requested shape rand abstract fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn abstract fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples zeros abstract fun zeros(rows: Int , cols: Int ): T Generate a zero initialized matrix of the requested shape.","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/index.html#inheritors","text":"Name Summary DefaultDoubleMatrixFactory class DefaultDoubleMatrixFactory : MatrixFactory < Matrix < Double >> DefaultFloatMatrixFactory class DefaultFloatMatrixFactory : MatrixFactory < Matrix < Float >> DefaultIntMatrixFactory class DefaultIntMatrixFactory : MatrixFactory < Matrix < Int >> DoubleFactoryBase abstract class DoubleFactoryBase<T : Matrix < Double >> : MatrixFactory < T > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"Inheritors"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/arange.html","text":"api / koma.matrix / MatrixFactory / arange arange abstract fun arange(start: Double , stop: Double , increment: Double ): T abstract fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. abstract fun arange(start: Double , stop: Double ): T abstract fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"Arange"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/arange.html#arange","text":"abstract fun arange(start: Double , stop: Double , increment: Double ): T abstract fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. abstract fun arange(start: Double , stop: Double ): T abstract fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"arange"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/create.html","text":"api / koma.matrix / MatrixFactory / create create abstract fun create(data: IntRange ): T Creates a row-vector with initial values pulled from an int range, e.g. 1..45 abstract fun create(data: DoubleArray ): T Creates a row-vector with initial values pulled from a double array abstract fun create(data: Array < DoubleArray >): T Creates a matrix from an array of arrays (row-major)","title":"Create"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/create.html#create","text":"abstract fun create(data: IntRange ): T Creates a row-vector with initial values pulled from an int range, e.g. 1..45 abstract fun create(data: DoubleArray ): T Creates a row-vector with initial values pulled from a double array abstract fun create(data: Array < DoubleArray >): T Creates a matrix from an array of arrays (row-major)","title":"create"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/eye.html","text":"api / koma.matrix / MatrixFactory / eye eye abstract fun eye(size: Int ): T Creates an identity matrix of the requested shape abstract fun eye(rows: Int , cols: Int ): T Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"Eye"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/eye.html#eye","text":"abstract fun eye(size: Int ): T Creates an identity matrix of the requested shape abstract fun eye(rows: Int , cols: Int ): T Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"eye"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/ones.html","text":"api / koma.matrix / MatrixFactory / ones ones abstract fun ones(rows: Int , cols: Int ): T Creates a one initialized matrix of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/ones.html#ones","text":"abstract fun ones(rows: Int , cols: Int ): T Creates a one initialized matrix of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/rand.html","text":"api / koma.matrix / MatrixFactory / rand rand abstract fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/rand.html#rand","text":"abstract fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/randn.html","text":"api / koma.matrix / MatrixFactory / randn randn abstract fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/randn.html#randn","text":"abstract fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/zeros.html","text":"api / koma.matrix / MatrixFactory / zeros zeros abstract fun zeros(rows: Int , cols: Int ): T Generate a zero initialized matrix of the requested shape.","title":"Zeros"},{"location":"Reference_API_Docs/koma.matrix/-matrix-factory/zeros.html#zeros","text":"abstract fun zeros(rows: Int , cols: Int ): T Generate a zero initialized matrix of the requested shape.","title":"zeros"},{"location":"Reference_API_Docs/koma.matrix/-matrix-types/index.html","text":"api / koma.matrix / MatrixTypes MatrixTypes object MatrixTypes Intended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T). Properties Name Summary DoubleType val DoubleType: MatrixType < Double > FloatType val FloatType: MatrixType < Float > IntType val IntType: MatrixType < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix/-matrix-types/index.html#matrixtypes","text":"object MatrixTypes Intended to be used as a parameter to functions, when selection of matrix type is needed. (e.g. creators.kt which return Matrix for a requested T).","title":"MatrixTypes"},{"location":"Reference_API_Docs/koma.matrix/-matrix-types/index.html#properties","text":"Name Summary DoubleType val DoubleType: MatrixType < Double > FloatType val FloatType: MatrixType < Float > IntType val IntType: MatrixType < Int >","title":"Properties"},{"location":"Reference_API_Docs/koma.matrix/-matrix-types/-double-type.html","text":"api / koma.matrix / MatrixTypes / DoubleType DoubleType val DoubleType: MatrixType < Double >","title":" double type"},{"location":"Reference_API_Docs/koma.matrix/-matrix-types/-double-type.html#doubletype","text":"val DoubleType: MatrixType < Double >","title":"DoubleType"},{"location":"Reference_API_Docs/koma.matrix/-matrix-types/-float-type.html","text":"api / koma.matrix / MatrixTypes / FloatType FloatType val FloatType: MatrixType < Float >","title":" float type"},{"location":"Reference_API_Docs/koma.matrix/-matrix-types/-float-type.html#floattype","text":"val FloatType: MatrixType < Float >","title":"FloatType"},{"location":"Reference_API_Docs/koma.matrix/-matrix-types/-int-type.html","text":"api / koma.matrix / MatrixTypes / IntType IntType val IntType: MatrixType < Int >","title":" int type"},{"location":"Reference_API_Docs/koma.matrix/-matrix-types/-int-type.html#inttype","text":"val IntType: MatrixType < Int >","title":"IntType"},{"location":"Reference_API_Docs/koma.matrix.cblas/index.html","text":"api / koma.matrix.cblas Package koma.matrix.cblas Types Name Summary CBlasMatrix class CBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using raw cblas calls. CBlasMatrixFactory class CBlasMatrixFactory : DoubleFactoryBase < CBlasMatrix >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.cblas/index.html#package-komamatrixcblas","text":"","title":"Package koma.matrix.cblas"},{"location":"Reference_API_Docs/koma.matrix.cblas/index.html#types","text":"Name Summary CBlasMatrix class CBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using raw cblas calls. CBlasMatrixFactory class CBlasMatrixFactory : DoubleFactoryBase < CBlasMatrix >","title":"Types"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/index.html","text":"api / koma.matrix.cblas / CBlasMatrix CBlasMatrix class CBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using raw cblas calls. Parameters storage - A raw double * with enough space preallocated to hold\\ the matrix. The CBlasMatrix takes full control of the pointer, including freeing the memory pointed at. Constructors Name Summary <init> CBlasMatrix(nRows: Int , nCols: Int )``CBlasMatrix(nRows: Int , nCols: Int , storage: <ERROR CLASS><<ERROR CLASS>>) An implementation of the Matrix interface using raw cblas calls. Inherited Properties Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int Functions Name Summary LU fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < CBlasMatrix , CBlasMatrix > SVD fun SVD(): Triple < CBlasMatrix , CBlasMatrix , CBlasMatrix > chol fun chol(): CBlasMatrix (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): CBlasMatrix Returns a copy of this matrix (same values, new memory) det fun det(): Nothing Determinant of the matrix diag fun diag(): Nothing finalize fun finalize(): Unit getBaseMatrix fun getBaseMatrix(): <ERROR CLASS><<ERROR CLASS>> Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getDouble fun getDouble(i: Int , j: Int ): <ERROR CLASS> fun getDouble(i: Int ): <ERROR CLASS> getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MatrixFactory < CBlasMatrix > Because sometimes all you have is a Matrix, but you really want a MatrixFactory. inv fun inv(): CBlasMatrix Matrix inverse (square matrices) normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Nothing Pseudo-inverse of (non-square) matrix setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit solve fun solve(other: Matrix < Double >): CBlasMatrix Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): CBlasMatrix trace fun trace(): Nothing The matrix trace. Inherited Functions Name Summary T open fun T(): Matrix < T > Transpose operator. argMax abstract fun argMax(): Int Row major 1D index. argMin abstract fun argMin(): Int Row major 1D index. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. div abstract operator fun div(other: Int ): Matrix < T > abstract operator fun div(other: T ): Matrix < T > elementSum abstract fun elementSum(): T Sum of all the elements in the matrix. elementTimes abstract fun elementTimes(other: Matrix < T >): Matrix < T > Element-wise multiplication with another matrix epow abstract fun epow(other: T ): Matrix < T > Element-wise exponentiation of each element in the matrix abstract infix fun epow(other: Int ): Matrix < T > expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getCol abstract fun getCol(col: Int ): Matrix < T > getDouble open fun getDouble(vararg indices: Int ): Double getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getRow abstract fun getRow(row: Int ): Matrix < T > getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. max abstract fun max(): T Maximum value contained in the matrix mean abstract fun mean(): T Mean (average) of all the elements in the matrix. min abstract fun min(): T Minimum value contained in the matrix minus abstract operator fun minus(other: T ): Matrix < T > abstract operator fun minus(other: Matrix < T >): Matrix < T > plus abstract operator fun plus(other: T ): Matrix < T > abstract operator fun plus(other: Matrix < T >): Matrix < T > pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > times abstract operator fun times(other: T ): Matrix < T > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > transpose abstract fun transpose(): Matrix < T > Transpose of the matrix unaryMinus abstract operator fun unaryMinus(): Matrix < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange Extension Functions Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/index.html#cblasmatrix","text":"class CBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using raw cblas calls.","title":"CBlasMatrix"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/index.html#parameters","text":"storage - A raw double * with enough space preallocated to hold\\ the matrix. The CBlasMatrix takes full control of the pointer, including freeing the memory pointed at.","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/index.html#constructors","text":"Name Summary <init> CBlasMatrix(nRows: Int , nCols: Int )``CBlasMatrix(nRows: Int , nCols: Int , storage: <ERROR CLASS><<ERROR CLASS>>) An implementation of the Matrix interface using raw cblas calls.","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/index.html#inherited-properties","text":"Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int","title":"Inherited Properties"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/index.html#functions","text":"Name Summary LU fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < CBlasMatrix , CBlasMatrix > SVD fun SVD(): Triple < CBlasMatrix , CBlasMatrix , CBlasMatrix > chol fun chol(): CBlasMatrix (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): CBlasMatrix Returns a copy of this matrix (same values, new memory) det fun det(): Nothing Determinant of the matrix diag fun diag(): Nothing finalize fun finalize(): Unit getBaseMatrix fun getBaseMatrix(): <ERROR CLASS><<ERROR CLASS>> Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getDouble fun getDouble(i: Int , j: Int ): <ERROR CLASS> fun getDouble(i: Int ): <ERROR CLASS> getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MatrixFactory < CBlasMatrix > Because sometimes all you have is a Matrix, but you really want a MatrixFactory. inv fun inv(): CBlasMatrix Matrix inverse (square matrices) normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Nothing Pseudo-inverse of (non-square) matrix setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit solve fun solve(other: Matrix < Double >): CBlasMatrix Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): CBlasMatrix trace fun trace(): Nothing The matrix trace.","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/index.html#inherited-functions","text":"Name Summary T open fun T(): Matrix < T > Transpose operator. argMax abstract fun argMax(): Int Row major 1D index. argMin abstract fun argMin(): Int Row major 1D index. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. div abstract operator fun div(other: Int ): Matrix < T > abstract operator fun div(other: T ): Matrix < T > elementSum abstract fun elementSum(): T Sum of all the elements in the matrix. elementTimes abstract fun elementTimes(other: Matrix < T >): Matrix < T > Element-wise multiplication with another matrix epow abstract fun epow(other: T ): Matrix < T > Element-wise exponentiation of each element in the matrix abstract infix fun epow(other: Int ): Matrix < T > expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getCol abstract fun getCol(col: Int ): Matrix < T > getDouble open fun getDouble(vararg indices: Int ): Double getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getRow abstract fun getRow(row: Int ): Matrix < T > getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. max abstract fun max(): T Maximum value contained in the matrix mean abstract fun mean(): T Mean (average) of all the elements in the matrix. min abstract fun min(): T Minimum value contained in the matrix minus abstract operator fun minus(other: T ): Matrix < T > abstract operator fun minus(other: Matrix < T >): Matrix < T > plus abstract operator fun plus(other: T ): Matrix < T > abstract operator fun plus(other: Matrix < T >): Matrix < T > pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > times abstract operator fun times(other: T ): Matrix < T > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > transpose abstract fun transpose(): Matrix < T > Transpose of the matrix unaryMinus abstract operator fun unaryMinus(): Matrix < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/index.html#extension-functions","text":"Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/-init-.html","text":"api / koma.matrix.cblas / CBlasMatrix / <init> <init> CBlasMatrix(nRows: Int , nCols: Int )``CBlasMatrix(nRows: Int , nCols: Int , storage: <ERROR CLASS><<ERROR CLASS>>) An implementation of the Matrix interface using raw cblas calls. Parameters storage - A raw double * with enough space preallocated to hold\\ the matrix. The CBlasMatrix takes full control of the pointer, including freeing the memory pointed at.","title":" init "},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/-init-.html#init","text":"CBlasMatrix(nRows: Int , nCols: Int )``CBlasMatrix(nRows: Int , nCols: Int , storage: <ERROR CLASS><<ERROR CLASS>>) An implementation of the Matrix interface using raw cblas calls.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/-init-.html#parameters","text":"storage - A raw double * with enough space preallocated to hold\\ the matrix. The CBlasMatrix takes full control of the pointer, including freeing the memory pointed at.","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/-l-u.html","text":"api / koma.matrix.cblas / CBlasMatrix / LU LU fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":" l u"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/-l-u.html#lu","text":"fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":"LU"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/-q-r.html","text":"api / koma.matrix.cblas / CBlasMatrix / QR QR fun QR(): Pair < CBlasMatrix , CBlasMatrix > Overrides Matrix.QR","title":" q r"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/-q-r.html#qr","text":"fun QR(): Pair < CBlasMatrix , CBlasMatrix > Overrides Matrix.QR","title":"QR"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/-s-v-d.html","text":"api / koma.matrix.cblas / CBlasMatrix / SVD SVD fun SVD(): Triple < CBlasMatrix , CBlasMatrix , CBlasMatrix > Overrides Matrix.SVD","title":" s v d"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/-s-v-d.html#svd","text":"fun SVD(): Triple < CBlasMatrix , CBlasMatrix , CBlasMatrix > Overrides Matrix.SVD","title":"SVD"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/chol.html","text":"api / koma.matrix.cblas / CBlasMatrix / chol chol fun chol(): CBlasMatrix Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"Chol"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/chol.html#chol","text":"fun chol(): CBlasMatrix Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"chol"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/copy.html","text":"api / koma.matrix.cblas / CBlasMatrix / copy copy fun copy(): CBlasMatrix Overrides Matrix.copy Overrides DoubleMatrixBase.copy Returns a copy of this matrix (same values, new memory)","title":"Copy"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/copy.html#copy","text":"fun copy(): CBlasMatrix Overrides Matrix.copy Overrides DoubleMatrixBase.copy Returns a copy of this matrix (same values, new memory)","title":"copy"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/det.html","text":"api / koma.matrix.cblas / CBlasMatrix / det det fun det(): Nothing Overrides Matrix.det Determinant of the matrix","title":"Det"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/det.html#det","text":"fun det(): Nothing Overrides Matrix.det Determinant of the matrix","title":"det"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/diag.html","text":"api / koma.matrix.cblas / CBlasMatrix / diag diag fun diag(): Nothing Overrides Matrix.diag","title":"Diag"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/diag.html#diag","text":"fun diag(): Nothing Overrides Matrix.diag","title":"diag"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/finalize.html","text":"api / koma.matrix.cblas / CBlasMatrix / finalize finalize protected fun finalize(): Unit","title":"Finalize"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/finalize.html#finalize","text":"protected fun finalize(): Unit","title":"finalize"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/get-base-matrix.html","text":"api / koma.matrix.cblas / CBlasMatrix / getBaseMatrix getBaseMatrix fun getBaseMatrix(): <ERROR CLASS><<ERROR CLASS>> Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"Get base matrix"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/get-base-matrix.html#getbasematrix","text":"fun getBaseMatrix(): <ERROR CLASS><<ERROR CLASS>> Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"getBaseMatrix"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/get-double-data.html","text":"api / koma.matrix.cblas / CBlasMatrix / getDoubleData getDoubleData fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"Get double data"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/get-double-data.html#getdoubledata","text":"fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"getDoubleData"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/get-double.html","text":"api / koma.matrix.cblas / CBlasMatrix / getDouble getDouble fun getDouble(i: Int , j: Int ): <ERROR CLASS> Overrides Matrix.getDouble fun getDouble(i: Int ): <ERROR CLASS> Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/get-double.html#getdouble","text":"fun getDouble(i: Int , j: Int ): <ERROR CLASS> Overrides Matrix.getDouble fun getDouble(i: Int ): <ERROR CLASS> Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/get-factory.html","text":"api / koma.matrix.cblas / CBlasMatrix / getFactory getFactory fun getFactory(): MatrixFactory < CBlasMatrix > Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"Get factory"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/get-factory.html#getfactory","text":"fun getFactory(): MatrixFactory < CBlasMatrix > Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"getFactory"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/inv.html","text":"api / koma.matrix.cblas / CBlasMatrix / inv inv fun inv(): CBlasMatrix Overrides Matrix.inv Matrix inverse (square matrices)","title":"Inv"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/inv.html#inv","text":"fun inv(): CBlasMatrix Overrides Matrix.inv Matrix inverse (square matrices)","title":"inv"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/norm-f.html","text":"api / koma.matrix.cblas / CBlasMatrix / normF normF fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"Norm f"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/norm-f.html#normf","text":"fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"normF"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/norm-ind-p1.html","text":"api / koma.matrix.cblas / CBlasMatrix / normIndP1 normIndP1 fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"Norm ind p1"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/norm-ind-p1.html#normindp1","text":"fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"normIndP1"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/num-cols.html","text":"api / koma.matrix.cblas / CBlasMatrix / numCols numCols fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"Num cols"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/num-cols.html#numcols","text":"fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"numCols"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/num-rows.html","text":"api / koma.matrix.cblas / CBlasMatrix / numRows numRows fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"Num rows"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/num-rows.html#numrows","text":"fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"numRows"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/pinv.html","text":"api / koma.matrix.cblas / CBlasMatrix / pinv pinv fun pinv(): Nothing Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"Pinv"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/pinv.html#pinv","text":"fun pinv(): Nothing Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"pinv"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/set-double.html","text":"api / koma.matrix.cblas / CBlasMatrix / setDouble setDouble fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/set-double.html#setdouble","text":"fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/solve.html","text":"api / koma.matrix.cblas / CBlasMatrix / solve solve fun solve(other: Matrix < Double >): CBlasMatrix Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"Solve"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/solve.html#solve","text":"fun solve(other: Matrix < Double >): CBlasMatrix Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"solve"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/times.html","text":"api / koma.matrix.cblas / CBlasMatrix / times times fun times(other: Matrix < Double >): CBlasMatrix Overrides Matrix.times","title":"Times"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/times.html#times","text":"fun times(other: Matrix < Double >): CBlasMatrix Overrides Matrix.times","title":"times"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/trace.html","text":"api / koma.matrix.cblas / CBlasMatrix / trace trace fun trace(): Nothing Overrides Matrix.trace The matrix trace.","title":"Trace"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix/trace.html#trace","text":"fun trace(): Nothing Overrides Matrix.trace The matrix trace.","title":"trace"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/index.html","text":"api / koma.matrix.cblas / CBlasMatrixFactory CBlasMatrixFactory class CBlasMatrixFactory : DoubleFactoryBase < CBlasMatrix > Constructors Name Summary <init> CBlasMatrixFactory() Functions Name Summary create fun create(data: IntRange ): CBlasMatrix Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): CBlasMatrix Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): CBlasMatrix Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): CBlasMatrix Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): CBlasMatrix Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): CBlasMatrix Creates a one initialized matrix of the requested shape zeros fun zeros(rows: Int , cols: Int ): CBlasMatrix Generate a zero initialized matrix of the requested shape. Inherited Functions Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/index.html#cblasmatrixfactory","text":"class CBlasMatrixFactory : DoubleFactoryBase < CBlasMatrix >","title":"CBlasMatrixFactory"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/index.html#constructors","text":"Name Summary <init> CBlasMatrixFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/index.html#functions","text":"Name Summary create fun create(data: IntRange ): CBlasMatrix Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): CBlasMatrix Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): CBlasMatrix Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): CBlasMatrix Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): CBlasMatrix Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): CBlasMatrix Creates a one initialized matrix of the requested shape zeros fun zeros(rows: Int , cols: Int ): CBlasMatrix Generate a zero initialized matrix of the requested shape.","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/index.html#inherited-functions","text":"Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/-init-.html","text":"api / koma.matrix.cblas / CBlasMatrixFactory / <init> <init> CBlasMatrixFactory()","title":" init "},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/-init-.html#init","text":"CBlasMatrixFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/create.html","text":"api / koma.matrix.cblas / CBlasMatrixFactory / create create fun create(data: IntRange ): CBlasMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): CBlasMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): CBlasMatrix Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"Create"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/create.html#create","text":"fun create(data: IntRange ): CBlasMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): CBlasMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): CBlasMatrix Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"create"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/eye.html","text":"api / koma.matrix.cblas / CBlasMatrixFactory / eye eye fun eye(size: Int ): CBlasMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): CBlasMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"Eye"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/eye.html#eye","text":"fun eye(size: Int ): CBlasMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): CBlasMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"eye"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/ones.html","text":"api / koma.matrix.cblas / CBlasMatrixFactory / ones ones fun ones(rows: Int , cols: Int ): CBlasMatrix Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): CBlasMatrix Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/zeros.html","text":"api / koma.matrix.cblas / CBlasMatrixFactory / zeros zeros fun zeros(rows: Int , cols: Int ): CBlasMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"Zeros"},{"location":"Reference_API_Docs/koma.matrix.cblas/-c-blas-matrix-factory/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): CBlasMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"zeros"},{"location":"Reference_API_Docs/koma.matrix.common/index.html","text":"api / koma.matrix.common Package koma.matrix.common Types Name Summary DoubleFactoryBase abstract class DoubleFactoryBase<T : Matrix < Double >> : MatrixFactory < T > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. DoubleMatrixBase abstract class DoubleMatrixBase : MatrixBase < Double > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. MatrixBase abstract class MatrixBase<T> : Matrix < T >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.common/index.html#package-komamatrixcommon","text":"","title":"Package koma.matrix.common"},{"location":"Reference_API_Docs/koma.matrix.common/index.html#types","text":"Name Summary DoubleFactoryBase abstract class DoubleFactoryBase<T : Matrix < Double >> : MatrixFactory < T > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. DoubleMatrixBase abstract class DoubleMatrixBase : MatrixBase < Double > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. MatrixBase abstract class MatrixBase<T> : Matrix < T >","title":"Types"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html","text":"api / koma.matrix.common / DoubleFactoryBase DoubleFactoryBase abstract class DoubleFactoryBase<T : Matrix < Double >> : MatrixFactory < T > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. Constructors Name Summary <init> DoubleFactoryBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. Functions Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples Inherited Functions Name Summary create abstract fun create(data: IntRange ): T Creates a row-vector with initial values pulled from an int range, e.g. 1..45 abstract fun create(data: DoubleArray ): T Creates a row-vector with initial values pulled from a double array abstract fun create(data: Array < DoubleArray >): T Creates a matrix from an array of arrays (row-major) eye abstract fun eye(size: Int ): T Creates an identity matrix of the requested shape abstract fun eye(rows: Int , cols: Int ): T Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones abstract fun ones(rows: Int , cols: Int ): T Creates a one initialized matrix of the requested shape zeros abstract fun zeros(rows: Int , cols: Int ): T Generate a zero initialized matrix of the requested shape. Inheritors Name Summary CBlasMatrixFactory class CBlasMatrixFactory : DoubleFactoryBase < CBlasMatrix > EJMLMatrixFactory class EJMLMatrixFactory : DoubleFactoryBase < EJMLMatrix > JBlasMatrixFactory class JBlasMatrixFactory : DoubleFactoryBase < JBlasMatrix > MTJMatrixFactory class MTJMatrixFactory : DoubleFactoryBase < MTJMatrix >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html#doublefactorybase","text":"abstract class DoubleFactoryBase<T : Matrix < Double >> : MatrixFactory < T > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"DoubleFactoryBase"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html#constructors","text":"Name Summary <init> DoubleFactoryBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html#functions","text":"Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html#inherited-functions","text":"Name Summary create abstract fun create(data: IntRange ): T Creates a row-vector with initial values pulled from an int range, e.g. 1..45 abstract fun create(data: DoubleArray ): T Creates a row-vector with initial values pulled from a double array abstract fun create(data: Array < DoubleArray >): T Creates a matrix from an array of arrays (row-major) eye abstract fun eye(size: Int ): T Creates an identity matrix of the requested shape abstract fun eye(rows: Int , cols: Int ): T Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones abstract fun ones(rows: Int , cols: Int ): T Creates a one initialized matrix of the requested shape zeros abstract fun zeros(rows: Int , cols: Int ): T Generate a zero initialized matrix of the requested shape.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/index.html#inheritors","text":"Name Summary CBlasMatrixFactory class CBlasMatrixFactory : DoubleFactoryBase < CBlasMatrix > EJMLMatrixFactory class EJMLMatrixFactory : DoubleFactoryBase < EJMLMatrix > JBlasMatrixFactory class JBlasMatrixFactory : DoubleFactoryBase < JBlasMatrix > MTJMatrixFactory class MTJMatrixFactory : DoubleFactoryBase < MTJMatrix >","title":"Inheritors"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/-init-.html","text":"api / koma.matrix.common / DoubleFactoryBase / <init> <init> DoubleFactoryBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":" init "},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/-init-.html#init","text":"DoubleFactoryBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/arange.html","text":"api / koma.matrix.common / DoubleFactoryBase / arange arange open fun arange(start: Double , stop: Double , increment: Double ): T Overrides MatrixFactory.arange open fun arange(start: Int , stop: Int , increment: Int ): T Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T Overrides MatrixFactory.arange open fun arange(start: Int , stop: Int ): T Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"Arange"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/arange.html#arange","text":"open fun arange(start: Double , stop: Double , increment: Double ): T Overrides MatrixFactory.arange open fun arange(start: Int , stop: Int , increment: Int ): T Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T Overrides MatrixFactory.arange open fun arange(start: Int , stop: Int ): T Overrides MatrixFactory.arange Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value.","title":"arange"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/rand.html","text":"api / koma.matrix.common / DoubleFactoryBase / rand rand open fun rand(rows: Int , cols: Int ): T Overrides MatrixFactory.rand Creates a matrix of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/rand.html#rand","text":"open fun rand(rows: Int , cols: Int ): T Overrides MatrixFactory.rand Creates a matrix of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/randn.html","text":"api / koma.matrix.common / DoubleFactoryBase / randn randn open fun randn(rows: Int , cols: Int ): T Overrides MatrixFactory.randn Creates a matrix of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.matrix.common/-double-factory-base/randn.html#randn","text":"open fun randn(rows: Int , cols: Int ): T Overrides MatrixFactory.randn Creates a matrix of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html","text":"api / koma.matrix.common / DoubleMatrixBase DoubleMatrixBase abstract class DoubleMatrixBase : MatrixBase < Double > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. Constructors Name Summary <init> DoubleMatrixBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions. Functions Name Summary argMax open fun argMax(): Int Row major 1D index. argMin open fun argMin(): Int Row major 1D index. copy open fun copy(): Matrix < Double > Returns a copy of this matrix (same values, new memory) div open fun div(other: Int ): Matrix < Double > open fun div(other: Double ): Matrix < Double > elementSum open fun elementSum(): Double Sum of all the elements in the matrix. elementTimes open fun elementTimes(other: Matrix < Double >): Matrix < Double > Element-wise multiplication with another matrix epow open fun epow(other: Double ): Matrix < Double > Element-wise exponentiation of each element in the matrix open fun epow(other: Int ): Matrix < Double > expm open fun expm(): Matrix < Double > Compute the matrix exponential e^x (NOT elementwise) getCol open fun getCol(col: Int ): Matrix < Double > getFloat open fun getFloat(i: Int , j: Int ): Float open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(i: Int ): Double open fun getGeneric(i: Int , j: Int ): Double getInt open fun getInt(i: Int , j: Int ): Int open fun getInt(i: Int ): Int getRow open fun getRow(row: Int ): Matrix < Double > max open fun max(): Double Maximum value contained in the matrix mean open fun mean(): Double Mean (average) of all the elements in the matrix. min open fun min(): Double Minimum value contained in the matrix minus open fun minus(other: Double ): Matrix < Double > open fun minus(other: Matrix < Double >): Matrix < Double > plus open fun plus(other: Matrix < Double >): Matrix < Double > open fun plus(other: Double ): Matrix < Double > setCol open fun setCol(index: Int , col: Matrix < Double >): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit open fun setFloat(i: Int , j: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , v: Double ): Unit open fun setGeneric(i: Int , j: Int , v: Double ): Unit setInt open fun setInt(i: Int , v: Int ): Unit open fun setInt(i: Int , j: Int , v: Int ): Unit setRow open fun setRow(index: Int , row: Matrix < Double >): Unit times open fun times(other: Double ): Matrix < Double > transpose open fun transpose(): Matrix < Double > Transpose of the matrix unaryMinus open fun unaryMinus(): Matrix < Double > Inherited Functions Name Summary castOrCopy fun <DType, TOuter : Matrix < DType >, TInner> castOrCopy(mat: Matrix < DType >, makeOuter: ( TInner ) -> TOuter , outerFac: MatrixFactory < TOuter >): TOuter Attempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the TOuter constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type. equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Extension Functions Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int > Inheritors Name Summary CBlasMatrix class CBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using raw cblas calls. EJMLMatrix class EJMLMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . JBlasMatrix class JBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . MTJMatrix class MTJMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory .","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#doublematrixbase","text":"abstract class DoubleMatrixBase : MatrixBase < Double > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"DoubleMatrixBase"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#constructors","text":"Name Summary <init> DoubleMatrixBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#functions","text":"Name Summary argMax open fun argMax(): Int Row major 1D index. argMin open fun argMin(): Int Row major 1D index. copy open fun copy(): Matrix < Double > Returns a copy of this matrix (same values, new memory) div open fun div(other: Int ): Matrix < Double > open fun div(other: Double ): Matrix < Double > elementSum open fun elementSum(): Double Sum of all the elements in the matrix. elementTimes open fun elementTimes(other: Matrix < Double >): Matrix < Double > Element-wise multiplication with another matrix epow open fun epow(other: Double ): Matrix < Double > Element-wise exponentiation of each element in the matrix open fun epow(other: Int ): Matrix < Double > expm open fun expm(): Matrix < Double > Compute the matrix exponential e^x (NOT elementwise) getCol open fun getCol(col: Int ): Matrix < Double > getFloat open fun getFloat(i: Int , j: Int ): Float open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(i: Int ): Double open fun getGeneric(i: Int , j: Int ): Double getInt open fun getInt(i: Int , j: Int ): Int open fun getInt(i: Int ): Int getRow open fun getRow(row: Int ): Matrix < Double > max open fun max(): Double Maximum value contained in the matrix mean open fun mean(): Double Mean (average) of all the elements in the matrix. min open fun min(): Double Minimum value contained in the matrix minus open fun minus(other: Double ): Matrix < Double > open fun minus(other: Matrix < Double >): Matrix < Double > plus open fun plus(other: Matrix < Double >): Matrix < Double > open fun plus(other: Double ): Matrix < Double > setCol open fun setCol(index: Int , col: Matrix < Double >): Unit setFloat open fun setFloat(i: Int , v: Float ): Unit open fun setFloat(i: Int , j: Int , v: Float ): Unit setGeneric open fun setGeneric(i: Int , v: Double ): Unit open fun setGeneric(i: Int , j: Int , v: Double ): Unit setInt open fun setInt(i: Int , v: Int ): Unit open fun setInt(i: Int , j: Int , v: Int ): Unit setRow open fun setRow(index: Int , row: Matrix < Double >): Unit times open fun times(other: Double ): Matrix < Double > transpose open fun transpose(): Matrix < Double > Transpose of the matrix unaryMinus open fun unaryMinus(): Matrix < Double >","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#inherited-functions","text":"Name Summary castOrCopy fun <DType, TOuter : Matrix < DType >, TInner> castOrCopy(mat: Matrix < DType >, makeOuter: ( TInner ) -> TOuter , outerFac: MatrixFactory < TOuter >): TOuter Attempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the TOuter constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type. equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#extension-functions","text":"Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/index.html#inheritors","text":"Name Summary CBlasMatrix class CBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using raw cblas calls. EJMLMatrix class EJMLMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . JBlasMatrix class JBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . MTJMatrix class MTJMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory .","title":"Inheritors"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/-init-.html","text":"api / koma.matrix.common / DoubleMatrixBase / <init> <init> DoubleMatrixBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":" init "},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/-init-.html#init","text":"DoubleMatrixBase() Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/arg-max.html","text":"api / koma.matrix.common / DoubleMatrixBase / argMax argMax open fun argMax(): Int Overrides Matrix.argMax Row major 1D index.","title":"Arg max"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/arg-max.html#argmax","text":"open fun argMax(): Int Overrides Matrix.argMax Row major 1D index.","title":"argMax"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/arg-min.html","text":"api / koma.matrix.common / DoubleMatrixBase / argMin argMin open fun argMin(): Int Overrides Matrix.argMin Row major 1D index.","title":"Arg min"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/arg-min.html#argmin","text":"open fun argMin(): Int Overrides Matrix.argMin Row major 1D index.","title":"argMin"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/copy.html","text":"api / koma.matrix.common / DoubleMatrixBase / copy copy open fun copy(): Matrix < Double > Overrides Matrix.copy Returns a copy of this matrix (same values, new memory)","title":"Copy"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/copy.html#copy","text":"open fun copy(): Matrix < Double > Overrides Matrix.copy Returns a copy of this matrix (same values, new memory)","title":"copy"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/div.html","text":"api / koma.matrix.common / DoubleMatrixBase / div div open fun div(other: Int ): Matrix < Double > Overrides Matrix.div open fun div(other: Double ): Matrix < Double > Overrides Matrix.div","title":"Div"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/div.html#div","text":"open fun div(other: Int ): Matrix < Double > Overrides Matrix.div open fun div(other: Double ): Matrix < Double > Overrides Matrix.div","title":"div"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/element-sum.html","text":"api / koma.matrix.common / DoubleMatrixBase / elementSum elementSum open fun elementSum(): Double Overrides Matrix.elementSum Sum of all the elements in the matrix.","title":"Element sum"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/element-sum.html#elementsum","text":"open fun elementSum(): Double Overrides Matrix.elementSum Sum of all the elements in the matrix.","title":"elementSum"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/element-times.html","text":"api / koma.matrix.common / DoubleMatrixBase / elementTimes elementTimes open fun elementTimes(other: Matrix < Double >): Matrix < Double > Overrides Matrix.elementTimes Element-wise multiplication with another matrix","title":"Element times"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/element-times.html#elementtimes","text":"open fun elementTimes(other: Matrix < Double >): Matrix < Double > Overrides Matrix.elementTimes Element-wise multiplication with another matrix","title":"elementTimes"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/epow.html","text":"api / koma.matrix.common / DoubleMatrixBase / epow epow open fun epow(other: Double ): Matrix < Double > Overrides Matrix.epow Element-wise exponentiation of each element in the matrix open fun epow(other: Int ): Matrix < Double > Overrides Matrix.epow","title":"Epow"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/epow.html#epow","text":"open fun epow(other: Double ): Matrix < Double > Overrides Matrix.epow Element-wise exponentiation of each element in the matrix open fun epow(other: Int ): Matrix < Double > Overrides Matrix.epow","title":"epow"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/expm.html","text":"api / koma.matrix.common / DoubleMatrixBase / expm expm open fun expm(): Matrix < Double > Overrides Matrix.expm Compute the matrix exponential e^x (NOT elementwise)","title":"Expm"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/expm.html#expm","text":"open fun expm(): Matrix < Double > Overrides Matrix.expm Compute the matrix exponential e^x (NOT elementwise)","title":"expm"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-col.html","text":"api / koma.matrix.common / DoubleMatrixBase / getCol getCol open fun getCol(col: Int ): Matrix < Double > Overrides Matrix.getCol","title":"Get col"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-col.html#getcol","text":"open fun getCol(col: Int ): Matrix < Double > Overrides Matrix.getCol","title":"getCol"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-float.html","text":"api / koma.matrix.common / DoubleMatrixBase / getFloat getFloat open fun getFloat(i: Int , j: Int ): Float Overrides Matrix.getFloat open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"Get float"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-float.html#getfloat","text":"open fun getFloat(i: Int , j: Int ): Float Overrides Matrix.getFloat open fun getFloat(i: Int ): Float Overrides NDArray.getFloat","title":"getFloat"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-generic.html","text":"api / koma.matrix.common / DoubleMatrixBase / getGeneric getGeneric open fun getGeneric(i: Int ): Double Overrides NDArray.getGeneric open fun getGeneric(i: Int , j: Int ): Double Overrides Matrix.getGeneric","title":"Get generic"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-generic.html#getgeneric","text":"open fun getGeneric(i: Int ): Double Overrides NDArray.getGeneric open fun getGeneric(i: Int , j: Int ): Double Overrides Matrix.getGeneric","title":"getGeneric"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-int.html","text":"api / koma.matrix.common / DoubleMatrixBase / getInt getInt open fun getInt(i: Int , j: Int ): Int Overrides Matrix.getInt open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"Get int"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-int.html#getint","text":"open fun getInt(i: Int , j: Int ): Int Overrides Matrix.getInt open fun getInt(i: Int ): Int Overrides NDArray.getInt","title":"getInt"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-row.html","text":"api / koma.matrix.common / DoubleMatrixBase / getRow getRow open fun getRow(row: Int ): Matrix < Double > Overrides Matrix.getRow","title":"Get row"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/get-row.html#getrow","text":"open fun getRow(row: Int ): Matrix < Double > Overrides Matrix.getRow","title":"getRow"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/max.html","text":"api / koma.matrix.common / DoubleMatrixBase / max max open fun max(): Double Overrides Matrix.max Maximum value contained in the matrix","title":"Max"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/max.html#max","text":"open fun max(): Double Overrides Matrix.max Maximum value contained in the matrix","title":"max"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/mean.html","text":"api / koma.matrix.common / DoubleMatrixBase / mean mean open fun mean(): Double Overrides Matrix.mean Mean (average) of all the elements in the matrix.","title":"Mean"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/mean.html#mean","text":"open fun mean(): Double Overrides Matrix.mean Mean (average) of all the elements in the matrix.","title":"mean"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/min.html","text":"api / koma.matrix.common / DoubleMatrixBase / min min open fun min(): Double Overrides Matrix.min Minimum value contained in the matrix","title":"Min"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/min.html#min","text":"open fun min(): Double Overrides Matrix.min Minimum value contained in the matrix","title":"min"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/minus.html","text":"api / koma.matrix.common / DoubleMatrixBase / minus minus open fun minus(other: Double ): Matrix < Double > Overrides Matrix.minus open fun minus(other: Matrix < Double >): Matrix < Double > Overrides Matrix.minus","title":"Minus"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/minus.html#minus","text":"open fun minus(other: Double ): Matrix < Double > Overrides Matrix.minus open fun minus(other: Matrix < Double >): Matrix < Double > Overrides Matrix.minus","title":"minus"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/plus.html","text":"api / koma.matrix.common / DoubleMatrixBase / plus plus open fun plus(other: Matrix < Double >): Matrix < Double > Overrides Matrix.plus open fun plus(other: Double ): Matrix < Double > Overrides Matrix.plus","title":"Plus"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/plus.html#plus","text":"open fun plus(other: Matrix < Double >): Matrix < Double > Overrides Matrix.plus open fun plus(other: Double ): Matrix < Double > Overrides Matrix.plus","title":"plus"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-col.html","text":"api / koma.matrix.common / DoubleMatrixBase / setCol setCol open fun setCol(index: Int , col: Matrix < Double >): Unit Overrides Matrix.setCol","title":"Set col"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-col.html#setcol","text":"open fun setCol(index: Int , col: Matrix < Double >): Unit Overrides Matrix.setCol","title":"setCol"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-float.html","text":"api / koma.matrix.common / DoubleMatrixBase / setFloat setFloat open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat open fun setFloat(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setFloat","title":"Set float"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-float.html#setfloat","text":"open fun setFloat(i: Int , v: Float ): Unit Overrides NDArray.setFloat open fun setFloat(i: Int , j: Int , v: Float ): Unit Overrides Matrix.setFloat","title":"setFloat"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-generic.html","text":"api / koma.matrix.common / DoubleMatrixBase / setGeneric setGeneric open fun setGeneric(i: Int , v: Double ): Unit Overrides NDArray.setGeneric open fun setGeneric(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setGeneric","title":"Set generic"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-generic.html#setgeneric","text":"open fun setGeneric(i: Int , v: Double ): Unit Overrides NDArray.setGeneric open fun setGeneric(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setGeneric","title":"setGeneric"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-int.html","text":"api / koma.matrix.common / DoubleMatrixBase / setInt setInt open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt open fun setInt(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setInt","title":"Set int"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-int.html#setint","text":"open fun setInt(i: Int , v: Int ): Unit Overrides NDArray.setInt open fun setInt(i: Int , j: Int , v: Int ): Unit Overrides Matrix.setInt","title":"setInt"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-row.html","text":"api / koma.matrix.common / DoubleMatrixBase / setRow setRow open fun setRow(index: Int , row: Matrix < Double >): Unit Overrides Matrix.setRow","title":"Set row"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/set-row.html#setrow","text":"open fun setRow(index: Int , row: Matrix < Double >): Unit Overrides Matrix.setRow","title":"setRow"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/times.html","text":"api / koma.matrix.common / DoubleMatrixBase / times times open fun times(other: Double ): Matrix < Double > Overrides Matrix.times","title":"Times"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/times.html#times","text":"open fun times(other: Double ): Matrix < Double > Overrides Matrix.times","title":"times"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/transpose.html","text":"api / koma.matrix.common / DoubleMatrixBase / transpose transpose open fun transpose(): Matrix < Double > Overrides Matrix.transpose Transpose of the matrix","title":"Transpose"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/transpose.html#transpose","text":"open fun transpose(): Matrix < Double > Overrides Matrix.transpose Transpose of the matrix","title":"transpose"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/unary-minus.html","text":"api / koma.matrix.common / DoubleMatrixBase / unaryMinus unaryMinus open fun unaryMinus(): Matrix < Double > Overrides Matrix.unaryMinus","title":"Unary minus"},{"location":"Reference_API_Docs/koma.matrix.common/-double-matrix-base/unary-minus.html#unaryminus","text":"open fun unaryMinus(): Matrix < Double > Overrides Matrix.unaryMinus","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/index.html","text":"api / koma.matrix.common / MatrixBase MatrixBase abstract class MatrixBase<T> : Matrix < T > Constructors Name Summary <init> MatrixBase() Inherited Properties Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int Functions Name Summary castOrCopy fun <DType, TOuter : Matrix < DType >, TInner> castOrCopy(mat: Matrix < DType >, makeOuter: ( TInner ) -> TOuter , outerFac: MatrixFactory < TOuter >): TOuter Attempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the TOuter constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type. equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String Inherited Functions Name Summary LU abstract fun LU(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> LU Decomposition. Returns p, l, u matrices as a triple. QR abstract fun QR(): Pair < Matrix < T >, Matrix < T >> SVD abstract fun SVD(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> T open fun T(): Matrix < T > Transpose operator. argMax abstract fun argMax(): Int Row major 1D index. argMin abstract fun argMin(): Int Row major 1D index. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors chol abstract fun chol(): Matrix < T > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy abstract fun copy(): Matrix < T > Returns a copy of this matrix (same values, new memory) cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. det abstract fun det(): T Determinant of the matrix diag abstract fun diag(): Matrix < T > div abstract operator fun div(other: Int ): Matrix < T > abstract operator fun div(other: T ): Matrix < T > elementSum abstract fun elementSum(): T Sum of all the elements in the matrix. elementTimes abstract fun elementTimes(other: Matrix < T >): Matrix < T > Element-wise multiplication with another matrix epow abstract fun epow(other: T ): Matrix < T > Element-wise exponentiation of each element in the matrix abstract infix fun epow(other: Int ): Matrix < T > expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getBaseMatrix abstract fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getByte open fun getByte(vararg indices: Int ): Byte getCol abstract fun getCol(col: Int ): Matrix < T > getDouble abstract fun getDouble(i: Int , j: Int ): Double open fun getDouble(vararg indices: Int ): Double getDoubleData abstract fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory abstract fun getFactory(): MatrixFactory < Matrix < T >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getRow abstract fun getRow(row: Int ): Matrix < T > getShort open fun getShort(vararg indices: Int ): Short inv abstract fun inv(): Matrix < T > Matrix inverse (square matrices) mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. max abstract fun max(): T Maximum value contained in the matrix mean abstract fun mean(): T Mean (average) of all the elements in the matrix. min abstract fun min(): T Minimum value contained in the matrix minus abstract operator fun minus(other: T ): Matrix < T > abstract operator fun minus(other: Matrix < T >): Matrix < T > normF abstract fun normF(): T Frobenius normal of the matrix normIndP1 abstract fun normIndP1(): T Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols abstract fun numCols(): Int Number of columns in the matrix numRows abstract fun numRows(): Int Number of rows in the matrix pinv abstract fun pinv(): Matrix < T > Pseudo-inverse of (non-square) matrix plus abstract operator fun plus(other: T ): Matrix < T > abstract operator fun plus(other: Matrix < T >): Matrix < T > pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble abstract fun setDouble(i: Int , j: Int , v: Double ): Unit open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > solve abstract fun solve(other: Matrix < T >): Matrix < T > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times abstract operator fun times(other: Matrix < T >): Matrix < T > abstract operator fun times(other: T ): Matrix < T > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > trace abstract fun trace(): T The matrix trace. transpose abstract fun transpose(): Matrix < T > Transpose of the matrix unaryMinus abstract operator fun unaryMinus(): Matrix < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange Extension Functions Name Summary all fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. any fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int fill fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun <T> Matrix < T >.get(i: Int , j: Int ): T operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T operator fun <T> Matrix < T >.get(i: Int ): T Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix < T >.get(rows: IntRange , cols: IntRange ): Matrix < T > Allow slicing, e.g. matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.get(rows: IntRange , cols: Int ): Matrix < T > Allows for slicing of the rows and selection of a single column operator fun <T> Matrix < T >.get(rows: Int , cols: IntRange ): Matrix < T > Allows for slicing of the cols and selection of a single row linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. reshape fun <T> Matrix < T >.reshape(rows: Int , cols: Int ): Matrix < T > Returns a new Matrix with the given shape, populated with the data in this array. fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int > Inheritors Name Summary DoubleMatrixBase abstract class DoubleMatrixBase : MatrixBase < Double > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#matrixbase","text":"abstract class MatrixBase<T> : Matrix < T >","title":"MatrixBase"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#constructors","text":"Name Summary <init> MatrixBase()","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#inherited-properties","text":"Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int","title":"Inherited Properties"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#functions","text":"Name Summary castOrCopy fun <DType, TOuter : Matrix < DType >, TInner> castOrCopy(mat: Matrix < DType >, makeOuter: ( TInner ) -> TOuter , outerFac: MatrixFactory < TOuter >): TOuter Attempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the TOuter constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type. equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#inherited-functions","text":"Name Summary LU abstract fun LU(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> LU Decomposition. Returns p, l, u matrices as a triple. QR abstract fun QR(): Pair < Matrix < T >, Matrix < T >> SVD abstract fun SVD(): Triple < Matrix < T >, Matrix < T >, Matrix < T >> T open fun T(): Matrix < T > Transpose operator. argMax abstract fun argMax(): Int Row major 1D index. argMin abstract fun argMin(): Int Row major 1D index. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors chol abstract fun chol(): Matrix < T > (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy abstract fun copy(): Matrix < T > Returns a copy of this matrix (same values, new memory) cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. det abstract fun det(): T Determinant of the matrix diag abstract fun diag(): Matrix < T > div abstract operator fun div(other: Int ): Matrix < T > abstract operator fun div(other: T ): Matrix < T > elementSum abstract fun elementSum(): T Sum of all the elements in the matrix. elementTimes abstract fun elementTimes(other: Matrix < T >): Matrix < T > Element-wise multiplication with another matrix epow abstract fun epow(other: T ): Matrix < T > Element-wise exponentiation of each element in the matrix abstract infix fun epow(other: Int ): Matrix < T > expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getBaseMatrix abstract fun getBaseMatrix(): Any Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getByte open fun getByte(vararg indices: Int ): Byte getCol abstract fun getCol(col: Int ): Matrix < T > getDouble abstract fun getDouble(i: Int , j: Int ): Double open fun getDouble(vararg indices: Int ): Double getDoubleData abstract fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory abstract fun getFactory(): MatrixFactory < Matrix < T >> Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getRow abstract fun getRow(row: Int ): Matrix < T > getShort open fun getShort(vararg indices: Int ): Short inv abstract fun inv(): Matrix < T > Matrix inverse (square matrices) mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. max abstract fun max(): T Maximum value contained in the matrix mean abstract fun mean(): T Mean (average) of all the elements in the matrix. min abstract fun min(): T Minimum value contained in the matrix minus abstract operator fun minus(other: T ): Matrix < T > abstract operator fun minus(other: Matrix < T >): Matrix < T > normF abstract fun normF(): T Frobenius normal of the matrix normIndP1 abstract fun normIndP1(): T Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols abstract fun numCols(): Int Number of columns in the matrix numRows abstract fun numRows(): Int Number of rows in the matrix pinv abstract fun pinv(): Matrix < T > Pseudo-inverse of (non-square) matrix plus abstract operator fun plus(other: T ): Matrix < T > abstract operator fun plus(other: Matrix < T >): Matrix < T > pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble abstract fun setDouble(i: Int , j: Int , v: Double ): Unit open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > solve abstract fun solve(other: Matrix < T >): Matrix < T > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times abstract operator fun times(other: Matrix < T >): Matrix < T > abstract operator fun times(other: T ): Matrix < T > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > trace abstract fun trace(): T The matrix trace. transpose abstract fun transpose(): Matrix < T > Transpose of the matrix unaryMinus abstract operator fun unaryMinus(): Matrix < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#extension-functions","text":"Name Summary all fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. any fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int fill fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun <T> Matrix < T >.get(i: Int , j: Int ): T operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T operator fun <T> Matrix < T >.get(i: Int ): T Gets the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix < T >.get(rows: IntRange , cols: IntRange ): Matrix < T > Allow slicing, e.g. matrix[1..2, 3..4] . Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.get(rows: IntRange , cols: Int ): Matrix < T > Allows for slicing of the rows and selection of a single column operator fun <T> Matrix < T >.get(rows: Int , cols: IntRange ): Matrix < T > Allows for slicing of the cols and selection of a single row linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. reshape fun <T> Matrix < T >.reshape(rows: Int , cols: Int ): Matrix < T > Returns a new Matrix with the given shape, populated with the data in this array. fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/index.html#inheritors","text":"Name Summary DoubleMatrixBase abstract class DoubleMatrixBase : MatrixBase < Double > Some functionality to help more easily implement double based koma backends. Feel free to not use if your backend has fast implementations of these functions.","title":"Inheritors"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/-init-.html","text":"api / koma.matrix.common / MatrixBase / <init> <init> MatrixBase()","title":" init "},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/-init-.html#init","text":"MatrixBase()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/cast-or-copy.html","text":"api / koma.matrix.common / MatrixBase / castOrCopy castOrCopy protected inline fun <DType, reified TOuter : Matrix < DType >, reified TInner> castOrCopy(mat: Matrix < DType >, makeOuter: ( TInner ) -> TOuter , outerFac: MatrixFactory < TOuter >): TOuter Attempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the TOuter constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type. Parameters mat - The matrix we want to cast or copy-- can either be a Matrix or the output of getBaseMatrix for a backend (inner wrapped type). makeOuter - A function that takes in an inner type and produces the outer matrix type that we are trying to cast or copy to outerFac - The factory for the outer type we are trying to cast or copy to","title":"Cast or copy"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/cast-or-copy.html#castorcopy","text":"protected inline fun <DType, reified TOuter : Matrix < DType >, reified TInner> castOrCopy(mat: Matrix < DType >, makeOuter: ( TInner ) -> TOuter , outerFac: MatrixFactory < TOuter >): TOuter Attempts to downcast a matrix to its specific subclass, accepting both inner wrapped types and outer types. Requires the TOuter constructor to be passed in because reified generics don't support ctor calls. If the passed mat cannot be cast, instead copies the data manually into a newly allocated matrix of the correct type.","title":"castOrCopy"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/cast-or-copy.html#parameters","text":"mat - The matrix we want to cast or copy-- can either be a Matrix or the output of getBaseMatrix for a backend (inner wrapped type). makeOuter - A function that takes in an inner type and produces the outer matrix type that we are trying to cast or copy to outerFac - The factory for the outer type we are trying to cast or copy to","title":"Parameters"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/equals.html","text":"api / koma.matrix.common / MatrixBase / equals equals open fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/equals.html#equals","text":"open fun equals(other: Any ?): Boolean","title":"equals"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/hash-code.html","text":"api / koma.matrix.common / MatrixBase / hashCode hashCode open fun hashCode(): Int","title":"Hash code"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/hash-code.html#hashcode","text":"open fun hashCode(): Int","title":"hashCode"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/to-string.html","text":"api / koma.matrix.common / MatrixBase / toString toString open fun toString(): String","title":"To string"},{"location":"Reference_API_Docs/koma.matrix.common/-matrix-base/to-string.html#tostring","text":"open fun toString(): String","title":"toString"},{"location":"Reference_API_Docs/koma.matrix.ejml/index.html","text":"api / koma.matrix.ejml Package koma.matrix.ejml Types Name Summary EJMLMatrix class EJMLMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . EJMLMatrixFactory class EJMLMatrixFactory : DoubleFactoryBase < EJMLMatrix >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.ejml/index.html#package-komamatrixejml","text":"","title":"Package koma.matrix.ejml"},{"location":"Reference_API_Docs/koma.matrix.ejml/index.html#types","text":"Name Summary EJMLMatrix class EJMLMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . EJMLMatrixFactory class EJMLMatrixFactory : DoubleFactoryBase < EJMLMatrix >","title":"Types"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/index.html","text":"api / koma.matrix.ejml / EJMLMatrix EJMLMatrix class EJMLMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . Constructors Name Summary <init> EJMLMatrix(storage: SimpleMatrix) An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory . Properties Name Summary storage var storage: SimpleMatrix Inherited Properties Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int Functions Name Summary LU fun LU(): Triple < EJMLMatrix , EJMLMatrix , EJMLMatrix > LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < EJMLMatrix , EJMLMatrix > SVD fun SVD(): Triple < EJMLMatrix , EJMLMatrix , EJMLMatrix > chol fun chol(): EJMLMatrix (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): EJMLMatrix Returns a copy of this matrix (same values, new memory) det fun det(): Double Determinant of the matrix diag fun diag(): EJMLMatrix div fun div(other: Int ): EJMLMatrix fun div(other: Double ): EJMLMatrix elementSum fun elementSum(): Double Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Double >): EJMLMatrix Element-wise multiplication with another matrix epow fun epow(other: Double ): EJMLMatrix Element-wise exponentiation of each element in the matrix fun epow(other: Int ): EJMLMatrix getBaseMatrix fun getBaseMatrix(): SimpleMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): EJMLMatrix getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): EJMLMatrixFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getRow fun getRow(row: Int ): EJMLMatrix inv fun inv(): EJMLMatrix Matrix inverse (square matrices) max fun max(): Double Maximum value contained in the matrix mean fun mean(): Double Mean (average) of all the elements in the matrix. min fun min(): Double Minimum value contained in the matrix minus fun minus(other: Double ): EJMLMatrix fun minus(other: Matrix < Double >): EJMLMatrix normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): EJMLMatrix Pseudo-inverse of (non-square) matrix plus fun plus(other: Matrix < Double >): EJMLMatrix fun plus(other: Double ): EJMLMatrix setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit solve fun solve(other: Matrix < Double >): EJMLMatrix Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): EJMLMatrix fun times(other: Double ): EJMLMatrix trace fun trace(): Double The matrix trace. transpose fun transpose(): EJMLMatrix Transpose of the matrix unaryMinus fun unaryMinus(): EJMLMatrix Inherited Functions Name Summary T open fun T(): Matrix < T > Transpose operator. argMax abstract fun argMax(): Int Row major 1D index. argMin abstract fun argMin(): Int Row major 1D index. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange Extension Functions Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/index.html#ejmlmatrix","text":"class EJMLMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory .","title":"EJMLMatrix"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/index.html#constructors","text":"Name Summary <init> EJMLMatrix(storage: SimpleMatrix) An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory .","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/index.html#properties","text":"Name Summary storage var storage: SimpleMatrix","title":"Properties"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/index.html#inherited-properties","text":"Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int","title":"Inherited Properties"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/index.html#functions","text":"Name Summary LU fun LU(): Triple < EJMLMatrix , EJMLMatrix , EJMLMatrix > LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < EJMLMatrix , EJMLMatrix > SVD fun SVD(): Triple < EJMLMatrix , EJMLMatrix , EJMLMatrix > chol fun chol(): EJMLMatrix (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): EJMLMatrix Returns a copy of this matrix (same values, new memory) det fun det(): Double Determinant of the matrix diag fun diag(): EJMLMatrix div fun div(other: Int ): EJMLMatrix fun div(other: Double ): EJMLMatrix elementSum fun elementSum(): Double Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Double >): EJMLMatrix Element-wise multiplication with another matrix epow fun epow(other: Double ): EJMLMatrix Element-wise exponentiation of each element in the matrix fun epow(other: Int ): EJMLMatrix getBaseMatrix fun getBaseMatrix(): SimpleMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): EJMLMatrix getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): EJMLMatrixFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getRow fun getRow(row: Int ): EJMLMatrix inv fun inv(): EJMLMatrix Matrix inverse (square matrices) max fun max(): Double Maximum value contained in the matrix mean fun mean(): Double Mean (average) of all the elements in the matrix. min fun min(): Double Minimum value contained in the matrix minus fun minus(other: Double ): EJMLMatrix fun minus(other: Matrix < Double >): EJMLMatrix normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): EJMLMatrix Pseudo-inverse of (non-square) matrix plus fun plus(other: Matrix < Double >): EJMLMatrix fun plus(other: Double ): EJMLMatrix setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit solve fun solve(other: Matrix < Double >): EJMLMatrix Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): EJMLMatrix fun times(other: Double ): EJMLMatrix trace fun trace(): Double The matrix trace. transpose fun transpose(): EJMLMatrix Transpose of the matrix unaryMinus fun unaryMinus(): EJMLMatrix","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/index.html#inherited-functions","text":"Name Summary T open fun T(): Matrix < T > Transpose operator. argMax abstract fun argMax(): Int Row major 1D index. argMin abstract fun argMin(): Int Row major 1D index. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/index.html#extension-functions","text":"Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/-init-.html","text":"api / koma.matrix.ejml / EJMLMatrix / <init> <init> EJMLMatrix(storage: SimpleMatrix) An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory .","title":" init "},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/-init-.html#init","text":"EJMLMatrix(storage: SimpleMatrix) An implementation of the Matrix interface using EJML. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or EJMLMatrixFactory .","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/-l-u.html","text":"api / koma.matrix.ejml / EJMLMatrix / LU LU fun LU(): Triple < EJMLMatrix , EJMLMatrix , EJMLMatrix > Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":" l u"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/-l-u.html#lu","text":"fun LU(): Triple < EJMLMatrix , EJMLMatrix , EJMLMatrix > Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":"LU"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/-q-r.html","text":"api / koma.matrix.ejml / EJMLMatrix / QR QR fun QR(): Pair < EJMLMatrix , EJMLMatrix > Overrides Matrix.QR","title":" q r"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/-q-r.html#qr","text":"fun QR(): Pair < EJMLMatrix , EJMLMatrix > Overrides Matrix.QR","title":"QR"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/-s-v-d.html","text":"api / koma.matrix.ejml / EJMLMatrix / SVD SVD fun SVD(): Triple < EJMLMatrix , EJMLMatrix , EJMLMatrix > Overrides Matrix.SVD","title":" s v d"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/-s-v-d.html#svd","text":"fun SVD(): Triple < EJMLMatrix , EJMLMatrix , EJMLMatrix > Overrides Matrix.SVD","title":"SVD"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/chol.html","text":"api / koma.matrix.ejml / EJMLMatrix / chol chol fun chol(): EJMLMatrix Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"Chol"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/chol.html#chol","text":"fun chol(): EJMLMatrix Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"chol"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/copy.html","text":"api / koma.matrix.ejml / EJMLMatrix / copy copy fun copy(): EJMLMatrix Overrides Matrix.copy Overrides DoubleMatrixBase.copy Returns a copy of this matrix (same values, new memory)","title":"Copy"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/copy.html#copy","text":"fun copy(): EJMLMatrix Overrides Matrix.copy Overrides DoubleMatrixBase.copy Returns a copy of this matrix (same values, new memory)","title":"copy"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/det.html","text":"api / koma.matrix.ejml / EJMLMatrix / det det fun det(): Double Overrides Matrix.det Determinant of the matrix","title":"Det"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/det.html#det","text":"fun det(): Double Overrides Matrix.det Determinant of the matrix","title":"det"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/diag.html","text":"api / koma.matrix.ejml / EJMLMatrix / diag diag fun diag(): EJMLMatrix Overrides Matrix.diag","title":"Diag"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/diag.html#diag","text":"fun diag(): EJMLMatrix Overrides Matrix.diag","title":"diag"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/div.html","text":"api / koma.matrix.ejml / EJMLMatrix / div div fun div(other: Int ): EJMLMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div fun div(other: Double ): EJMLMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div","title":"Div"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/div.html#div","text":"fun div(other: Int ): EJMLMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div fun div(other: Double ): EJMLMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div","title":"div"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/element-sum.html","text":"api / koma.matrix.ejml / EJMLMatrix / elementSum elementSum fun elementSum(): Double Overrides Matrix.elementSum Overrides DoubleMatrixBase.elementSum Sum of all the elements in the matrix.","title":"Element sum"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/element-sum.html#elementsum","text":"fun elementSum(): Double Overrides Matrix.elementSum Overrides DoubleMatrixBase.elementSum Sum of all the elements in the matrix.","title":"elementSum"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/element-times.html","text":"api / koma.matrix.ejml / EJMLMatrix / elementTimes elementTimes fun elementTimes(other: Matrix < Double >): EJMLMatrix Overrides Matrix.elementTimes Overrides DoubleMatrixBase.elementTimes Element-wise multiplication with another matrix","title":"Element times"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/element-times.html#elementtimes","text":"fun elementTimes(other: Matrix < Double >): EJMLMatrix Overrides Matrix.elementTimes Overrides DoubleMatrixBase.elementTimes Element-wise multiplication with another matrix","title":"elementTimes"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/epow.html","text":"api / koma.matrix.ejml / EJMLMatrix / epow epow fun epow(other: Double ): EJMLMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): EJMLMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow","title":"Epow"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/epow.html#epow","text":"fun epow(other: Double ): EJMLMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): EJMLMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow","title":"epow"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-base-matrix.html","text":"api / koma.matrix.ejml / EJMLMatrix / getBaseMatrix getBaseMatrix fun getBaseMatrix(): SimpleMatrix Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"Get base matrix"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-base-matrix.html#getbasematrix","text":"fun getBaseMatrix(): SimpleMatrix Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"getBaseMatrix"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-col.html","text":"api / koma.matrix.ejml / EJMLMatrix / getCol getCol fun getCol(col: Int ): EJMLMatrix Overrides Matrix.getCol Overrides DoubleMatrixBase.getCol","title":"Get col"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-col.html#getcol","text":"fun getCol(col: Int ): EJMLMatrix Overrides Matrix.getCol Overrides DoubleMatrixBase.getCol","title":"getCol"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-double-data.html","text":"api / koma.matrix.ejml / EJMLMatrix / getDoubleData getDoubleData fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"Get double data"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-double-data.html#getdoubledata","text":"fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"getDoubleData"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-double.html","text":"api / koma.matrix.ejml / EJMLMatrix / getDouble getDouble fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-double.html#getdouble","text":"fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-factory.html","text":"api / koma.matrix.ejml / EJMLMatrix / getFactory getFactory fun getFactory(): EJMLMatrixFactory Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"Get factory"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-factory.html#getfactory","text":"fun getFactory(): EJMLMatrixFactory Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"getFactory"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-row.html","text":"api / koma.matrix.ejml / EJMLMatrix / getRow getRow fun getRow(row: Int ): EJMLMatrix Overrides Matrix.getRow Overrides DoubleMatrixBase.getRow","title":"Get row"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/get-row.html#getrow","text":"fun getRow(row: Int ): EJMLMatrix Overrides Matrix.getRow Overrides DoubleMatrixBase.getRow","title":"getRow"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/inv.html","text":"api / koma.matrix.ejml / EJMLMatrix / inv inv fun inv(): EJMLMatrix Overrides Matrix.inv Matrix inverse (square matrices)","title":"Inv"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/inv.html#inv","text":"fun inv(): EJMLMatrix Overrides Matrix.inv Matrix inverse (square matrices)","title":"inv"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/max.html","text":"api / koma.matrix.ejml / EJMLMatrix / max max fun max(): Double Overrides Matrix.max Overrides DoubleMatrixBase.max Maximum value contained in the matrix","title":"Max"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/max.html#max","text":"fun max(): Double Overrides Matrix.max Overrides DoubleMatrixBase.max Maximum value contained in the matrix","title":"max"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/mean.html","text":"api / koma.matrix.ejml / EJMLMatrix / mean mean fun mean(): Double Overrides Matrix.mean Overrides DoubleMatrixBase.mean Mean (average) of all the elements in the matrix.","title":"Mean"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/mean.html#mean","text":"fun mean(): Double Overrides Matrix.mean Overrides DoubleMatrixBase.mean Mean (average) of all the elements in the matrix.","title":"mean"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/min.html","text":"api / koma.matrix.ejml / EJMLMatrix / min min fun min(): Double Overrides Matrix.min Overrides DoubleMatrixBase.min Minimum value contained in the matrix","title":"Min"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/min.html#min","text":"fun min(): Double Overrides Matrix.min Overrides DoubleMatrixBase.min Minimum value contained in the matrix","title":"min"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/minus.html","text":"api / koma.matrix.ejml / EJMLMatrix / minus minus fun minus(other: Double ): EJMLMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus fun minus(other: Matrix < Double >): EJMLMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus","title":"Minus"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/minus.html#minus","text":"fun minus(other: Double ): EJMLMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus fun minus(other: Matrix < Double >): EJMLMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus","title":"minus"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/norm-f.html","text":"api / koma.matrix.ejml / EJMLMatrix / normF normF fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"Norm f"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/norm-f.html#normf","text":"fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"normF"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/norm-ind-p1.html","text":"api / koma.matrix.ejml / EJMLMatrix / normIndP1 normIndP1 fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"Norm ind p1"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/norm-ind-p1.html#normindp1","text":"fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"normIndP1"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/num-cols.html","text":"api / koma.matrix.ejml / EJMLMatrix / numCols numCols fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"Num cols"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/num-cols.html#numcols","text":"fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"numCols"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/num-rows.html","text":"api / koma.matrix.ejml / EJMLMatrix / numRows numRows fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"Num rows"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/num-rows.html#numrows","text":"fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"numRows"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/pinv.html","text":"api / koma.matrix.ejml / EJMLMatrix / pinv pinv fun pinv(): EJMLMatrix Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"Pinv"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/pinv.html#pinv","text":"fun pinv(): EJMLMatrix Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"pinv"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/plus.html","text":"api / koma.matrix.ejml / EJMLMatrix / plus plus fun plus(other: Matrix < Double >): EJMLMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus fun plus(other: Double ): EJMLMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus","title":"Plus"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/plus.html#plus","text":"fun plus(other: Matrix < Double >): EJMLMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus fun plus(other: Double ): EJMLMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus","title":"plus"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/set-double.html","text":"api / koma.matrix.ejml / EJMLMatrix / setDouble setDouble fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/set-double.html#setdouble","text":"fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/solve.html","text":"api / koma.matrix.ejml / EJMLMatrix / solve solve fun solve(other: Matrix < Double >): EJMLMatrix Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"Solve"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/solve.html#solve","text":"fun solve(other: Matrix < Double >): EJMLMatrix Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"solve"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/storage.html","text":"api / koma.matrix.ejml / EJMLMatrix / storage storage var storage: SimpleMatrix","title":"Storage"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/storage.html#storage","text":"var storage: SimpleMatrix","title":"storage"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/times.html","text":"api / koma.matrix.ejml / EJMLMatrix / times times fun times(other: Matrix < Double >): EJMLMatrix Overrides Matrix.times fun times(other: Double ): EJMLMatrix Overrides Matrix.times Overrides DoubleMatrixBase.times","title":"Times"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/times.html#times","text":"fun times(other: Matrix < Double >): EJMLMatrix Overrides Matrix.times fun times(other: Double ): EJMLMatrix Overrides Matrix.times Overrides DoubleMatrixBase.times","title":"times"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/trace.html","text":"api / koma.matrix.ejml / EJMLMatrix / trace trace fun trace(): Double Overrides Matrix.trace The matrix trace.","title":"Trace"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/trace.html#trace","text":"fun trace(): Double Overrides Matrix.trace The matrix trace.","title":"trace"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/transpose.html","text":"api / koma.matrix.ejml / EJMLMatrix / transpose transpose fun transpose(): EJMLMatrix Overrides Matrix.transpose Overrides DoubleMatrixBase.transpose Transpose of the matrix","title":"Transpose"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/transpose.html#transpose","text":"fun transpose(): EJMLMatrix Overrides Matrix.transpose Overrides DoubleMatrixBase.transpose Transpose of the matrix","title":"transpose"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/unary-minus.html","text":"api / koma.matrix.ejml / EJMLMatrix / unaryMinus unaryMinus fun unaryMinus(): EJMLMatrix Overrides Matrix.unaryMinus Overrides DoubleMatrixBase.unaryMinus","title":"Unary minus"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix/unary-minus.html#unaryminus","text":"fun unaryMinus(): EJMLMatrix Overrides Matrix.unaryMinus Overrides DoubleMatrixBase.unaryMinus","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/index.html","text":"api / koma.matrix.ejml / EJMLMatrixFactory EJMLMatrixFactory class EJMLMatrixFactory : DoubleFactoryBase < EJMLMatrix > Constructors Name Summary <init> EJMLMatrixFactory() Functions Name Summary create fun create(data: IntRange ): EJMLMatrix Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): EJMLMatrix Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): EJMLMatrix Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): EJMLMatrix Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): EJMLMatrix Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): EJMLMatrix Creates a one initialized matrix of the requested shape zeros fun zeros(rows: Int , cols: Int ): EJMLMatrix Generate a zero initialized matrix of the requested shape. Inherited Functions Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/index.html#ejmlmatrixfactory","text":"class EJMLMatrixFactory : DoubleFactoryBase < EJMLMatrix >","title":"EJMLMatrixFactory"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/index.html#constructors","text":"Name Summary <init> EJMLMatrixFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/index.html#functions","text":"Name Summary create fun create(data: IntRange ): EJMLMatrix Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): EJMLMatrix Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): EJMLMatrix Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): EJMLMatrix Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): EJMLMatrix Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): EJMLMatrix Creates a one initialized matrix of the requested shape zeros fun zeros(rows: Int , cols: Int ): EJMLMatrix Generate a zero initialized matrix of the requested shape.","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/index.html#inherited-functions","text":"Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/-init-.html","text":"api / koma.matrix.ejml / EJMLMatrixFactory / <init> <init> EJMLMatrixFactory()","title":" init "},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/-init-.html#init","text":"EJMLMatrixFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/create.html","text":"api / koma.matrix.ejml / EJMLMatrixFactory / create create fun create(data: IntRange ): EJMLMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): EJMLMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): EJMLMatrix Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"Create"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/create.html#create","text":"fun create(data: IntRange ): EJMLMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): EJMLMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): EJMLMatrix Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"create"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/eye.html","text":"api / koma.matrix.ejml / EJMLMatrixFactory / eye eye fun eye(size: Int ): EJMLMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): EJMLMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"Eye"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/eye.html#eye","text":"fun eye(size: Int ): EJMLMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): EJMLMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"eye"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/ones.html","text":"api / koma.matrix.ejml / EJMLMatrixFactory / ones ones fun ones(rows: Int , cols: Int ): EJMLMatrix Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): EJMLMatrix Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/zeros.html","text":"api / koma.matrix.ejml / EJMLMatrixFactory / zeros zeros fun zeros(rows: Int , cols: Int ): EJMLMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"Zeros"},{"location":"Reference_API_Docs/koma.matrix.ejml/-e-j-m-l-matrix-factory/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): EJMLMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"zeros"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/index.html","text":"api / koma.matrix.ejml.backend Package koma.matrix.ejml.backend Types Name Summary arr object arr mat object mat Extensions for External Classes Name Summary kotlin.Double kotlin.Int org.ejml.simple.SimpleMatrix Functions Name Summary eye fun eye(size: Int ): SimpleMatrix ones fun ones(rows: Int , cols: Int ): SimpleMatrix zeros fun zeros(rows: Int , cols: Int ): SimpleMatrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/index.html#package-komamatrixejmlbackend","text":"","title":"Package koma.matrix.ejml.backend"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/index.html#types","text":"Name Summary arr object arr mat object mat","title":"Types"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/index.html#extensions-for-external-classes","text":"Name Summary kotlin.Double kotlin.Int org.ejml.simple.SimpleMatrix","title":"Extensions for External Classes"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/index.html#functions","text":"Name Summary eye fun eye(size: Int ): SimpleMatrix ones fun ones(rows: Int , cols: Int ): SimpleMatrix zeros fun zeros(rows: Int , cols: Int ): SimpleMatrix","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/eye.html","text":"api / koma.matrix.ejml.backend / eye eye fun eye(size: Int ): SimpleMatrix","title":"Eye"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/eye.html#eye","text":"fun eye(size: Int ): SimpleMatrix","title":"eye"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/ones.html","text":"api / koma.matrix.ejml.backend / ones ones fun ones(rows: Int , cols: Int ): SimpleMatrix","title":"Ones"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): SimpleMatrix","title":"ones"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/zeros.html","text":"api / koma.matrix.ejml.backend / zeros zeros fun zeros(rows: Int , cols: Int ): SimpleMatrix","title":"Zeros"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): SimpleMatrix","title":"zeros"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/arr/index.html","text":"api / koma.matrix.ejml.backend / arr arr object arr Functions Name Summary get operator fun get(vararg ts: Any ): DoubleArray","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/arr/index.html#arr","text":"object arr","title":"arr"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/arr/index.html#functions","text":"Name Summary get operator fun get(vararg ts: Any ): DoubleArray","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/arr/get.html","text":"api / koma.matrix.ejml.backend / arr / get get operator fun get(vararg ts: Any ): DoubleArray","title":"Get"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/arr/get.html#get","text":"operator fun get(vararg ts: Any ): DoubleArray","title":"get"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/kotlin.-double/index.html","text":"api / koma.matrix.ejml.backend / kotlin.Double Extensions for kotlin.Double Name Summary end fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/kotlin.-double/index.html#extensions-for-kotlindouble","text":"Name Summary end fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"Extensions for kotlin.Double"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/kotlin.-double/end.html","text":"api / koma.matrix.ejml.backend / kotlin.Double / end end fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"End"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/kotlin.-double/end.html#end","text":"fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"end"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/kotlin.-int/index.html","text":"api / koma.matrix.ejml.backend / kotlin.Int Extensions for kotlin.Int Name Summary end fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/kotlin.-int/index.html#extensions-for-kotlinint","text":"Name Summary end fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"Extensions for kotlin.Int"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/kotlin.-int/end.html","text":"api / koma.matrix.ejml.backend / kotlin.Int / end end fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"End"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/kotlin.-int/end.html#end","text":"fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"end"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/mat/index.html","text":"api / koma.matrix.ejml.backend / mat mat object mat Functions Name Summary get operator fun get(vararg ts: Any ): SimpleMatrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/mat/index.html#mat","text":"object mat","title":"mat"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/mat/index.html#functions","text":"Name Summary get operator fun get(vararg ts: Any ): SimpleMatrix","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/mat/get.html","text":"api / koma.matrix.ejml.backend / mat / get get operator fun get(vararg ts: Any ): SimpleMatrix","title":"Get"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/mat/get.html#get","text":"operator fun get(vararg ts: Any ): SimpleMatrix","title":"get"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/index.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix Extensions for org.ejml.simple.SimpleMatrix Name Summary LU fun SimpleMatrix.LU(): LUDecomposition_F64<DMatrixRMaj> QR fun SimpleMatrix.QR(): QRDecomposition<DMatrixRMaj> T val SimpleMatrix.T: SimpleMatrix chol fun SimpleMatrix.chol(): CholeskyDecomposition_F64<DMatrixRMaj> div operator fun SimpleMatrix.div(other: Int ): SimpleMatrix operator fun SimpleMatrix.div(other: Double ): SimpleMatrix get operator fun SimpleMatrix.get(i: Int ): Double operator fun SimpleMatrix.get(i: Int , j: Int ): Double inv fun SimpleMatrix.inv(): SimpleMatrix map fun SimpleMatrix.map(f: ( Double ) -> Double ): SimpleMatrix plus operator fun SimpleMatrix.plus(other: Int ): SimpleMatrix operator fun SimpleMatrix.plus(other: Double ): SimpleMatrix rem operator fun SimpleMatrix.rem(other: SimpleMatrix): SimpleMatrix set operator fun SimpleMatrix.set(i: Int , v: Int ): Unit operator fun SimpleMatrix.set(i: Int , j: Int , v: Int ): Unit operator fun SimpleMatrix.set(i: Int , j: Int , v: Double ): Unit times operator fun SimpleMatrix.times(other: SimpleMatrix): SimpleMatrix operator fun SimpleMatrix.times(other: Int ): SimpleMatrix operator fun SimpleMatrix.times(other: Double ): SimpleMatrix unaryMinus operator fun SimpleMatrix.unaryMinus(): SimpleMatrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/index.html#extensions-for-orgejmlsimplesimplematrix","text":"Name Summary LU fun SimpleMatrix.LU(): LUDecomposition_F64<DMatrixRMaj> QR fun SimpleMatrix.QR(): QRDecomposition<DMatrixRMaj> T val SimpleMatrix.T: SimpleMatrix chol fun SimpleMatrix.chol(): CholeskyDecomposition_F64<DMatrixRMaj> div operator fun SimpleMatrix.div(other: Int ): SimpleMatrix operator fun SimpleMatrix.div(other: Double ): SimpleMatrix get operator fun SimpleMatrix.get(i: Int ): Double operator fun SimpleMatrix.get(i: Int , j: Int ): Double inv fun SimpleMatrix.inv(): SimpleMatrix map fun SimpleMatrix.map(f: ( Double ) -> Double ): SimpleMatrix plus operator fun SimpleMatrix.plus(other: Int ): SimpleMatrix operator fun SimpleMatrix.plus(other: Double ): SimpleMatrix rem operator fun SimpleMatrix.rem(other: SimpleMatrix): SimpleMatrix set operator fun SimpleMatrix.set(i: Int , v: Int ): Unit operator fun SimpleMatrix.set(i: Int , j: Int , v: Int ): Unit operator fun SimpleMatrix.set(i: Int , j: Int , v: Double ): Unit times operator fun SimpleMatrix.times(other: SimpleMatrix): SimpleMatrix operator fun SimpleMatrix.times(other: Int ): SimpleMatrix operator fun SimpleMatrix.times(other: Double ): SimpleMatrix unaryMinus operator fun SimpleMatrix.unaryMinus(): SimpleMatrix","title":"Extensions for org.ejml.simple.SimpleMatrix"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/-l-u.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / LU LU fun SimpleMatrix.LU(): LUDecomposition_F64<DMatrixRMaj>","title":" l u"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/-l-u.html#lu","text":"fun SimpleMatrix.LU(): LUDecomposition_F64<DMatrixRMaj>","title":"LU"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/-q-r.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / QR QR fun SimpleMatrix.QR(): QRDecomposition<DMatrixRMaj>","title":" q r"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/-q-r.html#qr","text":"fun SimpleMatrix.QR(): QRDecomposition<DMatrixRMaj>","title":"QR"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/-t.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / T T val SimpleMatrix.T: SimpleMatrix","title":" t"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/-t.html#t","text":"val SimpleMatrix.T: SimpleMatrix","title":"T"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/chol.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / chol chol fun SimpleMatrix.chol(): CholeskyDecomposition_F64<DMatrixRMaj>","title":"Chol"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/chol.html#chol","text":"fun SimpleMatrix.chol(): CholeskyDecomposition_F64<DMatrixRMaj>","title":"chol"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/div.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / div div operator fun SimpleMatrix.div(other: Int ): SimpleMatrix operator fun SimpleMatrix.div(other: Double ): SimpleMatrix","title":"Div"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/div.html#div","text":"operator fun SimpleMatrix.div(other: Int ): SimpleMatrix operator fun SimpleMatrix.div(other: Double ): SimpleMatrix","title":"div"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/get.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / get get operator fun SimpleMatrix.get(i: Int ): Double operator fun SimpleMatrix.get(i: Int , j: Int ): Double","title":"Get"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/get.html#get","text":"operator fun SimpleMatrix.get(i: Int ): Double operator fun SimpleMatrix.get(i: Int , j: Int ): Double","title":"get"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/inv.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / inv inv fun SimpleMatrix.inv(): SimpleMatrix","title":"Inv"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/inv.html#inv","text":"fun SimpleMatrix.inv(): SimpleMatrix","title":"inv"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/map.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / map map fun SimpleMatrix.map(f: ( Double ) -> Double ): SimpleMatrix","title":"Map"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/map.html#map","text":"fun SimpleMatrix.map(f: ( Double ) -> Double ): SimpleMatrix","title":"map"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/plus.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / plus plus operator fun SimpleMatrix.plus(other: Int ): SimpleMatrix operator fun SimpleMatrix.plus(other: Double ): SimpleMatrix","title":"Plus"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/plus.html#plus","text":"operator fun SimpleMatrix.plus(other: Int ): SimpleMatrix operator fun SimpleMatrix.plus(other: Double ): SimpleMatrix","title":"plus"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/rem.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / rem rem operator fun SimpleMatrix.rem(other: SimpleMatrix): SimpleMatrix","title":"Rem"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/rem.html#rem","text":"operator fun SimpleMatrix.rem(other: SimpleMatrix): SimpleMatrix","title":"rem"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/set.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / set set operator fun SimpleMatrix.set(i: Int , v: Int ): Unit operator fun SimpleMatrix.set(i: Int , j: Int , v: Int ): Unit operator fun SimpleMatrix.set(i: Int , j: Int , v: Double ): Unit","title":"Set"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/set.html#set","text":"operator fun SimpleMatrix.set(i: Int , v: Int ): Unit operator fun SimpleMatrix.set(i: Int , j: Int , v: Int ): Unit operator fun SimpleMatrix.set(i: Int , j: Int , v: Double ): Unit","title":"set"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/times.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / times times operator fun SimpleMatrix.times(other: SimpleMatrix): SimpleMatrix operator fun SimpleMatrix.times(other: Int ): SimpleMatrix operator fun SimpleMatrix.times(other: Double ): SimpleMatrix","title":"Times"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/times.html#times","text":"operator fun SimpleMatrix.times(other: SimpleMatrix): SimpleMatrix operator fun SimpleMatrix.times(other: Int ): SimpleMatrix operator fun SimpleMatrix.times(other: Double ): SimpleMatrix","title":"times"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/unary-minus.html","text":"api / koma.matrix.ejml.backend / org.ejml.simple.SimpleMatrix / unaryMinus unaryMinus operator fun SimpleMatrix.unaryMinus(): SimpleMatrix","title":"Unary minus"},{"location":"Reference_API_Docs/koma.matrix.ejml.backend/org.ejml.simple.-simple-matrix/unary-minus.html#unaryminus","text":"operator fun SimpleMatrix.unaryMinus(): SimpleMatrix","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.matrix.jblas/index.html","text":"api / koma.matrix.jblas Package koma.matrix.jblas Types Name Summary JBlasMatrix class JBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . JBlasMatrixFactory class JBlasMatrixFactory : DoubleFactoryBase < JBlasMatrix >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.jblas/index.html#package-komamatrixjblas","text":"","title":"Package koma.matrix.jblas"},{"location":"Reference_API_Docs/koma.matrix.jblas/index.html#types","text":"Name Summary JBlasMatrix class JBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . JBlasMatrixFactory class JBlasMatrixFactory : DoubleFactoryBase < JBlasMatrix >","title":"Types"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/index.html","text":"api / koma.matrix.jblas / JBlasMatrix JBlasMatrix class JBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . Constructors Name Summary <init> JBlasMatrix(storage: DoubleMatrix) An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory . Properties Name Summary storage var storage: DoubleMatrix Inherited Properties Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int Functions Name Summary LU fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < Matrix < Double >, Matrix < Double >> SVD fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): JBlasMatrix (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): JBlasMatrix Returns a copy of this matrix (same values, new memory) det fun det(): Double Determinant of the matrix diag fun diag(): JBlasMatrix div fun div(other: Int ): JBlasMatrix fun div(other: Double ): JBlasMatrix elementSum fun elementSum(): Double Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Double >): JBlasMatrix Element-wise multiplication with another matrix epow fun epow(other: Double ): JBlasMatrix Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Double > expm fun expm(): JBlasMatrix Compute the matrix exponential e^x (NOT elementwise) getBaseMatrix fun getBaseMatrix(): DoubleMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): JBlasMatrix getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): JBlasMatrixFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getRow fun getRow(row: Int ): JBlasMatrix inv fun inv(): JBlasMatrix Matrix inverse (square matrices) max fun max(): Double Maximum value contained in the matrix mean fun mean(): Double Mean (average) of all the elements in the matrix. min fun min(): Double Minimum value contained in the matrix minus fun minus(other: Double ): JBlasMatrix fun minus(other: Matrix < Double >): JBlasMatrix normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Matrix < Double > Pseudo-inverse of (non-square) matrix plus fun plus(other: Double ): JBlasMatrix fun plus(other: Matrix < Double >): JBlasMatrix setCol fun setCol(index: Int , col: Matrix < Double >): Unit setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit setRow fun setRow(index: Int , row: Matrix < Double >): Unit solve fun solve(other: Matrix < Double >): Matrix < Double > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): JBlasMatrix fun times(other: Double ): JBlasMatrix trace fun trace(): Double The matrix trace. transpose fun transpose(): JBlasMatrix Transpose of the matrix unaryMinus fun unaryMinus(): JBlasMatrix Inherited Functions Name Summary T open fun T(): Matrix < T > Transpose operator. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange Extension Functions Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/index.html#jblasmatrix","text":"class JBlasMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory .","title":"JBlasMatrix"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/index.html#constructors","text":"Name Summary <init> JBlasMatrix(storage: DoubleMatrix) An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory .","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/index.html#properties","text":"Name Summary storage var storage: DoubleMatrix","title":"Properties"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/index.html#inherited-properties","text":"Name Summary T open val T: Matrix < T > Transpose operator. size open val size: Int","title":"Inherited Properties"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/index.html#functions","text":"Name Summary LU fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < Matrix < Double >, Matrix < Double >> SVD fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): JBlasMatrix (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): JBlasMatrix Returns a copy of this matrix (same values, new memory) det fun det(): Double Determinant of the matrix diag fun diag(): JBlasMatrix div fun div(other: Int ): JBlasMatrix fun div(other: Double ): JBlasMatrix elementSum fun elementSum(): Double Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Double >): JBlasMatrix Element-wise multiplication with another matrix epow fun epow(other: Double ): JBlasMatrix Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Double > expm fun expm(): JBlasMatrix Compute the matrix exponential e^x (NOT elementwise) getBaseMatrix fun getBaseMatrix(): DoubleMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): JBlasMatrix getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): JBlasMatrixFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getRow fun getRow(row: Int ): JBlasMatrix inv fun inv(): JBlasMatrix Matrix inverse (square matrices) max fun max(): Double Maximum value contained in the matrix mean fun mean(): Double Mean (average) of all the elements in the matrix. min fun min(): Double Minimum value contained in the matrix minus fun minus(other: Double ): JBlasMatrix fun minus(other: Matrix < Double >): JBlasMatrix normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Matrix < Double > Pseudo-inverse of (non-square) matrix plus fun plus(other: Double ): JBlasMatrix fun plus(other: Matrix < Double >): JBlasMatrix setCol fun setCol(index: Int , col: Matrix < Double >): Unit setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit setRow fun setRow(index: Int , row: Matrix < Double >): Unit solve fun solve(other: Matrix < Double >): Matrix < Double > Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): JBlasMatrix fun times(other: Double ): JBlasMatrix trace fun trace(): Double The matrix trace. transpose fun transpose(): JBlasMatrix Transpose of the matrix unaryMinus fun unaryMinus(): JBlasMatrix","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/index.html#inherited-functions","text":"Name Summary T open fun T(): Matrix < T > Transpose operator. asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/index.html#extension-functions","text":"Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/-init-.html","text":"api / koma.matrix.jblas / JBlasMatrix / <init> <init> JBlasMatrix(storage: DoubleMatrix) An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory .","title":" init "},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/-init-.html#init","text":"JBlasMatrix(storage: DoubleMatrix) An implementation of the Matrix interface using jBlas. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or JBlasMatrixFactory .","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/-l-u.html","text":"api / koma.matrix.jblas / JBlasMatrix / LU LU fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":" l u"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/-l-u.html#lu","text":"fun LU(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":"LU"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/-q-r.html","text":"api / koma.matrix.jblas / JBlasMatrix / QR QR fun QR(): Pair < Matrix < Double >, Matrix < Double >> Overrides Matrix.QR","title":" q r"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/-q-r.html#qr","text":"fun QR(): Pair < Matrix < Double >, Matrix < Double >> Overrides Matrix.QR","title":"QR"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/-s-v-d.html","text":"api / koma.matrix.jblas / JBlasMatrix / SVD SVD fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.SVD","title":" s v d"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/-s-v-d.html#svd","text":"fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.SVD","title":"SVD"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/arg-max.html","text":"api / koma.matrix.jblas / JBlasMatrix / argMax argMax fun argMax(): Int Overrides Matrix.argMax Overrides DoubleMatrixBase.argMax Row major 1D index.","title":"Arg max"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/arg-max.html#argmax","text":"fun argMax(): Int Overrides Matrix.argMax Overrides DoubleMatrixBase.argMax Row major 1D index.","title":"argMax"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/arg-min.html","text":"api / koma.matrix.jblas / JBlasMatrix / argMin argMin fun argMin(): Int Overrides Matrix.argMin Overrides DoubleMatrixBase.argMin Row major 1D index.","title":"Arg min"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/arg-min.html#argmin","text":"fun argMin(): Int Overrides Matrix.argMin Overrides DoubleMatrixBase.argMin Row major 1D index.","title":"argMin"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/chol.html","text":"api / koma.matrix.jblas / JBlasMatrix / chol chol fun chol(): JBlasMatrix Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"Chol"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/chol.html#chol","text":"fun chol(): JBlasMatrix Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"chol"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/copy.html","text":"api / koma.matrix.jblas / JBlasMatrix / copy copy fun copy(): JBlasMatrix Overrides Matrix.copy Overrides DoubleMatrixBase.copy Returns a copy of this matrix (same values, new memory)","title":"Copy"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/copy.html#copy","text":"fun copy(): JBlasMatrix Overrides Matrix.copy Overrides DoubleMatrixBase.copy Returns a copy of this matrix (same values, new memory)","title":"copy"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/det.html","text":"api / koma.matrix.jblas / JBlasMatrix / det det fun det(): Double Overrides Matrix.det Determinant of the matrix","title":"Det"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/det.html#det","text":"fun det(): Double Overrides Matrix.det Determinant of the matrix","title":"det"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/diag.html","text":"api / koma.matrix.jblas / JBlasMatrix / diag diag fun diag(): JBlasMatrix Overrides Matrix.diag","title":"Diag"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/diag.html#diag","text":"fun diag(): JBlasMatrix Overrides Matrix.diag","title":"diag"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/div.html","text":"api / koma.matrix.jblas / JBlasMatrix / div div fun div(other: Int ): JBlasMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div fun div(other: Double ): JBlasMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div","title":"Div"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/div.html#div","text":"fun div(other: Int ): JBlasMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div fun div(other: Double ): JBlasMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div","title":"div"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/element-sum.html","text":"api / koma.matrix.jblas / JBlasMatrix / elementSum elementSum fun elementSum(): Double Overrides Matrix.elementSum Overrides DoubleMatrixBase.elementSum Sum of all the elements in the matrix.","title":"Element sum"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/element-sum.html#elementsum","text":"fun elementSum(): Double Overrides Matrix.elementSum Overrides DoubleMatrixBase.elementSum Sum of all the elements in the matrix.","title":"elementSum"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/element-times.html","text":"api / koma.matrix.jblas / JBlasMatrix / elementTimes elementTimes fun elementTimes(other: Matrix < Double >): JBlasMatrix Overrides Matrix.elementTimes Overrides DoubleMatrixBase.elementTimes Element-wise multiplication with another matrix","title":"Element times"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/element-times.html#elementtimes","text":"fun elementTimes(other: Matrix < Double >): JBlasMatrix Overrides Matrix.elementTimes Overrides DoubleMatrixBase.elementTimes Element-wise multiplication with another matrix","title":"elementTimes"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/epow.html","text":"api / koma.matrix.jblas / JBlasMatrix / epow epow fun epow(other: Double ): JBlasMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Double > Overrides Matrix.epow Overrides DoubleMatrixBase.epow","title":"Epow"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/epow.html#epow","text":"fun epow(other: Double ): JBlasMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): Matrix < Double > Overrides Matrix.epow Overrides DoubleMatrixBase.epow","title":"epow"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/expm.html","text":"api / koma.matrix.jblas / JBlasMatrix / expm expm fun expm(): JBlasMatrix Overrides Matrix.expm Overrides DoubleMatrixBase.expm Compute the matrix exponential e^x (NOT elementwise)","title":"Expm"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/expm.html#expm","text":"fun expm(): JBlasMatrix Overrides Matrix.expm Overrides DoubleMatrixBase.expm Compute the matrix exponential e^x (NOT elementwise)","title":"expm"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-base-matrix.html","text":"api / koma.matrix.jblas / JBlasMatrix / getBaseMatrix getBaseMatrix fun getBaseMatrix(): DoubleMatrix Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"Get base matrix"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-base-matrix.html#getbasematrix","text":"fun getBaseMatrix(): DoubleMatrix Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"getBaseMatrix"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-col.html","text":"api / koma.matrix.jblas / JBlasMatrix / getCol getCol fun getCol(col: Int ): JBlasMatrix Overrides Matrix.getCol Overrides DoubleMatrixBase.getCol","title":"Get col"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-col.html#getcol","text":"fun getCol(col: Int ): JBlasMatrix Overrides Matrix.getCol Overrides DoubleMatrixBase.getCol","title":"getCol"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-double-data.html","text":"api / koma.matrix.jblas / JBlasMatrix / getDoubleData getDoubleData fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"Get double data"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-double-data.html#getdoubledata","text":"fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"getDoubleData"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-double.html","text":"api / koma.matrix.jblas / JBlasMatrix / getDouble getDouble fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-double.html#getdouble","text":"fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-factory.html","text":"api / koma.matrix.jblas / JBlasMatrix / getFactory getFactory fun getFactory(): JBlasMatrixFactory Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"Get factory"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-factory.html#getfactory","text":"fun getFactory(): JBlasMatrixFactory Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"getFactory"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-row.html","text":"api / koma.matrix.jblas / JBlasMatrix / getRow getRow fun getRow(row: Int ): JBlasMatrix Overrides Matrix.getRow Overrides DoubleMatrixBase.getRow","title":"Get row"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/get-row.html#getrow","text":"fun getRow(row: Int ): JBlasMatrix Overrides Matrix.getRow Overrides DoubleMatrixBase.getRow","title":"getRow"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/inv.html","text":"api / koma.matrix.jblas / JBlasMatrix / inv inv fun inv(): JBlasMatrix Overrides Matrix.inv Matrix inverse (square matrices)","title":"Inv"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/inv.html#inv","text":"fun inv(): JBlasMatrix Overrides Matrix.inv Matrix inverse (square matrices)","title":"inv"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/max.html","text":"api / koma.matrix.jblas / JBlasMatrix / max max fun max(): Double Overrides Matrix.max Overrides DoubleMatrixBase.max Maximum value contained in the matrix","title":"Max"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/max.html#max","text":"fun max(): Double Overrides Matrix.max Overrides DoubleMatrixBase.max Maximum value contained in the matrix","title":"max"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/mean.html","text":"api / koma.matrix.jblas / JBlasMatrix / mean mean fun mean(): Double Overrides Matrix.mean Overrides DoubleMatrixBase.mean Mean (average) of all the elements in the matrix.","title":"Mean"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/mean.html#mean","text":"fun mean(): Double Overrides Matrix.mean Overrides DoubleMatrixBase.mean Mean (average) of all the elements in the matrix.","title":"mean"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/min.html","text":"api / koma.matrix.jblas / JBlasMatrix / min min fun min(): Double Overrides Matrix.min Overrides DoubleMatrixBase.min Minimum value contained in the matrix","title":"Min"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/min.html#min","text":"fun min(): Double Overrides Matrix.min Overrides DoubleMatrixBase.min Minimum value contained in the matrix","title":"min"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/minus.html","text":"api / koma.matrix.jblas / JBlasMatrix / minus minus fun minus(other: Double ): JBlasMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus fun minus(other: Matrix < Double >): JBlasMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus","title":"Minus"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/minus.html#minus","text":"fun minus(other: Double ): JBlasMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus fun minus(other: Matrix < Double >): JBlasMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus","title":"minus"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/norm-f.html","text":"api / koma.matrix.jblas / JBlasMatrix / normF normF fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"Norm f"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/norm-f.html#normf","text":"fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"normF"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/norm-ind-p1.html","text":"api / koma.matrix.jblas / JBlasMatrix / normIndP1 normIndP1 fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"Norm ind p1"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/norm-ind-p1.html#normindp1","text":"fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"normIndP1"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/num-cols.html","text":"api / koma.matrix.jblas / JBlasMatrix / numCols numCols fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"Num cols"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/num-cols.html#numcols","text":"fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"numCols"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/num-rows.html","text":"api / koma.matrix.jblas / JBlasMatrix / numRows numRows fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"Num rows"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/num-rows.html#numrows","text":"fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"numRows"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/pinv.html","text":"api / koma.matrix.jblas / JBlasMatrix / pinv pinv fun pinv(): Matrix < Double > Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"Pinv"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/pinv.html#pinv","text":"fun pinv(): Matrix < Double > Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"pinv"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/plus.html","text":"api / koma.matrix.jblas / JBlasMatrix / plus plus fun plus(other: Double ): JBlasMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus fun plus(other: Matrix < Double >): JBlasMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus","title":"Plus"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/plus.html#plus","text":"fun plus(other: Double ): JBlasMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus fun plus(other: Matrix < Double >): JBlasMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus","title":"plus"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/set-col.html","text":"api / koma.matrix.jblas / JBlasMatrix / setCol setCol fun setCol(index: Int , col: Matrix < Double >): Unit Overrides Matrix.setCol Overrides DoubleMatrixBase.setCol","title":"Set col"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/set-col.html#setcol","text":"fun setCol(index: Int , col: Matrix < Double >): Unit Overrides Matrix.setCol Overrides DoubleMatrixBase.setCol","title":"setCol"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/set-double.html","text":"api / koma.matrix.jblas / JBlasMatrix / setDouble setDouble fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/set-double.html#setdouble","text":"fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/set-row.html","text":"api / koma.matrix.jblas / JBlasMatrix / setRow setRow fun setRow(index: Int , row: Matrix < Double >): Unit Overrides Matrix.setRow Overrides DoubleMatrixBase.setRow","title":"Set row"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/set-row.html#setrow","text":"fun setRow(index: Int , row: Matrix < Double >): Unit Overrides Matrix.setRow Overrides DoubleMatrixBase.setRow","title":"setRow"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/solve.html","text":"api / koma.matrix.jblas / JBlasMatrix / solve solve fun solve(other: Matrix < Double >): Matrix < Double > Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"Solve"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/solve.html#solve","text":"fun solve(other: Matrix < Double >): Matrix < Double > Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"solve"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/storage.html","text":"api / koma.matrix.jblas / JBlasMatrix / storage storage var storage: DoubleMatrix","title":"Storage"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/storage.html#storage","text":"var storage: DoubleMatrix","title":"storage"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/times.html","text":"api / koma.matrix.jblas / JBlasMatrix / times times fun times(other: Matrix < Double >): JBlasMatrix Overrides Matrix.times fun times(other: Double ): JBlasMatrix Overrides Matrix.times Overrides DoubleMatrixBase.times","title":"Times"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/times.html#times","text":"fun times(other: Matrix < Double >): JBlasMatrix Overrides Matrix.times fun times(other: Double ): JBlasMatrix Overrides Matrix.times Overrides DoubleMatrixBase.times","title":"times"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/trace.html","text":"api / koma.matrix.jblas / JBlasMatrix / trace trace fun trace(): Double Overrides Matrix.trace The matrix trace.","title":"Trace"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/trace.html#trace","text":"fun trace(): Double Overrides Matrix.trace The matrix trace.","title":"trace"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/transpose.html","text":"api / koma.matrix.jblas / JBlasMatrix / transpose transpose fun transpose(): JBlasMatrix Overrides Matrix.transpose Overrides DoubleMatrixBase.transpose Transpose of the matrix","title":"Transpose"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/transpose.html#transpose","text":"fun transpose(): JBlasMatrix Overrides Matrix.transpose Overrides DoubleMatrixBase.transpose Transpose of the matrix","title":"transpose"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/unary-minus.html","text":"api / koma.matrix.jblas / JBlasMatrix / unaryMinus unaryMinus fun unaryMinus(): JBlasMatrix Overrides Matrix.unaryMinus Overrides DoubleMatrixBase.unaryMinus","title":"Unary minus"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix/unary-minus.html#unaryminus","text":"fun unaryMinus(): JBlasMatrix Overrides Matrix.unaryMinus Overrides DoubleMatrixBase.unaryMinus","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/index.html","text":"api / koma.matrix.jblas / JBlasMatrixFactory JBlasMatrixFactory class JBlasMatrixFactory : DoubleFactoryBase < JBlasMatrix > Constructors Name Summary <init> JBlasMatrixFactory() Functions Name Summary create fun create(data: IntRange ): JBlasMatrix Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): JBlasMatrix Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): JBlasMatrix Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): JBlasMatrix Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): JBlasMatrix Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): JBlasMatrix Creates a one initialized matrix of the requested shape zeros fun zeros(rows: Int , cols: Int ): JBlasMatrix Generate a zero initialized matrix of the requested shape. Inherited Functions Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/index.html#jblasmatrixfactory","text":"class JBlasMatrixFactory : DoubleFactoryBase < JBlasMatrix >","title":"JBlasMatrixFactory"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/index.html#constructors","text":"Name Summary <init> JBlasMatrixFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/index.html#functions","text":"Name Summary create fun create(data: IntRange ): JBlasMatrix Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): JBlasMatrix Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): JBlasMatrix Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): JBlasMatrix Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): JBlasMatrix Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): JBlasMatrix Creates a one initialized matrix of the requested shape zeros fun zeros(rows: Int , cols: Int ): JBlasMatrix Generate a zero initialized matrix of the requested shape.","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/index.html#inherited-functions","text":"Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/-init-.html","text":"api / koma.matrix.jblas / JBlasMatrixFactory / <init> <init> JBlasMatrixFactory()","title":" init "},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/-init-.html#init","text":"JBlasMatrixFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/create.html","text":"api / koma.matrix.jblas / JBlasMatrixFactory / create create fun create(data: IntRange ): JBlasMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): JBlasMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): JBlasMatrix Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"Create"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/create.html#create","text":"fun create(data: IntRange ): JBlasMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): JBlasMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): JBlasMatrix Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"create"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/eye.html","text":"api / koma.matrix.jblas / JBlasMatrixFactory / eye eye fun eye(size: Int ): JBlasMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): JBlasMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"Eye"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/eye.html#eye","text":"fun eye(size: Int ): JBlasMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): JBlasMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"eye"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/ones.html","text":"api / koma.matrix.jblas / JBlasMatrixFactory / ones ones fun ones(rows: Int , cols: Int ): JBlasMatrix Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): JBlasMatrix Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/zeros.html","text":"api / koma.matrix.jblas / JBlasMatrixFactory / zeros zeros fun zeros(rows: Int , cols: Int ): JBlasMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"Zeros"},{"location":"Reference_API_Docs/koma.matrix.jblas/-j-blas-matrix-factory/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): JBlasMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"zeros"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/index.html","text":"api / koma.matrix.jblas.backend Package koma.matrix.jblas.backend Types Name Summary arr object arr mat object mat Extensions for External Classes Name Summary kotlin.Double kotlin.Int org.jblas.DoubleMatrix Functions Name Summary eye fun eye(size: Int ): DoubleMatrix ones fun ones(rows: Int , cols: Int ): DoubleMatrix rand fun rand(len: Int ): DoubleMatrix fun rand(rows: Int , cols: Int ): DoubleMatrix randn fun randn(len: Int ): DoubleMatrix fun randn(rows: Int , cols: Int ): DoubleMatrix zeros fun zeros(rows: Int , cols: Int ): DoubleMatrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/index.html#package-komamatrixjblasbackend","text":"","title":"Package koma.matrix.jblas.backend"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/index.html#types","text":"Name Summary arr object arr mat object mat","title":"Types"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/index.html#extensions-for-external-classes","text":"Name Summary kotlin.Double kotlin.Int org.jblas.DoubleMatrix","title":"Extensions for External Classes"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/index.html#functions","text":"Name Summary eye fun eye(size: Int ): DoubleMatrix ones fun ones(rows: Int , cols: Int ): DoubleMatrix rand fun rand(len: Int ): DoubleMatrix fun rand(rows: Int , cols: Int ): DoubleMatrix randn fun randn(len: Int ): DoubleMatrix fun randn(rows: Int , cols: Int ): DoubleMatrix zeros fun zeros(rows: Int , cols: Int ): DoubleMatrix","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/eye.html","text":"api / koma.matrix.jblas.backend / eye eye fun eye(size: Int ): DoubleMatrix","title":"Eye"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/eye.html#eye","text":"fun eye(size: Int ): DoubleMatrix","title":"eye"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/ones.html","text":"api / koma.matrix.jblas.backend / ones ones fun ones(rows: Int , cols: Int ): DoubleMatrix","title":"Ones"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): DoubleMatrix","title":"ones"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/rand.html","text":"api / koma.matrix.jblas.backend / rand rand fun rand(len: Int ): DoubleMatrix fun rand(rows: Int , cols: Int ): DoubleMatrix","title":"Rand"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/rand.html#rand","text":"fun rand(len: Int ): DoubleMatrix fun rand(rows: Int , cols: Int ): DoubleMatrix","title":"rand"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/randn.html","text":"api / koma.matrix.jblas.backend / randn randn fun randn(len: Int ): DoubleMatrix fun randn(rows: Int , cols: Int ): DoubleMatrix","title":"Randn"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/randn.html#randn","text":"fun randn(len: Int ): DoubleMatrix fun randn(rows: Int , cols: Int ): DoubleMatrix","title":"randn"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/zeros.html","text":"api / koma.matrix.jblas.backend / zeros zeros fun zeros(rows: Int , cols: Int ): DoubleMatrix","title":"Zeros"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): DoubleMatrix","title":"zeros"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/arr/index.html","text":"api / koma.matrix.jblas.backend / arr arr object arr Functions Name Summary get operator fun get(vararg ts: Any ): DoubleArray","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/arr/index.html#arr","text":"object arr","title":"arr"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/arr/index.html#functions","text":"Name Summary get operator fun get(vararg ts: Any ): DoubleArray","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/arr/get.html","text":"api / koma.matrix.jblas.backend / arr / get get operator fun get(vararg ts: Any ): DoubleArray","title":"Get"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/arr/get.html#get","text":"operator fun get(vararg ts: Any ): DoubleArray","title":"get"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/kotlin.-double/index.html","text":"api / koma.matrix.jblas.backend / kotlin.Double Extensions for kotlin.Double Name Summary end fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/kotlin.-double/index.html#extensions-for-kotlindouble","text":"Name Summary end fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"Extensions for kotlin.Double"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/kotlin.-double/end.html","text":"api / koma.matrix.jblas.backend / kotlin.Double / end end fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"End"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/kotlin.-double/end.html#end","text":"fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"end"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/kotlin.-int/index.html","text":"api / koma.matrix.jblas.backend / kotlin.Int Extensions for kotlin.Int Name Summary end fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/kotlin.-int/index.html#extensions-for-kotlinint","text":"Name Summary end fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"Extensions for kotlin.Int"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/kotlin.-int/end.html","text":"api / koma.matrix.jblas.backend / kotlin.Int / end end fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"End"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/kotlin.-int/end.html#end","text":"fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"end"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/mat/index.html","text":"api / koma.matrix.jblas.backend / mat mat object mat Functions Name Summary get operator fun get(vararg ts: Any ): DoubleMatrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/mat/index.html#mat","text":"object mat","title":"mat"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/mat/index.html#functions","text":"Name Summary get operator fun get(vararg ts: Any ): DoubleMatrix","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/mat/get.html","text":"api / koma.matrix.jblas.backend / mat / get get operator fun get(vararg ts: Any ): DoubleMatrix","title":"Get"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/mat/get.html#get","text":"operator fun get(vararg ts: Any ): DoubleMatrix","title":"get"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/index.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix Extensions for org.jblas.DoubleMatrix Name Summary LU fun DoubleMatrix.LU(): LUDecomposition<DoubleMatrix> QR fun DoubleMatrix.QR(): QRDecomposition<DoubleMatrix> T val DoubleMatrix.T: DoubleMatrix chol fun DoubleMatrix.chol(): DoubleMatrix det fun DoubleMatrix.det(): Double eigVals fun DoubleMatrix.eigVals(): ComplexDoubleMatrix eigVectors fun DoubleMatrix.eigVectors(): Array <ComplexDoubleMatrix> expm fun DoubleMatrix.expm(): DoubleMatrix inv fun DoubleMatrix.inv(): DoubleMatrix mapMat fun DoubleMatrix.mapMat(f: ( Double ) -> Double ): DoubleMatrix minus operator fun DoubleMatrix.minus(other: DoubleMatrix): DoubleMatrix plus operator fun DoubleMatrix.plus(other: DoubleMatrix): DoubleMatrix plusElement fun DoubleMatrix.plusElement(other: Int ): DoubleMatrix fun DoubleMatrix.plusElement(other: Double ): DoubleMatrix powElement fun DoubleMatrix.powElement(other: Int ): DoubleMatrix fun DoubleMatrix.powElement(other: Double ): DoubleMatrix rem operator fun DoubleMatrix.rem(other: DoubleMatrix): DoubleMatrix repr fun DoubleMatrix.repr(): String set operator fun DoubleMatrix.set(i: Int , v: Double ): DoubleMatrix operator fun DoubleMatrix.set(i: Int , j: Int , v: Double ): DoubleMatrix operator fun DoubleMatrix.set(i: Int , j: Int , v: Int ): DoubleMatrix times operator fun DoubleMatrix.times(other: DoubleMatrix): DoubleMatrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/index.html#extensions-for-orgjblasdoublematrix","text":"Name Summary LU fun DoubleMatrix.LU(): LUDecomposition<DoubleMatrix> QR fun DoubleMatrix.QR(): QRDecomposition<DoubleMatrix> T val DoubleMatrix.T: DoubleMatrix chol fun DoubleMatrix.chol(): DoubleMatrix det fun DoubleMatrix.det(): Double eigVals fun DoubleMatrix.eigVals(): ComplexDoubleMatrix eigVectors fun DoubleMatrix.eigVectors(): Array <ComplexDoubleMatrix> expm fun DoubleMatrix.expm(): DoubleMatrix inv fun DoubleMatrix.inv(): DoubleMatrix mapMat fun DoubleMatrix.mapMat(f: ( Double ) -> Double ): DoubleMatrix minus operator fun DoubleMatrix.minus(other: DoubleMatrix): DoubleMatrix plus operator fun DoubleMatrix.plus(other: DoubleMatrix): DoubleMatrix plusElement fun DoubleMatrix.plusElement(other: Int ): DoubleMatrix fun DoubleMatrix.plusElement(other: Double ): DoubleMatrix powElement fun DoubleMatrix.powElement(other: Int ): DoubleMatrix fun DoubleMatrix.powElement(other: Double ): DoubleMatrix rem operator fun DoubleMatrix.rem(other: DoubleMatrix): DoubleMatrix repr fun DoubleMatrix.repr(): String set operator fun DoubleMatrix.set(i: Int , v: Double ): DoubleMatrix operator fun DoubleMatrix.set(i: Int , j: Int , v: Double ): DoubleMatrix operator fun DoubleMatrix.set(i: Int , j: Int , v: Int ): DoubleMatrix times operator fun DoubleMatrix.times(other: DoubleMatrix): DoubleMatrix","title":"Extensions for org.jblas.DoubleMatrix"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/-l-u.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / LU LU fun DoubleMatrix.LU(): LUDecomposition<DoubleMatrix>","title":" l u"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/-l-u.html#lu","text":"fun DoubleMatrix.LU(): LUDecomposition<DoubleMatrix>","title":"LU"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/-q-r.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / QR QR fun DoubleMatrix.QR(): QRDecomposition<DoubleMatrix>","title":" q r"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/-q-r.html#qr","text":"fun DoubleMatrix.QR(): QRDecomposition<DoubleMatrix>","title":"QR"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/-t.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / T T val DoubleMatrix.T: DoubleMatrix","title":" t"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/-t.html#t","text":"val DoubleMatrix.T: DoubleMatrix","title":"T"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/chol.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / chol chol fun DoubleMatrix.chol(): DoubleMatrix","title":"Chol"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/chol.html#chol","text":"fun DoubleMatrix.chol(): DoubleMatrix","title":"chol"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/det.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / det det fun DoubleMatrix.det(): Double","title":"Det"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/det.html#det","text":"fun DoubleMatrix.det(): Double","title":"det"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/eig-vals.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / eigVals eigVals fun DoubleMatrix.eigVals(): ComplexDoubleMatrix","title":"Eig vals"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/eig-vals.html#eigvals","text":"fun DoubleMatrix.eigVals(): ComplexDoubleMatrix","title":"eigVals"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/eig-vectors.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / eigVectors eigVectors fun DoubleMatrix.eigVectors(): Array <ComplexDoubleMatrix>","title":"Eig vectors"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/eig-vectors.html#eigvectors","text":"fun DoubleMatrix.eigVectors(): Array <ComplexDoubleMatrix>","title":"eigVectors"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/expm.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / expm expm fun DoubleMatrix.expm(): DoubleMatrix","title":"Expm"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/expm.html#expm","text":"fun DoubleMatrix.expm(): DoubleMatrix","title":"expm"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/inv.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / inv inv fun DoubleMatrix.inv(): DoubleMatrix","title":"Inv"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/inv.html#inv","text":"fun DoubleMatrix.inv(): DoubleMatrix","title":"inv"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/map-mat.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / mapMat mapMat fun DoubleMatrix.mapMat(f: ( Double ) -> Double ): DoubleMatrix","title":"Map mat"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/map-mat.html#mapmat","text":"fun DoubleMatrix.mapMat(f: ( Double ) -> Double ): DoubleMatrix","title":"mapMat"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/minus.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / minus minus operator fun DoubleMatrix.minus(other: DoubleMatrix): DoubleMatrix","title":"Minus"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/minus.html#minus","text":"operator fun DoubleMatrix.minus(other: DoubleMatrix): DoubleMatrix","title":"minus"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/plus-element.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / plusElement plusElement fun DoubleMatrix.plusElement(other: Int ): DoubleMatrix fun DoubleMatrix.plusElement(other: Double ): DoubleMatrix","title":"Plus element"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/plus-element.html#pluselement","text":"fun DoubleMatrix.plusElement(other: Int ): DoubleMatrix fun DoubleMatrix.plusElement(other: Double ): DoubleMatrix","title":"plusElement"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/plus.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / plus plus operator fun DoubleMatrix.plus(other: DoubleMatrix): DoubleMatrix","title":"Plus"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/plus.html#plus","text":"operator fun DoubleMatrix.plus(other: DoubleMatrix): DoubleMatrix","title":"plus"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/pow-element.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / powElement powElement fun DoubleMatrix.powElement(other: Int ): DoubleMatrix fun DoubleMatrix.powElement(other: Double ): DoubleMatrix","title":"Pow element"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/pow-element.html#powelement","text":"fun DoubleMatrix.powElement(other: Int ): DoubleMatrix fun DoubleMatrix.powElement(other: Double ): DoubleMatrix","title":"powElement"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/rem.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / rem rem operator fun DoubleMatrix.rem(other: DoubleMatrix): DoubleMatrix","title":"Rem"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/rem.html#rem","text":"operator fun DoubleMatrix.rem(other: DoubleMatrix): DoubleMatrix","title":"rem"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/repr.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / repr repr fun DoubleMatrix.repr(): String","title":"Repr"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/repr.html#repr","text":"fun DoubleMatrix.repr(): String","title":"repr"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/set.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / set set operator fun DoubleMatrix.set(i: Int , v: Double ): DoubleMatrix operator fun DoubleMatrix.set(i: Int , j: Int , v: Double ): DoubleMatrix operator fun DoubleMatrix.set(i: Int , j: Int , v: Int ): DoubleMatrix","title":"Set"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/set.html#set","text":"operator fun DoubleMatrix.set(i: Int , v: Double ): DoubleMatrix operator fun DoubleMatrix.set(i: Int , j: Int , v: Double ): DoubleMatrix operator fun DoubleMatrix.set(i: Int , j: Int , v: Int ): DoubleMatrix","title":"set"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/times.html","text":"api / koma.matrix.jblas.backend / org.jblas.DoubleMatrix / times times operator fun DoubleMatrix.times(other: DoubleMatrix): DoubleMatrix","title":"Times"},{"location":"Reference_API_Docs/koma.matrix.jblas.backend/org.jblas.-double-matrix/times.html#times","text":"operator fun DoubleMatrix.times(other: DoubleMatrix): DoubleMatrix","title":"times"},{"location":"Reference_API_Docs/koma.matrix.mtj/index.html","text":"api / koma.matrix.mtj Package koma.matrix.mtj Types Name Summary MTJMatrix class MTJMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory . MTJMatrixFactory class MTJMatrixFactory : DoubleFactoryBase < MTJMatrix >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.mtj/index.html#package-komamatrixmtj","text":"","title":"Package koma.matrix.mtj"},{"location":"Reference_API_Docs/koma.matrix.mtj/index.html#types","text":"Name Summary MTJMatrix class MTJMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory . MTJMatrixFactory class MTJMatrixFactory : DoubleFactoryBase < MTJMatrix >","title":"Types"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/index.html","text":"api / koma.matrix.mtj / MTJMatrix MTJMatrix class MTJMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory . Constructors Name Summary <init> MTJMatrix(storage: DenseMatrix) An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory . Properties Name Summary T val T: MTJMatrix Transpose operator. storage var storage: DenseMatrix Inherited Properties Name Summary size open val size: Int Functions Name Summary LU fun LU(): Triple < MTJMatrix , MTJMatrix , MTJMatrix > LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < MTJMatrix , MTJMatrix > SVD fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> T fun T(): MTJMatrix Transpose operator. argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): MTJMatrix (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): MTJMatrix Returns a copy of this matrix (same values, new memory) det fun det(): Double Determinant of the matrix diag fun diag(): MTJMatrix div fun div(other: Int ): MTJMatrix fun div(other: Double ): MTJMatrix elementSum fun elementSum(): Double Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Double >): MTJMatrix Element-wise multiplication with another matrix epow fun epow(other: Double ): MTJMatrix Element-wise exponentiation of each element in the matrix fun epow(other: Int ): MTJMatrix getBaseMatrix fun getBaseMatrix(): DenseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): MTJMatrix getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MTJMatrixFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getRow fun getRow(row: Int ): MTJMatrix inv fun inv(): MTJMatrix Matrix inverse (square matrices) max fun max(): Double Maximum value contained in the matrix mean fun mean(): Double Mean (average) of all the elements in the matrix. min fun min(): Double Minimum value contained in the matrix minus fun minus(other: Double ): MTJMatrix fun minus(other: Matrix < Double >): MTJMatrix normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Nothing Pseudo-inverse of (non-square) matrix plus fun plus(other: Matrix < Double >): MTJMatrix fun plus(other: Double ): MTJMatrix setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit solve fun solve(other: Matrix < Double >): MTJMatrix Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): MTJMatrix fun times(other: Double ): MTJMatrix trace fun trace(): Nothing The matrix trace. transpose fun transpose(): MTJMatrix Transpose of the matrix unaryMinus fun unaryMinus(): MTJMatrix Inherited Functions Name Summary asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange Extension Functions Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/index.html#mtjmatrix","text":"class MTJMatrix : Matrix < Double >, DoubleMatrixBase An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory .","title":"MTJMatrix"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/index.html#constructors","text":"Name Summary <init> MTJMatrix(storage: DenseMatrix) An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory .","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/index.html#properties","text":"Name Summary T val T: MTJMatrix Transpose operator. storage var storage: DenseMatrix","title":"Properties"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/index.html#inherited-properties","text":"Name Summary size open val size: Int","title":"Inherited Properties"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/index.html#functions","text":"Name Summary LU fun LU(): Triple < MTJMatrix , MTJMatrix , MTJMatrix > LU Decomposition. Returns p, l, u matrices as a triple. QR fun QR(): Pair < MTJMatrix , MTJMatrix > SVD fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> T fun T(): MTJMatrix Transpose operator. argMax fun argMax(): Int Row major 1D index. argMin fun argMin(): Int Row major 1D index. chol fun chol(): MTJMatrix (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite. copy fun copy(): MTJMatrix Returns a copy of this matrix (same values, new memory) det fun det(): Double Determinant of the matrix diag fun diag(): MTJMatrix div fun div(other: Int ): MTJMatrix fun div(other: Double ): MTJMatrix elementSum fun elementSum(): Double Sum of all the elements in the matrix. elementTimes fun elementTimes(other: Matrix < Double >): MTJMatrix Element-wise multiplication with another matrix epow fun epow(other: Double ): MTJMatrix Element-wise exponentiation of each element in the matrix fun epow(other: Int ): MTJMatrix getBaseMatrix fun getBaseMatrix(): DenseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically). getCol fun getCol(col: Int ): MTJMatrix getDouble fun getDouble(i: Int , j: Int ): Double fun getDouble(i: Int ): Double getDoubleData fun getDoubleData(): DoubleArray Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known. getFactory fun getFactory(): MTJMatrixFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory. getRow fun getRow(row: Int ): MTJMatrix inv fun inv(): MTJMatrix Matrix inverse (square matrices) max fun max(): Double Maximum value contained in the matrix mean fun mean(): Double Mean (average) of all the elements in the matrix. min fun min(): Double Minimum value contained in the matrix minus fun minus(other: Double ): MTJMatrix fun minus(other: Matrix < Double >): MTJMatrix normF fun normF(): Double Frobenius normal of the matrix normIndP1 fun normIndP1(): Double Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy. numCols fun numCols(): Int Number of columns in the matrix numRows fun numRows(): Int Number of rows in the matrix pinv fun pinv(): Nothing Pseudo-inverse of (non-square) matrix plus fun plus(other: Matrix < Double >): MTJMatrix fun plus(other: Double ): MTJMatrix setDouble fun setDouble(i: Int , v: Double ): Unit fun setDouble(i: Int , j: Int , v: Double ): Unit solve fun solve(other: Matrix < Double >): MTJMatrix Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix. times fun times(other: Matrix < Double >): MTJMatrix fun times(other: Double ): MTJMatrix trace fun trace(): Nothing The matrix trace. transpose fun transpose(): MTJMatrix Transpose of the matrix unaryMinus fun unaryMinus(): MTJMatrix","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/index.html#inherited-functions","text":"Name Summary asColVector open fun asColVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on row vectors asRowVector open fun asRowVector(): Matrix < T > Returns the given vector as a row vector. Will call transpose() on column vectors cumSum open fun cumSum(): Matrix < T > Calculates the cumulative (ongoing) sum of a matrix's elements. For example, cumsum(mat[1,2,3]) would return mat[1,3,6] . Assumes matrix type is convertible to double. expm abstract fun expm(): Matrix < T > Compute the matrix exponential e^x (NOT elementwise) filterCols open fun filterCols(f: (col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterColsIndexed open fun filterColsIndexed(f: (colIndex: Int , col: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the columns of this matrix, using only the columns for which the function f returns true. filterRows open fun filterRows(f: (row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. filterRowsIndexed open fun filterRowsIndexed(f: (rowIndex: Int , row: Matrix < T >) -> Boolean ): Matrix < T > Builds a new matrix with a subset of the rows of this matrix, using only the rows for which the function f returns true. forEachCol open fun forEachCol(f: ( Matrix < T >) -> Unit ): Unit Passes each col from left to right into a function. forEachRow open fun forEachRow(f: ( Matrix < T >) -> Unit ): Unit Passes each row from top to bottom into a function. getBaseArray open fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double getFloat abstract fun getFloat(i: Int , j: Int ): Float open fun getFloat(vararg indices: Int ): Float getGeneric abstract fun getGeneric(i: Int , j: Int ): T open fun getGeneric(vararg indices: Int ): T getInt abstract fun getInt(i: Int , j: Int ): Int open fun getInt(vararg indices: Int ): Int getLinear open fun getLinear(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long getShort open fun getShort(vararg indices: Int ): Short mapCols open fun mapCols(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each col in a matrix, passes them through f, and puts the output of f into a col of an output matrix. mapColsToList open fun <U> mapColsToList(f: ( Matrix < T >) -> U ): List < U > Takes each col in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapCols, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. mapRows open fun mapRows(f: ( Matrix < T >) -> Matrix < T >): Matrix < T > Takes each row in a matrix, passes them through f, and puts the output of f into a row of an output matrix. mapRowsToList open fun <U> mapRowsToList(f: ( Matrix < T >) -> U ): List < U > Takes each row in a matrix, passes them through f, and puts the outputs into a List. In contrast to this#mapRows, the usage of a list as the output container allows for arbitrary output types, such as taking a double matrix and returning a list of strings. pow open infix fun pow(exponent: Int ): Matrix < T > Multiplies the matrix by itself exponent times (using matrix multiplication). repr open fun repr(): String selectCols open fun selectCols(vararg idxs: Int ): Matrix < T > Select a set of cols from a matrix to form the cols of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth cols of an input matrix, you would write input.selectCols(0,1,4) . open fun <U : Number > selectCols(idxs: Matrix < U >): Matrix < T > selectRows open fun selectRows(vararg idxs: Int ): Matrix < T > Select a set of rows from a matrix to form the rows of a new matrix. For example, if you wanted a new matrix consisting of the first, second, and fifth rows of an input matrix, you would write input.selectRows(0,1,4) . open fun <U : Number > selectRows(idxs: Matrix < U >): Matrix < T > setByte open fun setByte(vararg indices: Int , value: Byte ): Nothing setCol abstract fun setCol(index: Int , col: Matrix < T >): Unit setDouble open fun setDouble(vararg indices: Int , value: Double ): Unit setFloat abstract fun setFloat(i: Int , j: Int , v: Float ): Unit open fun setFloat(vararg indices: Int , value: Float ): Unit setGeneric abstract fun setGeneric(i: Int , j: Int , v: T ): Unit open fun setGeneric(vararg indices: Int , value: T ): Unit setInt abstract fun setInt(i: Int , j: Int , v: Int ): Unit open fun setInt(vararg indices: Int , value: Int ): Unit setLinear open fun setLinear(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , value: Long ): Nothing setRow abstract fun setRow(index: Int , row: Matrix < T >): Unit setShort open fun setShort(vararg indices: Int , value: Short ): Nothing shape open fun shape(): List < Int > to2DArray open fun to2DArray(): Array < DoubleArray > Returns a Matrix as a double 2D array. Intended for MATLAB interop. toIterable open fun toIterable(): Iterable < T > wrapRange open fun wrapRange(range: IntRange , max: Int ): IntRange","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/index.html#extension-functions","text":"Name Summary all fun Matrix < Double >.all(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.all(f: ( T ) -> Boolean ): Boolean Checks to see if all elements cause f to return true. allClose fun Matrix < Double >.allClose(other: Matrix < Double >, rtol: Double = 1e-05, atol: Double = 1e-08): Boolean any fun Matrix < Double >.any(f: ( Double ) -> Boolean ): Boolean fun <T> Matrix < T >.any(f: ( T ) -> Boolean ): Boolean Checks to see if any element in the matrix causes f to return true. checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Double >.div(other: Double ): NDArray < Double > emul infix fun Matrix < Double >.emul(other: Matrix < Double >): Matrix < Double > Allow infix operator \"a emul b\" to be element-wise multiplication of two matrices. fill fun Matrix < Double >.fill(f: (row: Int , col: Int ) -> Double ): Matrix < Double > fun <T> Matrix < T >.fill(f: (row: Int , col: Int ) -> T ): Matrix < T > Fills the matrix with the values returned by the input function. fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> Matrix < T >.forEach(f: ( T ) -> Unit ): Unit Passes each element in row major order into a function. fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun Matrix < Double >.forEachIndexed(f: (row: Int , col: Int , ele: Double ) -> Unit ): Unit fun <T> Matrix < T >.forEachIndexed(f: (row: Int , col: Int , ele: T ) -> Unit ): Unit Passes each element in row major order into a function along with its index location. fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> Matrix < T >.map(f: ( T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun Matrix < Double >.mapIndexed(f: (row: Int , col: Int , ele: Double ) -> Double ): Matrix < Double > fun <T> Matrix < T >.mapIndexed(f: (row: Int , col: Int , ele: T ) -> T ): Matrix < T > Takes each element in a matrix, passes them through f, and puts the output of f into an output matrix. This process is done in row-major order. fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.minus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double >``operator fun Matrix < Double >.plus(value: Int ): Matrix < Double > Allow operator overloading with non-Double scalars pow infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun Matrix < Double >.set(i: Int , v: Double ): Unit operator fun <T> Matrix < T >.set(i: Int , v: T ): Unit Set the ith element in the matrix. If 2D, selects elements in row-major order. operator fun Matrix < Double >.set(i: Int , j: Int , v: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Double ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Double ): Unit operator fun Matrix < Double >.set(i: Int , v: Int ): Unit operator fun Matrix < Double >.set(i: Int , j: Int , v: Int ): Unit operator fun <T> Matrix < T >.set(i: Int , j: Int , v: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: T ): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: T ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun Matrix < Double >.set(rows: IntRange , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3..4] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: Int , cols: IntRange , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: Int , cols: IntRange , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[2, 3..4] =something. Note that the range 3..4 is inclusive, so it will retrieve col 3 and 4. Use 1.until(2) for a non-inclusive range. operator fun Matrix < Double >.set(rows: IntRange , cols: Int , value: Matrix < Double >): Unit operator fun <T> Matrix < T >.set(rows: IntRange , cols: Int , value: Matrix < T >): Unit Allow assignment to a slice, e.g. matrix[1..2, 3] =something. Note that the range 1..2 is inclusive, so it will retrieve row 1 and 2. Use 1.until(2) for a non-inclusive range. times operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double >``operator fun Matrix < Double >.times(other: Int ): Matrix < Double > Multiply a scalar by a matrix toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Double >.unaryMinus(): NDArray < Double > validate fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-init-.html","text":"api / koma.matrix.mtj / MTJMatrix / <init> <init> MTJMatrix(storage: DenseMatrix) An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory .","title":" init "},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-init-.html#init","text":"MTJMatrix(storage: DenseMatrix) An implementation of the Matrix interface using MTJ. You should rarely construct this class directly, instead make one via the top-level functions in creators.kt (e.g. zeros(5,5)) or MTJMatrixFactory .","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-l-u.html","text":"api / koma.matrix.mtj / MTJMatrix / LU LU fun LU(): Triple < MTJMatrix , MTJMatrix , MTJMatrix > Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":" l u"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-l-u.html#lu","text":"fun LU(): Triple < MTJMatrix , MTJMatrix , MTJMatrix > Overrides Matrix.LU LU Decomposition. Returns p, l, u matrices as a triple.","title":"LU"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-q-r.html","text":"api / koma.matrix.mtj / MTJMatrix / QR QR fun QR(): Pair < MTJMatrix , MTJMatrix > Overrides Matrix.QR","title":" q r"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-q-r.html#qr","text":"fun QR(): Pair < MTJMatrix , MTJMatrix > Overrides Matrix.QR","title":"QR"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-s-v-d.html","text":"api / koma.matrix.mtj / MTJMatrix / SVD SVD fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.SVD","title":" s v d"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-s-v-d.html#svd","text":"fun SVD(): Triple < Matrix < Double >, Matrix < Double >, Matrix < Double >> Overrides Matrix.SVD","title":"SVD"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-t.html","text":"api / koma.matrix.mtj / MTJMatrix / T T fun T(): MTJMatrix Overrides Matrix.T val T: MTJMatrix Overrides Matrix.T Transpose operator.","title":" t"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/-t.html#t","text":"fun T(): MTJMatrix Overrides Matrix.T val T: MTJMatrix Overrides Matrix.T Transpose operator.","title":"T"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/arg-max.html","text":"api / koma.matrix.mtj / MTJMatrix / argMax argMax fun argMax(): Int Overrides Matrix.argMax Overrides DoubleMatrixBase.argMax Row major 1D index.","title":"Arg max"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/arg-max.html#argmax","text":"fun argMax(): Int Overrides Matrix.argMax Overrides DoubleMatrixBase.argMax Row major 1D index.","title":"argMax"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/arg-min.html","text":"api / koma.matrix.mtj / MTJMatrix / argMin argMin fun argMin(): Int Overrides Matrix.argMin Overrides DoubleMatrixBase.argMin Row major 1D index.","title":"Arg min"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/arg-min.html#argmin","text":"fun argMin(): Int Overrides Matrix.argMin Overrides DoubleMatrixBase.argMin Row major 1D index.","title":"argMin"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/chol.html","text":"api / koma.matrix.mtj / MTJMatrix / chol chol fun chol(): MTJMatrix Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"Chol"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/chol.html#chol","text":"fun chol(): MTJMatrix Overrides Matrix.chol (lower triangular) Cholesky decomposition of the matrix. Matrix must be positive-semi definite.","title":"chol"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/copy.html","text":"api / koma.matrix.mtj / MTJMatrix / copy copy fun copy(): MTJMatrix Overrides Matrix.copy Overrides DoubleMatrixBase.copy Returns a copy of this matrix (same values, new memory)","title":"Copy"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/copy.html#copy","text":"fun copy(): MTJMatrix Overrides Matrix.copy Overrides DoubleMatrixBase.copy Returns a copy of this matrix (same values, new memory)","title":"copy"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/det.html","text":"api / koma.matrix.mtj / MTJMatrix / det det fun det(): Double Overrides Matrix.det Determinant of the matrix","title":"Det"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/det.html#det","text":"fun det(): Double Overrides Matrix.det Determinant of the matrix","title":"det"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/diag.html","text":"api / koma.matrix.mtj / MTJMatrix / diag diag fun diag(): MTJMatrix Overrides Matrix.diag","title":"Diag"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/diag.html#diag","text":"fun diag(): MTJMatrix Overrides Matrix.diag","title":"diag"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/div.html","text":"api / koma.matrix.mtj / MTJMatrix / div div fun div(other: Int ): MTJMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div fun div(other: Double ): MTJMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div","title":"Div"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/div.html#div","text":"fun div(other: Int ): MTJMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div fun div(other: Double ): MTJMatrix Overrides Matrix.div Overrides DoubleMatrixBase.div","title":"div"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/element-sum.html","text":"api / koma.matrix.mtj / MTJMatrix / elementSum elementSum fun elementSum(): Double Overrides Matrix.elementSum Overrides DoubleMatrixBase.elementSum Sum of all the elements in the matrix.","title":"Element sum"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/element-sum.html#elementsum","text":"fun elementSum(): Double Overrides Matrix.elementSum Overrides DoubleMatrixBase.elementSum Sum of all the elements in the matrix.","title":"elementSum"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/element-times.html","text":"api / koma.matrix.mtj / MTJMatrix / elementTimes elementTimes fun elementTimes(other: Matrix < Double >): MTJMatrix Overrides Matrix.elementTimes Overrides DoubleMatrixBase.elementTimes Element-wise multiplication with another matrix","title":"Element times"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/element-times.html#elementtimes","text":"fun elementTimes(other: Matrix < Double >): MTJMatrix Overrides Matrix.elementTimes Overrides DoubleMatrixBase.elementTimes Element-wise multiplication with another matrix","title":"elementTimes"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/epow.html","text":"api / koma.matrix.mtj / MTJMatrix / epow epow fun epow(other: Double ): MTJMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): MTJMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow","title":"Epow"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/epow.html#epow","text":"fun epow(other: Double ): MTJMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow Element-wise exponentiation of each element in the matrix fun epow(other: Int ): MTJMatrix Overrides Matrix.epow Overrides DoubleMatrixBase.epow","title":"epow"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-base-matrix.html","text":"api / koma.matrix.mtj / MTJMatrix / getBaseMatrix getBaseMatrix fun getBaseMatrix(): DenseMatrix Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"Get base matrix"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-base-matrix.html#getbasematrix","text":"fun getBaseMatrix(): DenseMatrix Overrides Matrix.getBaseMatrix Returns the underlying matrix object from the back-end this Matrix is wrapping. This should be used sparingly (as it breaks encapsulation), but it can increase performance by using computation specifically designed for a particular back-end. Code using this method should not rely on a particular back-end, and should always fallback to slow generic code if an unrecognized matrix is returned here (e.g. use get and set ) to access the elements generically).","title":"getBaseMatrix"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-col.html","text":"api / koma.matrix.mtj / MTJMatrix / getCol getCol fun getCol(col: Int ): MTJMatrix Overrides Matrix.getCol Overrides DoubleMatrixBase.getCol","title":"Get col"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-col.html#getcol","text":"fun getCol(col: Int ): MTJMatrix Overrides Matrix.getCol Overrides DoubleMatrixBase.getCol","title":"getCol"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-double-data.html","text":"api / koma.matrix.mtj / MTJMatrix / getDoubleData getDoubleData fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"Get double data"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-double-data.html#getdoubledata","text":"fun getDoubleData(): DoubleArray Overrides Matrix.getDoubleData Retrieves the data formatted as doubles in row-major order This method is only for performance over potentially boxing get(Double) methods. This method may or may not return a copy, and thus should be treated as read-only unless backend behavior is known.","title":"getDoubleData"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-double.html","text":"api / koma.matrix.mtj / MTJMatrix / getDouble getDouble fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"Get double"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-double.html#getdouble","text":"fun getDouble(i: Int , j: Int ): Double Overrides Matrix.getDouble fun getDouble(i: Int ): Double Overrides NDArray.getDouble","title":"getDouble"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-factory.html","text":"api / koma.matrix.mtj / MTJMatrix / getFactory getFactory fun getFactory(): MTJMatrixFactory Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"Get factory"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-factory.html#getfactory","text":"fun getFactory(): MTJMatrixFactory Overrides Matrix.getFactory Because sometimes all you have is a Matrix, but you really want a MatrixFactory.","title":"getFactory"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-row.html","text":"api / koma.matrix.mtj / MTJMatrix / getRow getRow fun getRow(row: Int ): MTJMatrix Overrides Matrix.getRow Overrides DoubleMatrixBase.getRow","title":"Get row"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/get-row.html#getrow","text":"fun getRow(row: Int ): MTJMatrix Overrides Matrix.getRow Overrides DoubleMatrixBase.getRow","title":"getRow"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/inv.html","text":"api / koma.matrix.mtj / MTJMatrix / inv inv fun inv(): MTJMatrix Overrides Matrix.inv Matrix inverse (square matrices)","title":"Inv"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/inv.html#inv","text":"fun inv(): MTJMatrix Overrides Matrix.inv Matrix inverse (square matrices)","title":"inv"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/max.html","text":"api / koma.matrix.mtj / MTJMatrix / max max fun max(): Double Overrides Matrix.max Overrides DoubleMatrixBase.max Maximum value contained in the matrix","title":"Max"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/max.html#max","text":"fun max(): Double Overrides Matrix.max Overrides DoubleMatrixBase.max Maximum value contained in the matrix","title":"max"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/mean.html","text":"api / koma.matrix.mtj / MTJMatrix / mean mean fun mean(): Double Overrides Matrix.mean Overrides DoubleMatrixBase.mean Mean (average) of all the elements in the matrix.","title":"Mean"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/mean.html#mean","text":"fun mean(): Double Overrides Matrix.mean Overrides DoubleMatrixBase.mean Mean (average) of all the elements in the matrix.","title":"mean"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/min.html","text":"api / koma.matrix.mtj / MTJMatrix / min min fun min(): Double Overrides Matrix.min Overrides DoubleMatrixBase.min Minimum value contained in the matrix","title":"Min"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/min.html#min","text":"fun min(): Double Overrides Matrix.min Overrides DoubleMatrixBase.min Minimum value contained in the matrix","title":"min"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/minus.html","text":"api / koma.matrix.mtj / MTJMatrix / minus minus fun minus(other: Double ): MTJMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus fun minus(other: Matrix < Double >): MTJMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus","title":"Minus"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/minus.html#minus","text":"fun minus(other: Double ): MTJMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus fun minus(other: Matrix < Double >): MTJMatrix Overrides Matrix.minus Overrides DoubleMatrixBase.minus","title":"minus"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/norm-f.html","text":"api / koma.matrix.mtj / MTJMatrix / normF normF fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"Norm f"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/norm-f.html#normf","text":"fun normF(): Double Overrides Matrix.normF Frobenius normal of the matrix","title":"normF"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/norm-ind-p1.html","text":"api / koma.matrix.mtj / MTJMatrix / normIndP1 normIndP1 fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"Norm ind p1"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/norm-ind-p1.html#normindp1","text":"fun normIndP1(): Double Overrides Matrix.normIndP1 Induced, p=1 normal of the matrix. Equivalent of norm(matrix,1) in scipy.","title":"normIndP1"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/num-cols.html","text":"api / koma.matrix.mtj / MTJMatrix / numCols numCols fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"Num cols"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/num-cols.html#numcols","text":"fun numCols(): Int Overrides Matrix.numCols Number of columns in the matrix","title":"numCols"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/num-rows.html","text":"api / koma.matrix.mtj / MTJMatrix / numRows numRows fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"Num rows"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/num-rows.html#numrows","text":"fun numRows(): Int Overrides Matrix.numRows Number of rows in the matrix","title":"numRows"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/pinv.html","text":"api / koma.matrix.mtj / MTJMatrix / pinv pinv fun pinv(): Nothing Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"Pinv"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/pinv.html#pinv","text":"fun pinv(): Nothing Overrides Matrix.pinv Pseudo-inverse of (non-square) matrix","title":"pinv"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/plus.html","text":"api / koma.matrix.mtj / MTJMatrix / plus plus fun plus(other: Matrix < Double >): MTJMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus fun plus(other: Double ): MTJMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus","title":"Plus"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/plus.html#plus","text":"fun plus(other: Matrix < Double >): MTJMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus fun plus(other: Double ): MTJMatrix Overrides Matrix.plus Overrides DoubleMatrixBase.plus","title":"plus"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/set-double.html","text":"api / koma.matrix.mtj / MTJMatrix / setDouble setDouble fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"Set double"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/set-double.html#setdouble","text":"fun setDouble(i: Int , v: Double ): Unit Overrides NDArray.setDouble fun setDouble(i: Int , j: Int , v: Double ): Unit Overrides Matrix.setDouble","title":"setDouble"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/solve.html","text":"api / koma.matrix.mtj / MTJMatrix / solve solve fun solve(other: Matrix < Double >): MTJMatrix Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"Solve"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/solve.html#solve","text":"fun solve(other: Matrix < Double >): MTJMatrix Overrides Matrix.solve Solves A*X=B for X, returning X (X is either column vector or a matrix composed of several col vectors). A is the current matrix, B is the passed in other )/other), and X is the returned matrix.","title":"solve"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/storage.html","text":"api / koma.matrix.mtj / MTJMatrix / storage storage var storage: DenseMatrix","title":"Storage"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/storage.html#storage","text":"var storage: DenseMatrix","title":"storage"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/times.html","text":"api / koma.matrix.mtj / MTJMatrix / times times fun times(other: Matrix < Double >): MTJMatrix Overrides Matrix.times fun times(other: Double ): MTJMatrix Overrides Matrix.times Overrides DoubleMatrixBase.times","title":"Times"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/times.html#times","text":"fun times(other: Matrix < Double >): MTJMatrix Overrides Matrix.times fun times(other: Double ): MTJMatrix Overrides Matrix.times Overrides DoubleMatrixBase.times","title":"times"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/trace.html","text":"api / koma.matrix.mtj / MTJMatrix / trace trace fun trace(): Nothing Overrides Matrix.trace The matrix trace.","title":"Trace"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/trace.html#trace","text":"fun trace(): Nothing Overrides Matrix.trace The matrix trace.","title":"trace"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/transpose.html","text":"api / koma.matrix.mtj / MTJMatrix / transpose transpose fun transpose(): MTJMatrix Overrides Matrix.transpose Overrides DoubleMatrixBase.transpose Transpose of the matrix","title":"Transpose"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/transpose.html#transpose","text":"fun transpose(): MTJMatrix Overrides Matrix.transpose Overrides DoubleMatrixBase.transpose Transpose of the matrix","title":"transpose"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/unary-minus.html","text":"api / koma.matrix.mtj / MTJMatrix / unaryMinus unaryMinus fun unaryMinus(): MTJMatrix Overrides Matrix.unaryMinus Overrides DoubleMatrixBase.unaryMinus","title":"Unary minus"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix/unary-minus.html#unaryminus","text":"fun unaryMinus(): MTJMatrix Overrides Matrix.unaryMinus Overrides DoubleMatrixBase.unaryMinus","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/index.html","text":"api / koma.matrix.mtj / MTJMatrixFactory MTJMatrixFactory class MTJMatrixFactory : DoubleFactoryBase < MTJMatrix > Constructors Name Summary <init> MTJMatrixFactory() Functions Name Summary create fun create(data: IntRange ): MTJMatrix Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): MTJMatrix Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): MTJMatrix Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): MTJMatrix Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): MTJMatrix Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): MTJMatrix Creates a one initialized matrix of the requested shape zeros fun zeros(rows: Int , cols: Int ): MTJMatrix Generate a zero initialized matrix of the requested shape. Inherited Functions Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/index.html#mtjmatrixfactory","text":"class MTJMatrixFactory : DoubleFactoryBase < MTJMatrix >","title":"MTJMatrixFactory"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/index.html#constructors","text":"Name Summary <init> MTJMatrixFactory()","title":"Constructors"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/index.html#functions","text":"Name Summary create fun create(data: IntRange ): MTJMatrix Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): MTJMatrix Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): MTJMatrix Creates a matrix from an array of arrays (row-major) eye fun eye(size: Int ): MTJMatrix Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): MTJMatrix Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal. ones fun ones(rows: Int , cols: Int ): MTJMatrix Creates a one initialized matrix of the requested shape zeros fun zeros(rows: Int , cols: Int ): MTJMatrix Generate a zero initialized matrix of the requested shape.","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/index.html#inherited-functions","text":"Name Summary arange open fun arange(start: Double , stop: Double , increment: Double ): T open fun arange(start: Int , stop: Int , increment: Int ): T Creates a row-vector with the first value of start and the last value of stop , with increment steps between each value. open fun arange(start: Double , stop: Double ): T open fun arange(start: Int , stop: Int ): T Creates a row-vector with the first value of start and the last value of stop , with unit steps between each value. rand open fun rand(rows: Int , cols: Int ): T Creates a matrix of uniform 0-1 random samples randn open fun randn(rows: Int , cols: Int ): T Creates a matrix of unit-normal random samples","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/-init-.html","text":"api / koma.matrix.mtj / MTJMatrixFactory / <init> <init> MTJMatrixFactory()","title":" init "},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/-init-.html#init","text":"MTJMatrixFactory()","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/create.html","text":"api / koma.matrix.mtj / MTJMatrixFactory / create create fun create(data: IntRange ): MTJMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): MTJMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): MTJMatrix Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"Create"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/create.html#create","text":"fun create(data: IntRange ): MTJMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from an int range, e.g. 1..45 fun create(data: DoubleArray ): MTJMatrix Overrides MatrixFactory.create Creates a row-vector with initial values pulled from a double array fun create(data: Array < DoubleArray >): MTJMatrix Overrides MatrixFactory.create Creates a matrix from an array of arrays (row-major)","title":"create"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/eye.html","text":"api / koma.matrix.mtj / MTJMatrixFactory / eye eye fun eye(size: Int ): MTJMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): MTJMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"Eye"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/eye.html#eye","text":"fun eye(size: Int ): MTJMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape fun eye(rows: Int , cols: Int ): MTJMatrix Overrides MatrixFactory.eye Creates an identity matrix of the requested shape, with zero padding if the axis lengths arent equal.","title":"eye"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/ones.html","text":"api / koma.matrix.mtj / MTJMatrixFactory / ones ones fun ones(rows: Int , cols: Int ): MTJMatrix Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): MTJMatrix Overrides MatrixFactory.ones Creates a one initialized matrix of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/zeros.html","text":"api / koma.matrix.mtj / MTJMatrixFactory / zeros zeros fun zeros(rows: Int , cols: Int ): MTJMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"Zeros"},{"location":"Reference_API_Docs/koma.matrix.mtj/-m-t-j-matrix-factory/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): MTJMatrix Overrides MatrixFactory.zeros Generate a zero initialized matrix of the requested shape.","title":"zeros"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/index.html","text":"api / koma.matrix.mtj.backend Package koma.matrix.mtj.backend Types Name Summary mat object mat Extensions for External Classes Name Summary kotlin.Double kotlin.Int no.uib.cipr.matrix.DenseMatrix no.uib.cipr.matrix.Matrix Functions Name Summary eye fun eye(size: Int ): DenseMatrix ones fun ones(rows: Int , cols: Int ): DenseMatrix zeros fun zeros(rows: Int , cols: Int ): DenseMatrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/index.html#package-komamatrixmtjbackend","text":"","title":"Package koma.matrix.mtj.backend"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/index.html#types","text":"Name Summary mat object mat","title":"Types"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/index.html#extensions-for-external-classes","text":"Name Summary kotlin.Double kotlin.Int no.uib.cipr.matrix.DenseMatrix no.uib.cipr.matrix.Matrix","title":"Extensions for External Classes"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/index.html#functions","text":"Name Summary eye fun eye(size: Int ): DenseMatrix ones fun ones(rows: Int , cols: Int ): DenseMatrix zeros fun zeros(rows: Int , cols: Int ): DenseMatrix","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/eye.html","text":"api / koma.matrix.mtj.backend / eye eye fun eye(size: Int ): DenseMatrix","title":"Eye"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/eye.html#eye","text":"fun eye(size: Int ): DenseMatrix","title":"eye"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/ones.html","text":"api / koma.matrix.mtj.backend / ones ones fun ones(rows: Int , cols: Int ): DenseMatrix","title":"Ones"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/ones.html#ones","text":"fun ones(rows: Int , cols: Int ): DenseMatrix","title":"ones"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/zeros.html","text":"api / koma.matrix.mtj.backend / zeros zeros fun zeros(rows: Int , cols: Int ): DenseMatrix","title":"Zeros"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/zeros.html#zeros","text":"fun zeros(rows: Int , cols: Int ): DenseMatrix","title":"zeros"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/kotlin.-double/index.html","text":"api / koma.matrix.mtj.backend / kotlin.Double Extensions for kotlin.Double Name Summary end fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/kotlin.-double/index.html#extensions-for-kotlindouble","text":"Name Summary end fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"Extensions for kotlin.Double"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/kotlin.-double/end.html","text":"api / koma.matrix.mtj.backend / kotlin.Double / end end fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"End"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/kotlin.-double/end.html#end","text":"fun Double .end(other: Double ): Pair < Double , Double > fun Double .end(other: Int ): Pair < Double , Double >","title":"end"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/kotlin.-int/index.html","text":"api / koma.matrix.mtj.backend / kotlin.Int Extensions for kotlin.Int Name Summary end fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/kotlin.-int/index.html#extensions-for-kotlinint","text":"Name Summary end fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"Extensions for kotlin.Int"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/kotlin.-int/end.html","text":"api / koma.matrix.mtj.backend / kotlin.Int / end end fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"End"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/kotlin.-int/end.html#end","text":"fun Int .end(other: Double ): Pair < Double , Double > fun Int .end(other: Int ): Pair < Double , Double >","title":"end"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/mat/index.html","text":"api / koma.matrix.mtj.backend / mat mat object mat Functions Name Summary get operator fun get(vararg ts: Any ): DenseMatrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/mat/index.html#mat","text":"object mat","title":"mat"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/mat/index.html#functions","text":"Name Summary get operator fun get(vararg ts: Any ): DenseMatrix","title":"Functions"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/mat/get.html","text":"api / koma.matrix.mtj.backend / mat / get get operator fun get(vararg ts: Any ): DenseMatrix","title":"Get"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/mat/get.html#get","text":"operator fun get(vararg ts: Any ): DenseMatrix","title":"get"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/index.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix Extensions for no.uib.cipr.matrix.DenseMatrix Name Summary LU fun DenseMatrix.LU(): Triple <DenseMatrix, DenseMatrix, DenseMatrix> QR fun DenseMatrix.QR(): Pair <DenseMatrix, DenseMatrix> chol fun DenseMatrix.chol(): LowerTriangDenseMatrix det fun DenseMatrix.det(): Double diag fun DenseMatrix.diag(): DenseMatrix div operator fun DenseMatrix.div(other: Int ): DenseMatrix operator fun DenseMatrix.div(other: Double ): DenseMatrix eig fun DenseMatrix.eig(): EVD get operator fun DenseMatrix.get(i: Int ): Double inv fun DenseMatrix.inv(): DenseMatrix mapMat fun DenseMatrix.mapMat(f: ( Double ) -> Double ): DenseMatrix minus operator fun DenseMatrix.minus(other: DenseMatrix): DenseMatrix minusElement fun DenseMatrix.minusElement(other: Double ): DenseMatrix fun DenseMatrix.minusElement(other: Int ): DenseMatrix plusElement fun DenseMatrix.plusElement(other: Int ): DenseMatrix fun DenseMatrix.plusElement(other: Double ): DenseMatrix plusMatrix fun DenseMatrix.plusMatrix(other: DenseMatrix): DenseMatrix powElement fun DenseMatrix.powElement(other: Int ): DenseMatrix fun DenseMatrix.powElement(other: Double ): DenseMatrix prod fun DenseMatrix.prod(): Double rem operator fun DenseMatrix.rem(other: DenseMatrix): DenseMatrix set operator fun DenseMatrix.set(i: Int , v: Int ): Unit operator fun DenseMatrix.set(i: Int , j: Int , v: Int ): Unit operator fun DenseMatrix.set(i: Int , v: Double ): Unit svd fun DenseMatrix.svd(): SVD times operator fun DenseMatrix.times(other: DenseMatrix): DenseMatrix operator fun DenseMatrix.times(other: Int ): DenseMatrix operator fun DenseMatrix.times(other: Double ): DenseMatrix unaryMinus operator fun DenseMatrix.unaryMinus(): DenseMatrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/index.html#extensions-for-nouibciprmatrixdensematrix","text":"Name Summary LU fun DenseMatrix.LU(): Triple <DenseMatrix, DenseMatrix, DenseMatrix> QR fun DenseMatrix.QR(): Pair <DenseMatrix, DenseMatrix> chol fun DenseMatrix.chol(): LowerTriangDenseMatrix det fun DenseMatrix.det(): Double diag fun DenseMatrix.diag(): DenseMatrix div operator fun DenseMatrix.div(other: Int ): DenseMatrix operator fun DenseMatrix.div(other: Double ): DenseMatrix eig fun DenseMatrix.eig(): EVD get operator fun DenseMatrix.get(i: Int ): Double inv fun DenseMatrix.inv(): DenseMatrix mapMat fun DenseMatrix.mapMat(f: ( Double ) -> Double ): DenseMatrix minus operator fun DenseMatrix.minus(other: DenseMatrix): DenseMatrix minusElement fun DenseMatrix.minusElement(other: Double ): DenseMatrix fun DenseMatrix.minusElement(other: Int ): DenseMatrix plusElement fun DenseMatrix.plusElement(other: Int ): DenseMatrix fun DenseMatrix.plusElement(other: Double ): DenseMatrix plusMatrix fun DenseMatrix.plusMatrix(other: DenseMatrix): DenseMatrix powElement fun DenseMatrix.powElement(other: Int ): DenseMatrix fun DenseMatrix.powElement(other: Double ): DenseMatrix prod fun DenseMatrix.prod(): Double rem operator fun DenseMatrix.rem(other: DenseMatrix): DenseMatrix set operator fun DenseMatrix.set(i: Int , v: Int ): Unit operator fun DenseMatrix.set(i: Int , j: Int , v: Int ): Unit operator fun DenseMatrix.set(i: Int , v: Double ): Unit svd fun DenseMatrix.svd(): SVD times operator fun DenseMatrix.times(other: DenseMatrix): DenseMatrix operator fun DenseMatrix.times(other: Int ): DenseMatrix operator fun DenseMatrix.times(other: Double ): DenseMatrix unaryMinus operator fun DenseMatrix.unaryMinus(): DenseMatrix","title":"Extensions for no.uib.cipr.matrix.DenseMatrix"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/-l-u.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / LU LU fun DenseMatrix.LU(): Triple <DenseMatrix, DenseMatrix, DenseMatrix>","title":" l u"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/-l-u.html#lu","text":"fun DenseMatrix.LU(): Triple <DenseMatrix, DenseMatrix, DenseMatrix>","title":"LU"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/-q-r.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / QR QR fun DenseMatrix.QR(): Pair <DenseMatrix, DenseMatrix>","title":" q r"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/-q-r.html#qr","text":"fun DenseMatrix.QR(): Pair <DenseMatrix, DenseMatrix>","title":"QR"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/chol.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / chol chol fun DenseMatrix.chol(): LowerTriangDenseMatrix","title":"Chol"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/chol.html#chol","text":"fun DenseMatrix.chol(): LowerTriangDenseMatrix","title":"chol"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/det.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / det det fun DenseMatrix.det(): Double","title":"Det"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/det.html#det","text":"fun DenseMatrix.det(): Double","title":"det"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/diag.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / diag diag fun DenseMatrix.diag(): DenseMatrix","title":"Diag"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/diag.html#diag","text":"fun DenseMatrix.diag(): DenseMatrix","title":"diag"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/div.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / div div operator fun DenseMatrix.div(other: Int ): DenseMatrix operator fun DenseMatrix.div(other: Double ): DenseMatrix","title":"Div"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/div.html#div","text":"operator fun DenseMatrix.div(other: Int ): DenseMatrix operator fun DenseMatrix.div(other: Double ): DenseMatrix","title":"div"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/eig.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / eig eig fun DenseMatrix.eig(): EVD","title":"Eig"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/eig.html#eig","text":"fun DenseMatrix.eig(): EVD","title":"eig"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/get.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / get get operator fun DenseMatrix.get(i: Int ): Double","title":"Get"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/get.html#get","text":"operator fun DenseMatrix.get(i: Int ): Double","title":"get"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/inv.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / inv inv fun DenseMatrix.inv(): DenseMatrix","title":"Inv"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/inv.html#inv","text":"fun DenseMatrix.inv(): DenseMatrix","title":"inv"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/map-mat.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / mapMat mapMat fun DenseMatrix.mapMat(f: ( Double ) -> Double ): DenseMatrix","title":"Map mat"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/map-mat.html#mapmat","text":"fun DenseMatrix.mapMat(f: ( Double ) -> Double ): DenseMatrix","title":"mapMat"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/minus-element.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / minusElement minusElement fun DenseMatrix.minusElement(other: Double ): DenseMatrix fun DenseMatrix.minusElement(other: Int ): DenseMatrix","title":"Minus element"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/minus-element.html#minuselement","text":"fun DenseMatrix.minusElement(other: Double ): DenseMatrix fun DenseMatrix.minusElement(other: Int ): DenseMatrix","title":"minusElement"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/minus.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / minus minus operator fun DenseMatrix.minus(other: DenseMatrix): DenseMatrix","title":"Minus"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/minus.html#minus","text":"operator fun DenseMatrix.minus(other: DenseMatrix): DenseMatrix","title":"minus"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/plus-element.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / plusElement plusElement fun DenseMatrix.plusElement(other: Int ): DenseMatrix fun DenseMatrix.plusElement(other: Double ): DenseMatrix","title":"Plus element"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/plus-element.html#pluselement","text":"fun DenseMatrix.plusElement(other: Int ): DenseMatrix fun DenseMatrix.plusElement(other: Double ): DenseMatrix","title":"plusElement"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/plus-matrix.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / plusMatrix plusMatrix fun DenseMatrix.plusMatrix(other: DenseMatrix): DenseMatrix","title":"Plus matrix"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/plus-matrix.html#plusmatrix","text":"fun DenseMatrix.plusMatrix(other: DenseMatrix): DenseMatrix","title":"plusMatrix"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/pow-element.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / powElement powElement fun DenseMatrix.powElement(other: Int ): DenseMatrix fun DenseMatrix.powElement(other: Double ): DenseMatrix","title":"Pow element"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/pow-element.html#powelement","text":"fun DenseMatrix.powElement(other: Int ): DenseMatrix fun DenseMatrix.powElement(other: Double ): DenseMatrix","title":"powElement"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/prod.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / prod prod fun DenseMatrix.prod(): Double","title":"Prod"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/prod.html#prod","text":"fun DenseMatrix.prod(): Double","title":"prod"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/rem.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / rem rem operator fun DenseMatrix.rem(other: DenseMatrix): DenseMatrix","title":"Rem"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/rem.html#rem","text":"operator fun DenseMatrix.rem(other: DenseMatrix): DenseMatrix","title":"rem"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/set.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / set set operator fun DenseMatrix.set(i: Int , v: Int ): Unit operator fun DenseMatrix.set(i: Int , j: Int , v: Int ): Unit operator fun DenseMatrix.set(i: Int , v: Double ): Unit","title":"Set"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/set.html#set","text":"operator fun DenseMatrix.set(i: Int , v: Int ): Unit operator fun DenseMatrix.set(i: Int , j: Int , v: Int ): Unit operator fun DenseMatrix.set(i: Int , v: Double ): Unit","title":"set"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/svd.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / svd svd fun DenseMatrix.svd(): SVD","title":"Svd"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/svd.html#svd","text":"fun DenseMatrix.svd(): SVD","title":"svd"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/times.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / times times operator fun DenseMatrix.times(other: DenseMatrix): DenseMatrix operator fun DenseMatrix.times(other: Int ): DenseMatrix operator fun DenseMatrix.times(other: Double ): DenseMatrix","title":"Times"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/times.html#times","text":"operator fun DenseMatrix.times(other: DenseMatrix): DenseMatrix operator fun DenseMatrix.times(other: Int ): DenseMatrix operator fun DenseMatrix.times(other: Double ): DenseMatrix","title":"times"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/unary-minus.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.DenseMatrix / unaryMinus unaryMinus operator fun DenseMatrix.unaryMinus(): DenseMatrix","title":"Unary minus"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-dense-matrix/unary-minus.html#unaryminus","text":"operator fun DenseMatrix.unaryMinus(): DenseMatrix","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-matrix/index.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.Matrix Extensions for no.uib.cipr.matrix.Matrix Name Summary T val Matrix.T: Matrix","title":"Index"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-matrix/index.html#extensions-for-nouibciprmatrixmatrix","text":"Name Summary T val Matrix.T: Matrix","title":"Extensions for no.uib.cipr.matrix.Matrix"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-matrix/-t.html","text":"api / koma.matrix.mtj.backend / no.uib.cipr.matrix.Matrix / T T val Matrix.T: Matrix","title":" t"},{"location":"Reference_API_Docs/koma.matrix.mtj.backend/no.uib.cipr.matrix.-matrix/-t.html#t","text":"val Matrix.T: Matrix","title":"T"},{"location":"Reference_API_Docs/koma.ndarray/index.html","text":"api / koma.ndarray Package koma.ndarray Types Name Summary GenericNDArrayFactory interface GenericNDArrayFactory<T> A set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of the element. NDArray interface NDArray<T> A general N-dimensional container for arbitrary types. For this container to be useful, you'll probably want to import koma.extensions.*, which includes e.g. element getter/setters which are non boxed for primitives. NumericalNDArray interface ~~NumericalNDArray~~<T> : NDArray < T > An NDArray that holds a numerical type, such that math operations are available. NumericalNDArrayFactory interface NumericalNDArrayFactory<T : Number > : GenericNDArrayFactory < T > A set of constructors for a koma NDArray containing numerical data. For generic factories, see GenericNDArrayFactory .","title":"Index"},{"location":"Reference_API_Docs/koma.ndarray/index.html#package-komandarray","text":"","title":"Package koma.ndarray"},{"location":"Reference_API_Docs/koma.ndarray/index.html#types","text":"Name Summary GenericNDArrayFactory interface GenericNDArrayFactory<T> A set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of the element. NDArray interface NDArray<T> A general N-dimensional container for arbitrary types. For this container to be useful, you'll probably want to import koma.extensions.*, which includes e.g. element getter/setters which are non boxed for primitives. NumericalNDArray interface ~~NumericalNDArray~~<T> : NDArray < T > An NDArray that holds a numerical type, such that math operations are available. NumericalNDArrayFactory interface NumericalNDArrayFactory<T : Number > : GenericNDArrayFactory < T > A set of constructors for a koma NDArray containing numerical data. For generic factories, see GenericNDArrayFactory .","title":"Types"},{"location":"Reference_API_Docs/koma.ndarray/-generic-n-d-array-factory/index.html","text":"api / koma.ndarray / GenericNDArrayFactory GenericNDArrayFactory interface GenericNDArrayFactory<T> A set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of the element. Functions Name Summary createGeneric abstract fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> T ): NDArray < T > Generate an ND container of the requested shape without initializing its contents. Extension Functions Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > Inheritors Name Summary DefaultGenericNDArrayFactory class DefaultGenericNDArrayFactory<T> : GenericNDArrayFactory < T > NumericalNDArrayFactory interface NumericalNDArrayFactory<T : Number > : GenericNDArrayFactory < T > A set of constructors for a koma NDArray containing numerical data. For generic factories, see GenericNDArrayFactory .","title":"Index"},{"location":"Reference_API_Docs/koma.ndarray/-generic-n-d-array-factory/index.html#genericndarrayfactory","text":"interface GenericNDArrayFactory<T> A set of constructors that must be implemented by a koma NDArray backend. Generic parameter is the type of the element.","title":"GenericNDArrayFactory"},{"location":"Reference_API_Docs/koma.ndarray/-generic-n-d-array-factory/index.html#functions","text":"Name Summary createGeneric abstract fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> T ): NDArray < T > Generate an ND container of the requested shape without initializing its contents.","title":"Functions"},{"location":"Reference_API_Docs/koma.ndarray/-generic-n-d-array-factory/index.html#extension-functions","text":"Name Summary create fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.ndarray/-generic-n-d-array-factory/index.html#inheritors","text":"Name Summary DefaultGenericNDArrayFactory class DefaultGenericNDArrayFactory<T> : GenericNDArrayFactory < T > NumericalNDArrayFactory interface NumericalNDArrayFactory<T : Number > : GenericNDArrayFactory < T > A set of constructors for a koma NDArray containing numerical data. For generic factories, see GenericNDArrayFactory .","title":"Inheritors"},{"location":"Reference_API_Docs/koma.ndarray/-generic-n-d-array-factory/create-generic.html","text":"api / koma.ndarray / GenericNDArrayFactory / createGeneric createGeneric abstract fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> T ): NDArray < T > Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"Create generic"},{"location":"Reference_API_Docs/koma.ndarray/-generic-n-d-array-factory/create-generic.html#creategeneric","text":"abstract fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> T ): NDArray < T > Generate an ND container of the requested shape without initializing its contents. Depending on backend and platform, the resulting array may be, equivalent to zeros(*lengths), or may be initialized to memory garbage.","title":"createGeneric"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/index.html","text":"api / koma.ndarray / NDArray NDArray interface NDArray<T> A general N-dimensional container for arbitrary types. For this container to be useful, you'll probably want to import koma.extensions.*, which includes e.g. element getter/setters which are non boxed for primitives. If you are looking for a 2D container supporting linear algebra, please look at Matrix . Properties Name Summary size open val size: Int Functions Name Summary copy abstract fun copy(): NDArray < T > getBaseArray abstract fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte open fun getByte(i: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double open fun getDouble(i: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T abstract fun getGeneric(i: Int ): T getInt open fun getInt(vararg indices: Int ): Int open fun getInt(i: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long open fun getLong(i: Int ): Long getShort open fun getShort(vararg indices: Int ): Short open fun getShort(i: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , v: T ): Unit abstract fun setGeneric(i: Int , v: T ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit open fun setInt(i: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit open fun setShort(i: Int , v: Short ): Unit shape abstract fun shape(): List < Int > toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Companion Object Properties Name Summary byteFactory var byteFactory: NumericalNDArrayFactory < Byte > doubleFactory var doubleFactory: NumericalNDArrayFactory < Double > floatFactory var floatFactory: NumericalNDArrayFactory < Float > intFactory var intFactory: NumericalNDArrayFactory < Int > longFactory var longFactory: NumericalNDArrayFactory < Long > shortFactory var shortFactory: NumericalNDArrayFactory < Short > Companion Object Functions Name Summary createGeneric fun <T> createGeneric(vararg dims: Int , filler: ( IntArray ) -> T ): DefaultGenericNDArray < T > createGenericNulls fun <T> createGenericNulls(vararg dims: Int ): DefaultGenericNDArray < T ?> invoke operator fun <T> invoke(vararg dims: Int , filler: ( IntArray ) -> T ): NDArray < T > Extension Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Byte >.div(other: Byte ): NDArray < Byte > operator fun NDArray < Double >.div(other: Double ): NDArray < Double > operator fun NDArray < Float >.div(other: Float ): NDArray < Float > operator fun NDArray < Int >.div(other: Int ): NDArray < Int > operator fun NDArray < Long >.div(other: Long ): NDArray < Long > operator fun NDArray < Short >.div(other: Short ): NDArray < Short > fill fun NDArray < Byte >.fill(f: (idx: IntArray ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > fun NDArray < Long >.fill(f: (idx: IntArray ) -> Long ): NDArray < Long > fun NDArray < Short >.fill(f: (idx: IntArray ) -> Short ): NDArray < Short > fillBoth fun NDArray < Byte >.fillBoth(f: (nd: IntArray , linear: Int ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.fillBoth(f: (nd: IntArray , linear: Int ) -> Long ): NDArray < Long > fun NDArray < Short >.fillBoth(f: (nd: IntArray , linear: Int ) -> Short ): NDArray < Short > fillLinear fun NDArray < Byte >.fillLinear(f: (idx: Int ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.fillLinear(f: (idx: Int ) -> Long ): NDArray < Long > fun NDArray < Short >.fillLinear(f: (idx: Int ) -> Short ): NDArray < Short > forEach fun NDArray < Byte >.forEach(f: (ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEach(f: (ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEach(f: (ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Int >.forEach(f: (ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEach(f: (ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEach(f: (ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun NDArray < Byte >.forEachIndexed(f: (idx: Int , ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEachIndexed(f: (idx: Int , ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEachIndexed(f: (idx: Int , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Byte >.forEachIndexedN(f: (idx: IntArray , ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEachIndexedN(f: (idx: IntArray , ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEachIndexedN(f: (idx: IntArray , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun NDArray < Byte >.get(vararg indices: IntRange ): NDArray < Byte > operator fun NDArray < Byte >.get(vararg indices: Int ): Byte operator fun NDArray < Double >.get(vararg indices: IntRange ): NDArray < Double > operator fun NDArray < Double >.get(vararg indices: Int ): Double operator fun NDArray < Float >.get(vararg indices: IntRange ): NDArray < Float > operator fun NDArray < Float >.get(vararg indices: Int ): Float operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T operator fun NDArray < Int >.get(vararg indices: IntRange ): NDArray < Int > operator fun NDArray < Int >.get(vararg indices: Int ): Int operator fun NDArray < Long >.get(vararg indices: IntRange ): NDArray < Long > operator fun NDArray < Long >.get(vararg indices: Int ): Long operator fun NDArray < Short >.get(vararg indices: IntRange ): NDArray < Short > operator fun NDArray < Short >.get(vararg indices: Int ): Short linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun NDArray < Byte >.map(f: ( Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.map(f: ( Double ) -> Double ): NDArray < Double > fun NDArray < Float >.map(f: ( Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.map(f: ( Int ) -> Int ): NDArray < Int > fun NDArray < Long >.map(f: ( Long ) -> Long ): NDArray < Long > fun NDArray < Short >.map(f: ( Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun NDArray < Byte >.mapIndexed(f: (idx: Int , ele: Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.mapIndexed(f: (idx: Int , ele: Long ) -> Long ): NDArray < Long > fun NDArray < Short >.mapIndexed(f: (idx: Int , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Byte >.mapIndexedN(f: (idx: IntArray , ele: Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.mapIndexedN(f: (idx: IntArray , ele: Long ) -> Long ): NDArray < Long > fun NDArray < Short >.mapIndexedN(f: (idx: IntArray , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Byte >.minus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.minus(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Long >.minus(other: Long ): NDArray < Long > operator fun NDArray < Long >.minus(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Short >.minus(other: Short ): NDArray < Short > operator fun NDArray < Short >.minus(other: NDArray < Short >): NDArray < Short > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Byte >.plus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.plus(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Long >.plus(other: Long ): NDArray < Long > operator fun NDArray < Long >.plus(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Short >.plus(other: Short ): NDArray < Short > operator fun NDArray < Short >.plus(other: NDArray < Short >): NDArray < Short > pow infix fun NDArray < Byte >.pow(exponent: Int ): NDArray < Byte > infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > infix fun NDArray < Long >.pow(exponent: Int ): NDArray < Long > infix fun NDArray < Short >.pow(exponent: Int ): NDArray < Short > reshape fun NDArray < Double >.reshape(rows: Int , cols: Int ): Matrix < Double > fun NDArray < Float >.reshape(rows: Int , cols: Int ): Matrix < Float > fun NDArray < Int >.reshape(rows: Int , cols: Int ): Matrix < Int > Returns a new Matrix with the given shape, populated with the data in this array. fun NDArray < Byte >.reshape(vararg dims: Int ): NDArray < Byte > fun NDArray < Double >.reshape(vararg dims: Int ): NDArray < Double > fun NDArray < Float >.reshape(vararg dims: Int ): NDArray < Float > fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > fun NDArray < Int >.reshape(vararg dims: Int ): NDArray < Int > fun NDArray < Long >.reshape(vararg dims: Int ): NDArray < Long > fun NDArray < Short >.reshape(vararg dims: Int ): NDArray < Short > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun NDArray < Byte >.set(vararg indices: Int , value: NDArray < Byte >): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: Byte ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: NDArray < Long >): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: Long ): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: NDArray < Short >): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: Short ): Unit times operator fun NDArray < Byte >.times(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Byte >.times(other: Byte ): NDArray < Byte > operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double > operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Float >.times(other: Float ): NDArray < Float > operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Int >.times(other: Int ): NDArray < Int > operator fun NDArray < Long >.times(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Long >.times(other: Long ): NDArray < Long > operator fun NDArray < Short >.times(other: NDArray < Short >): NDArray < Short > operator fun NDArray < Short >.times(other: Short ): NDArray < Short > toByteArray fun NDArray < Byte >.toByteArray(): ByteArray Converts this NDArray into a one-dimensional ByteArray in row-major order. toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toFloatArray fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order. toIntArray fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order. toLongArray fun NDArray < Long >.toLongArray(): LongArray Converts this NDArray into a one-dimensional LongArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > fun NDArray < Float >.toMatrix(): Matrix < Float > fun NDArray < Int >.toMatrix(): Matrix < Int > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toShortArray fun NDArray < Short >.toShortArray(): ShortArray Converts this NDArray into a one-dimensional ShortArray in row-major order. toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Byte >.unaryMinus(): NDArray < Byte > operator fun NDArray < Double >.unaryMinus(): NDArray < Double > operator fun NDArray < Float >.unaryMinus(): NDArray < Float > operator fun NDArray < Int >.unaryMinus(): NDArray < Int > operator fun NDArray < Long >.unaryMinus(): NDArray < Long > operator fun NDArray < Short >.unaryMinus(): NDArray < Short > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int > Inheritors Name Summary DefaultByteNDArray open class DefaultByteNDArray : NDArray < Byte > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultDoubleNDArray open class DefaultDoubleNDArray : NDArray < Double > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultFloatNDArray open class DefaultFloatNDArray : NDArray < Float > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultGenericNDArray open class DefaultGenericNDArray<T> : NDArray < T > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultIntNDArray open class DefaultIntNDArray : NDArray < Int > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultLongNDArray open class DefaultLongNDArray : NDArray < Long > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultShortNDArray open class DefaultShortNDArray : NDArray < Short > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Matrix interface Matrix<T> : NDArray < T > A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see koma.ndarray.NDArray . NumericalNDArray interface ~~NumericalNDArray~~<T> : NDArray < T > An NDArray that holds a numerical type, such that math operations are available.","title":"Index"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/index.html#ndarray","text":"interface NDArray<T> A general N-dimensional container for arbitrary types. For this container to be useful, you'll probably want to import koma.extensions.*, which includes e.g. element getter/setters which are non boxed for primitives. If you are looking for a 2D container supporting linear algebra, please look at Matrix .","title":"NDArray"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/index.html#properties","text":"Name Summary size open val size: Int","title":"Properties"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/index.html#functions","text":"Name Summary copy abstract fun copy(): NDArray < T > getBaseArray abstract fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte open fun getByte(i: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double open fun getDouble(i: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T abstract fun getGeneric(i: Int ): T getInt open fun getInt(vararg indices: Int ): Int open fun getInt(i: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long open fun getLong(i: Int ): Long getShort open fun getShort(vararg indices: Int ): Short open fun getShort(i: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , v: T ): Unit abstract fun setGeneric(i: Int , v: T ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit open fun setInt(i: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit open fun setShort(i: Int , v: Short ): Unit shape abstract fun shape(): List < Int > toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Functions"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/index.html#companion-object-properties","text":"Name Summary byteFactory var byteFactory: NumericalNDArrayFactory < Byte > doubleFactory var doubleFactory: NumericalNDArrayFactory < Double > floatFactory var floatFactory: NumericalNDArrayFactory < Float > intFactory var intFactory: NumericalNDArrayFactory < Int > longFactory var longFactory: NumericalNDArrayFactory < Long > shortFactory var shortFactory: NumericalNDArrayFactory < Short >","title":"Companion Object Properties"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/index.html#companion-object-functions","text":"Name Summary createGeneric fun <T> createGeneric(vararg dims: Int , filler: ( IntArray ) -> T ): DefaultGenericNDArray < T > createGenericNulls fun <T> createGenericNulls(vararg dims: Int ): DefaultGenericNDArray < T ?> invoke operator fun <T> invoke(vararg dims: Int , filler: ( IntArray ) -> T ): NDArray < T >","title":"Companion Object Functions"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/index.html#extension-functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int div operator fun NDArray < Byte >.div(other: Byte ): NDArray < Byte > operator fun NDArray < Double >.div(other: Double ): NDArray < Double > operator fun NDArray < Float >.div(other: Float ): NDArray < Float > operator fun NDArray < Int >.div(other: Int ): NDArray < Int > operator fun NDArray < Long >.div(other: Long ): NDArray < Long > operator fun NDArray < Short >.div(other: Short ): NDArray < Short > fill fun NDArray < Byte >.fill(f: (idx: IntArray ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fill(f: (idx: IntArray ) -> Double ): NDArray < Double > fun NDArray < Float >.fill(f: (idx: IntArray ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fun NDArray < Int >.fill(f: (idx: IntArray ) -> Int ): NDArray < Int > fun NDArray < Long >.fill(f: (idx: IntArray ) -> Long ): NDArray < Long > fun NDArray < Short >.fill(f: (idx: IntArray ) -> Short ): NDArray < Short > fillBoth fun NDArray < Byte >.fillBoth(f: (nd: IntArray , linear: Int ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fillBoth(f: (nd: IntArray , linear: Int ) -> Double ): NDArray < Double > fun NDArray < Float >.fillBoth(f: (nd: IntArray , linear: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillBoth(f: (nd: IntArray , linear: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.fillBoth(f: (nd: IntArray , linear: Int ) -> Long ): NDArray < Long > fun NDArray < Short >.fillBoth(f: (nd: IntArray , linear: Int ) -> Short ): NDArray < Short > fillLinear fun NDArray < Byte >.fillLinear(f: (idx: Int ) -> Byte ): NDArray < Byte > fun NDArray < Double >.fillLinear(f: (idx: Int ) -> Double ): NDArray < Double > fun NDArray < Float >.fillLinear(f: (idx: Int ) -> Float ): NDArray < Float > fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > fun NDArray < Int >.fillLinear(f: (idx: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.fillLinear(f: (idx: Int ) -> Long ): NDArray < Long > fun NDArray < Short >.fillLinear(f: (idx: Int ) -> Short ): NDArray < Short > forEach fun NDArray < Byte >.forEach(f: (ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEach(f: (ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEach(f: (ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit fun NDArray < Int >.forEach(f: (ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEach(f: (ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEach(f: (ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun NDArray < Byte >.forEachIndexed(f: (idx: Int , ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEachIndexed(f: (idx: Int , ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEachIndexed(f: (idx: Int , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexed(f: (idx: Int , ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEachIndexed(f: (idx: Int , ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEachIndexed(f: (idx: Int , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun NDArray < Byte >.forEachIndexedN(f: (idx: IntArray , ele: Byte ) -> Unit ): Unit fun NDArray < Double >.forEachIndexedN(f: (idx: IntArray , ele: Double ) -> Unit ): Unit fun NDArray < Float >.forEachIndexedN(f: (idx: IntArray , ele: Float ) -> Unit ): Unit fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit fun NDArray < Int >.forEachIndexedN(f: (idx: IntArray , ele: Int ) -> Unit ): Unit fun NDArray < Long >.forEachIndexedN(f: (idx: IntArray , ele: Long ) -> Unit ): Unit fun NDArray < Short >.forEachIndexedN(f: (idx: IntArray , ele: Short ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun NDArray < Byte >.get(vararg indices: IntRange ): NDArray < Byte > operator fun NDArray < Byte >.get(vararg indices: Int ): Byte operator fun NDArray < Double >.get(vararg indices: IntRange ): NDArray < Double > operator fun NDArray < Double >.get(vararg indices: Int ): Double operator fun NDArray < Float >.get(vararg indices: IntRange ): NDArray < Float > operator fun NDArray < Float >.get(vararg indices: Int ): Float operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T operator fun NDArray < Int >.get(vararg indices: IntRange ): NDArray < Int > operator fun NDArray < Int >.get(vararg indices: Int ): Int operator fun NDArray < Long >.get(vararg indices: IntRange ): NDArray < Long > operator fun NDArray < Long >.get(vararg indices: Int ): Long operator fun NDArray < Short >.get(vararg indices: IntRange ): NDArray < Short > operator fun NDArray < Short >.get(vararg indices: Int ): Short linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun NDArray < Byte >.map(f: ( Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.map(f: ( Double ) -> Double ): NDArray < Double > fun NDArray < Float >.map(f: ( Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.map(f: ( Int ) -> Int ): NDArray < Int > fun NDArray < Long >.map(f: ( Long ) -> Long ): NDArray < Long > fun NDArray < Short >.map(f: ( Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun NDArray < Byte >.mapIndexed(f: (idx: Int , ele: Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.mapIndexed(f: (idx: Int , ele: Double ) -> Double ): NDArray < Double > fun NDArray < Float >.mapIndexed(f: (idx: Int , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > fun NDArray < Int >.mapIndexed(f: (idx: Int , ele: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.mapIndexed(f: (idx: Int , ele: Long ) -> Long ): NDArray < Long > fun NDArray < Short >.mapIndexed(f: (idx: Int , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun NDArray < Byte >.mapIndexedN(f: (idx: IntArray , ele: Byte ) -> Byte ): NDArray < Byte > fun NDArray < Double >.mapIndexedN(f: (idx: IntArray , ele: Double ) -> Double ): NDArray < Double > fun NDArray < Float >.mapIndexedN(f: (idx: IntArray , ele: Float ) -> Float ): NDArray < Float > fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > fun NDArray < Int >.mapIndexedN(f: (idx: IntArray , ele: Int ) -> Int ): NDArray < Int > fun NDArray < Long >.mapIndexedN(f: (idx: IntArray , ele: Long ) -> Long ): NDArray < Long > fun NDArray < Short >.mapIndexedN(f: (idx: IntArray , ele: Short ) -> Short ): NDArray < Short > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. minus operator fun NDArray < Byte >.minus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.minus(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Double >.minus(other: Double ): NDArray < Double > operator fun NDArray < Double >.minus(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Float >.minus(other: Float ): NDArray < Float > operator fun NDArray < Float >.minus(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Int >.minus(other: Int ): NDArray < Int > operator fun NDArray < Int >.minus(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Long >.minus(other: Long ): NDArray < Long > operator fun NDArray < Long >.minus(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Short >.minus(other: Short ): NDArray < Short > operator fun NDArray < Short >.minus(other: NDArray < Short >): NDArray < Short > nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. plus operator fun NDArray < Byte >.plus(other: Byte ): NDArray < Byte > operator fun NDArray < Byte >.plus(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Double >.plus(other: Double ): NDArray < Double > operator fun NDArray < Double >.plus(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Float >.plus(other: Float ): NDArray < Float > operator fun NDArray < Float >.plus(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Int >.plus(other: Int ): NDArray < Int > operator fun NDArray < Int >.plus(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Long >.plus(other: Long ): NDArray < Long > operator fun NDArray < Long >.plus(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Short >.plus(other: Short ): NDArray < Short > operator fun NDArray < Short >.plus(other: NDArray < Short >): NDArray < Short > pow infix fun NDArray < Byte >.pow(exponent: Int ): NDArray < Byte > infix fun NDArray < Double >.pow(exponent: Int ): NDArray < Double > infix fun NDArray < Float >.pow(exponent: Int ): NDArray < Float > infix fun NDArray < Int >.pow(exponent: Int ): NDArray < Int > infix fun NDArray < Long >.pow(exponent: Int ): NDArray < Long > infix fun NDArray < Short >.pow(exponent: Int ): NDArray < Short > reshape fun NDArray < Double >.reshape(rows: Int , cols: Int ): Matrix < Double > fun NDArray < Float >.reshape(rows: Int , cols: Int ): Matrix < Float > fun NDArray < Int >.reshape(rows: Int , cols: Int ): Matrix < Int > Returns a new Matrix with the given shape, populated with the data in this array. fun NDArray < Byte >.reshape(vararg dims: Int ): NDArray < Byte > fun NDArray < Double >.reshape(vararg dims: Int ): NDArray < Double > fun NDArray < Float >.reshape(vararg dims: Int ): NDArray < Float > fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > fun NDArray < Int >.reshape(vararg dims: Int ): NDArray < Int > fun NDArray < Long >.reshape(vararg dims: Int ): NDArray < Long > fun NDArray < Short >.reshape(vararg dims: Int ): NDArray < Short > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun NDArray < Byte >.set(vararg indices: Int , value: NDArray < Byte >): Unit operator fun NDArray < Byte >.set(vararg indices: Int , value: Byte ): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: NDArray < Double >): Unit operator fun NDArray < Double >.set(vararg indices: Int , value: Double ): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: NDArray < Float >): Unit operator fun NDArray < Float >.set(vararg indices: Int , value: Float ): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: NDArray < Int >): Unit operator fun NDArray < Int >.set(vararg indices: Int , value: Int ): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: NDArray < Long >): Unit operator fun NDArray < Long >.set(vararg indices: Int , value: Long ): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: NDArray < Short >): Unit operator fun NDArray < Short >.set(vararg indices: Int , value: Short ): Unit times operator fun NDArray < Byte >.times(other: NDArray < Byte >): NDArray < Byte > operator fun NDArray < Byte >.times(other: Byte ): NDArray < Byte > operator fun NDArray < Double >.times(other: NDArray < Double >): NDArray < Double > operator fun NDArray < Double >.times(other: Double ): NDArray < Double > operator fun NDArray < Float >.times(other: NDArray < Float >): NDArray < Float > operator fun NDArray < Float >.times(other: Float ): NDArray < Float > operator fun NDArray < Int >.times(other: NDArray < Int >): NDArray < Int > operator fun NDArray < Int >.times(other: Int ): NDArray < Int > operator fun NDArray < Long >.times(other: NDArray < Long >): NDArray < Long > operator fun NDArray < Long >.times(other: Long ): NDArray < Long > operator fun NDArray < Short >.times(other: NDArray < Short >): NDArray < Short > operator fun NDArray < Short >.times(other: Short ): NDArray < Short > toByteArray fun NDArray < Byte >.toByteArray(): ByteArray Converts this NDArray into a one-dimensional ByteArray in row-major order. toDoubleArray fun NDArray < Double >.toDoubleArray(): DoubleArray Converts this NDArray into a one-dimensional DoubleArray in row-major order. toFloatArray fun NDArray < Float >.toFloatArray(): FloatArray Converts this NDArray into a one-dimensional FloatArray in row-major order. toIntArray fun NDArray < Int >.toIntArray(): IntArray Converts this NDArray into a one-dimensional IntArray in row-major order. toLongArray fun NDArray < Long >.toLongArray(): LongArray Converts this NDArray into a one-dimensional LongArray in row-major order. toMatrix fun NDArray < Double >.toMatrix(): Matrix < Double > fun NDArray < Float >.toMatrix(): Matrix < Float > fun NDArray < Int >.toMatrix(): Matrix < Int > toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toShortArray fun NDArray < Short >.toShortArray(): ShortArray Converts this NDArray into a one-dimensional ShortArray in row-major order. toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. unaryMinus operator fun NDArray < Byte >.unaryMinus(): NDArray < Byte > operator fun NDArray < Double >.unaryMinus(): NDArray < Double > operator fun NDArray < Float >.unaryMinus(): NDArray < Float > operator fun NDArray < Int >.unaryMinus(): NDArray < Int > operator fun NDArray < Long >.unaryMinus(): NDArray < Long > operator fun NDArray < Short >.unaryMinus(): NDArray < Short > widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/index.html#inheritors","text":"Name Summary DefaultByteNDArray open class DefaultByteNDArray : NDArray < Byte > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultDoubleNDArray open class DefaultDoubleNDArray : NDArray < Double > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultFloatNDArray open class DefaultFloatNDArray : NDArray < Float > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultGenericNDArray open class DefaultGenericNDArray<T> : NDArray < T > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultIntNDArray open class DefaultIntNDArray : NDArray < Int > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultLongNDArray open class DefaultLongNDArray : NDArray < Long > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. DefaultShortNDArray open class DefaultShortNDArray : NDArray < Short > An (unoptimized) implementation of NDArray in pure Kotlin, for portability between the different platforms koma supports. Matrix interface Matrix<T> : NDArray < T > A general facade for a Matrix type. Allows for various backend to be implemented to actually perform the computation. A koma backend must both implement this class and MatrixFactory. A matrix is guaranteed to be 2D and to have a numerical type. For storage of arbitrary types and dimensions, see koma.ndarray.NDArray . NumericalNDArray interface ~~NumericalNDArray~~<T> : NDArray < T > An NDArray that holds a numerical type, such that math operations are available.","title":"Inheritors"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/byte-factory.html","text":"api / koma.ndarray / NDArray / byteFactory byteFactory var byteFactory: NumericalNDArrayFactory < Byte >","title":"Byte factory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/byte-factory.html#bytefactory","text":"var byteFactory: NumericalNDArrayFactory < Byte >","title":"byteFactory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/copy.html","text":"api / koma.ndarray / NDArray / copy copy abstract fun copy(): NDArray < T >","title":"Copy"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/copy.html#copy","text":"abstract fun copy(): NDArray < T >","title":"copy"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/create-generic-nulls.html","text":"api / koma.ndarray / NDArray / createGenericNulls createGenericNulls fun <T> createGenericNulls(vararg dims: Int ): DefaultGenericNDArray < T ?>","title":"Create generic nulls"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/create-generic-nulls.html#creategenericnulls","text":"fun <T> createGenericNulls(vararg dims: Int ): DefaultGenericNDArray < T ?>","title":"createGenericNulls"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/create-generic.html","text":"api / koma.ndarray / NDArray / createGeneric createGeneric fun <T> createGeneric(vararg dims: Int , filler: ( IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Create generic"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/create-generic.html#creategeneric","text":"fun <T> createGeneric(vararg dims: Int , filler: ( IntArray ) -> T ): DefaultGenericNDArray < T >","title":"createGeneric"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/double-factory.html","text":"api / koma.ndarray / NDArray / doubleFactory doubleFactory var doubleFactory: NumericalNDArrayFactory < Double >","title":"Double factory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/double-factory.html#doublefactory","text":"var doubleFactory: NumericalNDArrayFactory < Double >","title":"doubleFactory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/float-factory.html","text":"api / koma.ndarray / NDArray / floatFactory floatFactory var floatFactory: NumericalNDArrayFactory < Float >","title":"Float factory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/float-factory.html#floatfactory","text":"var floatFactory: NumericalNDArrayFactory < Float >","title":"floatFactory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-base-array.html","text":"api / koma.ndarray / NDArray / getBaseArray getBaseArray abstract fun getBaseArray(): Any","title":"Get base array"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-base-array.html#getbasearray","text":"abstract fun getBaseArray(): Any","title":"getBaseArray"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-byte.html","text":"api / koma.ndarray / NDArray / getByte getByte open fun getByte(vararg indices: Int ): Byte open fun getByte(i: Int ): Byte","title":"Get byte"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-byte.html#getbyte","text":"open fun getByte(vararg indices: Int ): Byte open fun getByte(i: Int ): Byte","title":"getByte"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-double.html","text":"api / koma.ndarray / NDArray / getDouble getDouble open fun getDouble(vararg indices: Int ): Double open fun getDouble(i: Int ): Double","title":"Get double"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-double.html#getdouble","text":"open fun getDouble(vararg indices: Int ): Double open fun getDouble(i: Int ): Double","title":"getDouble"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-float.html","text":"api / koma.ndarray / NDArray / getFloat getFloat open fun getFloat(vararg indices: Int ): Float open fun getFloat(i: Int ): Float","title":"Get float"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-float.html#getfloat","text":"open fun getFloat(vararg indices: Int ): Float open fun getFloat(i: Int ): Float","title":"getFloat"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-generic.html","text":"api / koma.ndarray / NDArray / getGeneric getGeneric open fun getGeneric(vararg indices: Int ): T abstract fun getGeneric(i: Int ): T","title":"Get generic"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-generic.html#getgeneric","text":"open fun getGeneric(vararg indices: Int ): T abstract fun getGeneric(i: Int ): T","title":"getGeneric"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-int.html","text":"api / koma.ndarray / NDArray / getInt getInt open fun getInt(vararg indices: Int ): Int open fun getInt(i: Int ): Int","title":"Get int"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-int.html#getint","text":"open fun getInt(vararg indices: Int ): Int open fun getInt(i: Int ): Int","title":"getInt"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-linear.html","text":"api / koma.ndarray / NDArray / getLinear getLinear open fun ~~getLinear~~(index: Int ): T Deprecated: Use NDArray.getGeneric","title":"Get linear"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-linear.html#getlinear","text":"open fun ~~getLinear~~(index: Int ): T Deprecated: Use NDArray.getGeneric","title":"getLinear"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-long.html","text":"api / koma.ndarray / NDArray / getLong getLong open fun getLong(vararg indices: Int ): Long open fun getLong(i: Int ): Long","title":"Get long"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-long.html#getlong","text":"open fun getLong(vararg indices: Int ): Long open fun getLong(i: Int ): Long","title":"getLong"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-short.html","text":"api / koma.ndarray / NDArray / getShort getShort open fun getShort(vararg indices: Int ): Short open fun getShort(i: Int ): Short","title":"Get short"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/get-short.html#getshort","text":"open fun getShort(vararg indices: Int ): Short open fun getShort(i: Int ): Short","title":"getShort"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/int-factory.html","text":"api / koma.ndarray / NDArray / intFactory intFactory var intFactory: NumericalNDArrayFactory < Int >","title":"Int factory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/int-factory.html#intfactory","text":"var intFactory: NumericalNDArrayFactory < Int >","title":"intFactory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/invoke.html","text":"api / koma.ndarray / NDArray / invoke invoke inline operator fun <reified T> invoke(vararg dims: Int , crossinline filler: ( IntArray ) -> T ): NDArray < T >","title":"Invoke"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/invoke.html#invoke","text":"inline operator fun <reified T> invoke(vararg dims: Int , crossinline filler: ( IntArray ) -> T ): NDArray < T >","title":"invoke"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/iterate-indices.html","text":"api / koma.ndarray / NDArray / iterateIndices iterateIndices open fun iterateIndices(): Iterable < IndexIterator >","title":"Iterate indices"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/iterate-indices.html#iterateindices","text":"open fun iterateIndices(): Iterable < IndexIterator >","title":"iterateIndices"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/long-factory.html","text":"api / koma.ndarray / NDArray / longFactory longFactory var longFactory: NumericalNDArrayFactory < Long >","title":"Long factory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/long-factory.html#longfactory","text":"var longFactory: NumericalNDArrayFactory < Long >","title":"longFactory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-byte.html","text":"api / koma.ndarray / NDArray / setByte setByte open fun setByte(vararg indices: Int , v: Byte ): Unit open fun setByte(i: Int , v: Byte ): Unit","title":"Set byte"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-byte.html#setbyte","text":"open fun setByte(vararg indices: Int , v: Byte ): Unit open fun setByte(i: Int , v: Byte ): Unit","title":"setByte"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-double.html","text":"api / koma.ndarray / NDArray / setDouble setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit open fun setDouble(i: Int , v: Double ): Unit","title":"Set double"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-double.html#setdouble","text":"open fun setDouble(vararg indices: Int , v: Double ): Unit open fun setDouble(i: Int , v: Double ): Unit","title":"setDouble"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-float.html","text":"api / koma.ndarray / NDArray / setFloat setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit open fun setFloat(i: Int , v: Float ): Unit","title":"Set float"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-float.html#setfloat","text":"open fun setFloat(vararg indices: Int , v: Float ): Unit open fun setFloat(i: Int , v: Float ): Unit","title":"setFloat"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-generic.html","text":"api / koma.ndarray / NDArray / setGeneric setGeneric open fun setGeneric(vararg indices: Int , v: T ): Unit abstract fun setGeneric(i: Int , v: T ): Unit","title":"Set generic"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-generic.html#setgeneric","text":"open fun setGeneric(vararg indices: Int , v: T ): Unit abstract fun setGeneric(i: Int , v: T ): Unit","title":"setGeneric"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-int.html","text":"api / koma.ndarray / NDArray / setInt setInt open fun setInt(vararg indices: Int , v: Int ): Unit open fun setInt(i: Int , v: Int ): Unit","title":"Set int"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-int.html#setint","text":"open fun setInt(vararg indices: Int , v: Int ): Unit open fun setInt(i: Int , v: Int ): Unit","title":"setInt"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-linear.html","text":"api / koma.ndarray / NDArray / setLinear setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit Deprecated: Use NDArray.getGeneric","title":"Set linear"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-linear.html#setlinear","text":"open fun ~~setLinear~~(index: Int , value: T ): Unit Deprecated: Use NDArray.getGeneric","title":"setLinear"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-long.html","text":"api / koma.ndarray / NDArray / setLong setLong open fun setLong(vararg indices: Int , v: Long ): Unit open fun setLong(i: Int , v: Long ): Unit","title":"Set long"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-long.html#setlong","text":"open fun setLong(vararg indices: Int , v: Long ): Unit open fun setLong(i: Int , v: Long ): Unit","title":"setLong"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-short.html","text":"api / koma.ndarray / NDArray / setShort setShort open fun setShort(vararg indices: Int , v: Short ): Unit open fun setShort(i: Int , v: Short ): Unit","title":"Set short"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/set-short.html#setshort","text":"open fun setShort(vararg indices: Int , v: Short ): Unit open fun setShort(i: Int , v: Short ): Unit","title":"setShort"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/shape.html","text":"api / koma.ndarray / NDArray / shape shape abstract fun shape(): List < Int >","title":"Shape"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/shape.html#shape","text":"abstract fun shape(): List < Int >","title":"shape"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/short-factory.html","text":"api / koma.ndarray / NDArray / shortFactory shortFactory var shortFactory: NumericalNDArrayFactory < Short >","title":"Short factory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/short-factory.html#shortfactory","text":"var shortFactory: NumericalNDArrayFactory < Short >","title":"shortFactory"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/size.html","text":"api / koma.ndarray / NDArray / size size open val size: Int","title":"Size"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/size.html#size","text":"open val size: Int","title":"size"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/to-iterable.html","text":"api / koma.ndarray / NDArray / toIterable toIterable open fun toIterable(): Iterable < T >","title":"To iterable"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/to-iterable.html#toiterable","text":"open fun toIterable(): Iterable < T >","title":"toIterable"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/to-list.html","text":"api / koma.ndarray / NDArray / toList toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order.","title":"To list"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/to-list.html#tolist","text":"open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order.","title":"toList"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/to-mutable-list.html","text":"api / koma.ndarray / NDArray / toMutableList toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"To mutable list"},{"location":"Reference_API_Docs/koma.ndarray/-n-d-array/to-mutable-list.html#tomutablelist","text":"open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"toMutableList"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html","text":"api / koma.ndarray / NumericalNDArray NumericalNDArray interface ~~NumericalNDArray~~<T> : NDArray < T > Deprecated: Use NDArray<Double> and the math extensions instead of NumericalNDArray An NDArray that holds a numerical type, such that math operations are available. Inherited Properties Name Summary size open val size: Int Functions Name Summary div abstract operator fun div(other: T ): NumericalNDArray < T > minus abstract operator fun minus(other: T ): NumericalNDArray < T > abstract operator fun minus(other: NDArray < T >): NumericalNDArray < T > plus abstract operator fun plus(other: T ): NumericalNDArray < T > abstract operator fun plus(other: NDArray < T >): NumericalNDArray < T > pow abstract infix fun pow(exponent: Int ): NumericalNDArray < T > times abstract operator fun times(other: NDArray < T >): NumericalNDArray < T > abstract operator fun times(other: T ): NumericalNDArray < T > unaryMinus abstract operator fun unaryMinus(): NumericalNDArray < T > Inherited Functions Name Summary copy abstract fun copy(): NDArray < T > getBaseArray abstract fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte open fun getByte(i: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double open fun getDouble(i: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T abstract fun getGeneric(i: Int ): T getInt open fun getInt(vararg indices: Int ): Int open fun getInt(i: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long open fun getLong(i: Int ): Long getShort open fun getShort(vararg indices: Int ): Short open fun getShort(i: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , v: T ): Unit abstract fun setGeneric(i: Int , v: T ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit open fun setInt(i: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit open fun setShort(i: Int , v: Short ): Unit shape abstract fun shape(): List < Int > toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order. Extension Functions Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. reshape fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Index"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html#numericalndarray","text":"interface ~~NumericalNDArray~~<T> : NDArray < T > Deprecated: Use NDArray<Double> and the math extensions instead of NumericalNDArray An NDArray that holds a numerical type, such that math operations are available.","title":"NumericalNDArray"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html#inherited-properties","text":"Name Summary size open val size: Int","title":"Inherited Properties"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html#functions","text":"Name Summary div abstract operator fun div(other: T ): NumericalNDArray < T > minus abstract operator fun minus(other: T ): NumericalNDArray < T > abstract operator fun minus(other: NDArray < T >): NumericalNDArray < T > plus abstract operator fun plus(other: T ): NumericalNDArray < T > abstract operator fun plus(other: NDArray < T >): NumericalNDArray < T > pow abstract infix fun pow(exponent: Int ): NumericalNDArray < T > times abstract operator fun times(other: NDArray < T >): NumericalNDArray < T > abstract operator fun times(other: T ): NumericalNDArray < T > unaryMinus abstract operator fun unaryMinus(): NumericalNDArray < T >","title":"Functions"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html#inherited-functions","text":"Name Summary copy abstract fun copy(): NDArray < T > getBaseArray abstract fun getBaseArray(): Any getByte open fun getByte(vararg indices: Int ): Byte open fun getByte(i: Int ): Byte getDouble open fun getDouble(vararg indices: Int ): Double open fun getDouble(i: Int ): Double getFloat open fun getFloat(vararg indices: Int ): Float open fun getFloat(i: Int ): Float getGeneric open fun getGeneric(vararg indices: Int ): T abstract fun getGeneric(i: Int ): T getInt open fun getInt(vararg indices: Int ): Int open fun getInt(i: Int ): Int getLinear open fun ~~getLinear~~(index: Int ): T getLong open fun getLong(vararg indices: Int ): Long open fun getLong(i: Int ): Long getShort open fun getShort(vararg indices: Int ): Short open fun getShort(i: Int ): Short iterateIndices open fun iterateIndices(): Iterable < IndexIterator > setByte open fun setByte(vararg indices: Int , v: Byte ): Unit open fun setByte(i: Int , v: Byte ): Unit setDouble open fun setDouble(vararg indices: Int , v: Double ): Unit open fun setDouble(i: Int , v: Double ): Unit setFloat open fun setFloat(vararg indices: Int , v: Float ): Unit open fun setFloat(i: Int , v: Float ): Unit setGeneric open fun setGeneric(vararg indices: Int , v: T ): Unit abstract fun setGeneric(i: Int , v: T ): Unit setInt open fun setInt(vararg indices: Int , v: Int ): Unit open fun setInt(i: Int , v: Int ): Unit setLinear open fun ~~setLinear~~(index: Int , value: T ): Unit setLong open fun setLong(vararg indices: Int , v: Long ): Unit open fun setLong(i: Int , v: Long ): Unit setShort open fun setShort(vararg indices: Int , v: Short ): Unit open fun setShort(i: Int , v: Short ): Unit shape abstract fun shape(): List < Int > toIterable open fun toIterable(): Iterable < T > toList open fun toList(): List < T > Converts this NDArray into a one-dimensional List in row-major order. toMutableList open fun toMutableList(): MutableList < T > Converts this NDArray into a one-dimensional MutableList in row-major order.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/index.html#extension-functions","text":"Name Summary checkIndices fun <T> NDArray < T >.checkIndices(indices: IntArray ): IntArray checkLinearIndex fun <T> NDArray < T >.checkLinearIndex(index: Int ): Int fill fun <T> NDArray < T >.fill(f: (idx: IntArray ) -> T ): NDArray < T > fillBoth fun <T> NDArray < T >.fillBoth(f: (nd: IntArray , linear: Int ) -> T ): NDArray < T > fillLinear fun <T> NDArray < T >.fillLinear(f: (idx: Int ) -> T ): NDArray < T > forEach fun <T> NDArray < T >.forEach(f: (ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. forEachIndexed fun <T> NDArray < T >.forEachIndexed(f: (idx: Int , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is a linear index, depending on the underlying storage major dimension. forEachIndexedN fun <T> NDArray < T >.forEachIndexedN(f: (idx: IntArray , ele: T ) -> Unit ): Unit Takes each element in a NDArray and passes them through f. Index given to f is the full ND index of the element. get operator fun <T> NDArray < T >.get(vararg indices: IntRange ): NDArray < T > operator fun <T> NDArray < T >.get(vararg indices: Int ): T linearToNIdx fun <T> NDArray < T >.linearToNIdx(linear: Int ): IntArray Given the 1D index of an element in the underlying storage, find the corresponding ND index. Inverse of nIdxToLinear . map fun <T> NDArray < T >.map(f: ( T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. mapIndexed fun <T> NDArray < T >.mapIndexed(f: (idx: Int , ele: T ) -> T ): DefaultGenericNDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is a linear index, depending on the underlying storage major dimension. mapIndexedN fun <T> NDArray < T >.mapIndexedN(f: (idx: IntArray , ele: T ) -> T ): NDArray < T > Takes each element in a NDArray, passes them through f, and puts the output of f into an output NDArray. Index given to f is the full ND index of the element. nIdxToLinear fun <T> NDArray < T >.nIdxToLinear(indices: IntArray ): Int Given a ND index into this array, find the corresponding 1D index in the raw underlying 1D storage array. reshape fun <T> NDArray < T >.reshape(vararg dims: Int ): NDArray < T > Returns a new NDArray with the given shape, populated with the data in this array. safeNIdxToLinear fun <T> NDArray < T >.safeNIdxToLinear(indices: IntArray ): Int set operator fun <T> NDArray < T >.set(vararg indices: Int , value: NDArray < T >): Unit operator fun <T> NDArray < T >.set(vararg indices: Int , value: T ): Unit toMatrixOrNull fun <T> NDArray < T >.toMatrixOrNull(): Matrix < T >? toTypedArray fun <T> NDArray < T >.toTypedArray(): Array < T > Converts this NDArray into a one-dimensional Array in row-major order. widthOfDims fun <T> NDArray < T >.widthOfDims(): ArrayList < Int >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/div.html","text":"api / koma.ndarray / NumericalNDArray / div div abstract operator fun div(other: T ): NumericalNDArray < T >","title":"Div"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/div.html#div","text":"abstract operator fun div(other: T ): NumericalNDArray < T >","title":"div"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/minus.html","text":"api / koma.ndarray / NumericalNDArray / minus minus abstract operator fun minus(other: T ): NumericalNDArray < T > abstract operator fun minus(other: NDArray < T >): NumericalNDArray < T >","title":"Minus"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/minus.html#minus","text":"abstract operator fun minus(other: T ): NumericalNDArray < T > abstract operator fun minus(other: NDArray < T >): NumericalNDArray < T >","title":"minus"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/plus.html","text":"api / koma.ndarray / NumericalNDArray / plus plus abstract operator fun plus(other: T ): NumericalNDArray < T > abstract operator fun plus(other: NDArray < T >): NumericalNDArray < T >","title":"Plus"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/plus.html#plus","text":"abstract operator fun plus(other: T ): NumericalNDArray < T > abstract operator fun plus(other: NDArray < T >): NumericalNDArray < T >","title":"plus"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/pow.html","text":"api / koma.ndarray / NumericalNDArray / pow pow abstract infix fun pow(exponent: Int ): NumericalNDArray < T >","title":"Pow"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/pow.html#pow","text":"abstract infix fun pow(exponent: Int ): NumericalNDArray < T >","title":"pow"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/times.html","text":"api / koma.ndarray / NumericalNDArray / times times abstract operator fun times(other: NDArray < T >): NumericalNDArray < T > abstract operator fun times(other: T ): NumericalNDArray < T >","title":"Times"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/times.html#times","text":"abstract operator fun times(other: NDArray < T >): NumericalNDArray < T > abstract operator fun times(other: T ): NumericalNDArray < T >","title":"times"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/unary-minus.html","text":"api / koma.ndarray / NumericalNDArray / unaryMinus unaryMinus abstract operator fun unaryMinus(): NumericalNDArray < T >","title":"Unary minus"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array/unary-minus.html#unaryminus","text":"abstract operator fun unaryMinus(): NumericalNDArray < T >","title":"unaryMinus"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html","text":"api / koma.ndarray / NumericalNDArrayFactory NumericalNDArrayFactory interface NumericalNDArrayFactory<T : Number > : GenericNDArrayFactory < T > A set of constructors for a koma NDArray containing numerical data. For generic factories, see GenericNDArrayFactory . Functions Name Summary ones abstract fun ones(vararg lengths: Int ): NDArray < T > Creates a 1 initialized ND container of the requested shape rand abstract fun rand(vararg lengths: Int ): NDArray < T > Creates a ND container of uniform 0-1 random samples randn abstract fun randn(vararg lengths: Int ): NDArray < T > Creates a ND container of unit-normal random samples zeros abstract fun zeros(vararg lengths: Int ): NDArray < T > Generate a zero initialized ND container of the requested shape Inherited Functions Name Summary createGeneric abstract fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> T ): NDArray < T > Generate an ND container of the requested shape without initializing its contents. Extension Functions Name Summary create fun NumericalNDArrayFactory < Byte >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Byte ): NDArray < Byte > fun NumericalNDArrayFactory < Double >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Double ): NDArray < Double > fun NumericalNDArrayFactory < Float >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Float ): NDArray < Float > fun NumericalNDArrayFactory < Int >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Int ): NDArray < Int > fun NumericalNDArrayFactory < Long >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Long ): NDArray < Long > fun NumericalNDArrayFactory < Short >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Short ): NDArray < Short > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T > Inheritors Name Summary DefaultByteNDArrayFactory class DefaultByteNDArrayFactory : NumericalNDArrayFactory < Byte > DefaultDoubleNDArrayFactory class DefaultDoubleNDArrayFactory : NumericalNDArrayFactory < Double > DefaultFloatNDArrayFactory class DefaultFloatNDArrayFactory : NumericalNDArrayFactory < Float > DefaultIntNDArrayFactory class DefaultIntNDArrayFactory : NumericalNDArrayFactory < Int > DefaultLongNDArrayFactory class DefaultLongNDArrayFactory : NumericalNDArrayFactory < Long > DefaultShortNDArrayFactory class DefaultShortNDArrayFactory : NumericalNDArrayFactory < Short >","title":"Index"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html#numericalndarrayfactory","text":"interface NumericalNDArrayFactory<T : Number > : GenericNDArrayFactory < T > A set of constructors for a koma NDArray containing numerical data. For generic factories, see GenericNDArrayFactory .","title":"NumericalNDArrayFactory"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html#functions","text":"Name Summary ones abstract fun ones(vararg lengths: Int ): NDArray < T > Creates a 1 initialized ND container of the requested shape rand abstract fun rand(vararg lengths: Int ): NDArray < T > Creates a ND container of uniform 0-1 random samples randn abstract fun randn(vararg lengths: Int ): NDArray < T > Creates a ND container of unit-normal random samples zeros abstract fun zeros(vararg lengths: Int ): NDArray < T > Generate a zero initialized ND container of the requested shape","title":"Functions"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html#inherited-functions","text":"Name Summary createGeneric abstract fun createGeneric(lengths: IntArray , filler: ( IntArray ) -> T ): NDArray < T > Generate an ND container of the requested shape without initializing its contents.","title":"Inherited Functions"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html#extension-functions","text":"Name Summary create fun NumericalNDArrayFactory < Byte >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Byte ): NDArray < Byte > fun NumericalNDArrayFactory < Double >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Double ): NDArray < Double > fun NumericalNDArrayFactory < Float >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Float ): NDArray < Float > fun NumericalNDArrayFactory < Int >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Int ): NDArray < Int > fun NumericalNDArrayFactory < Long >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Long ): NDArray < Long > fun NumericalNDArrayFactory < Short >.create(vararg lengths: Int , filler: (idx: IntArray ) -> Short ): NDArray < Short > fun <T> GenericNDArrayFactory < T >.create(vararg lengths: Int , filler: (idx: IntArray ) -> T ): DefaultGenericNDArray < T >","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/index.html#inheritors","text":"Name Summary DefaultByteNDArrayFactory class DefaultByteNDArrayFactory : NumericalNDArrayFactory < Byte > DefaultDoubleNDArrayFactory class DefaultDoubleNDArrayFactory : NumericalNDArrayFactory < Double > DefaultFloatNDArrayFactory class DefaultFloatNDArrayFactory : NumericalNDArrayFactory < Float > DefaultIntNDArrayFactory class DefaultIntNDArrayFactory : NumericalNDArrayFactory < Int > DefaultLongNDArrayFactory class DefaultLongNDArrayFactory : NumericalNDArrayFactory < Long > DefaultShortNDArrayFactory class DefaultShortNDArrayFactory : NumericalNDArrayFactory < Short >","title":"Inheritors"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/ones.html","text":"api / koma.ndarray / NumericalNDArrayFactory / ones ones abstract fun ones(vararg lengths: Int ): NDArray < T > Creates a 1 initialized ND container of the requested shape","title":"Ones"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/ones.html#ones","text":"abstract fun ones(vararg lengths: Int ): NDArray < T > Creates a 1 initialized ND container of the requested shape","title":"ones"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/rand.html","text":"api / koma.ndarray / NumericalNDArrayFactory / rand rand abstract fun rand(vararg lengths: Int ): NDArray < T > Creates a ND container of uniform 0-1 random samples","title":"Rand"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/rand.html#rand","text":"abstract fun rand(vararg lengths: Int ): NDArray < T > Creates a ND container of uniform 0-1 random samples","title":"rand"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/randn.html","text":"api / koma.ndarray / NumericalNDArrayFactory / randn randn abstract fun randn(vararg lengths: Int ): NDArray < T > Creates a ND container of unit-normal random samples","title":"Randn"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/randn.html#randn","text":"abstract fun randn(vararg lengths: Int ): NDArray < T > Creates a ND container of unit-normal random samples","title":"randn"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/zeros.html","text":"api / koma.ndarray / NumericalNDArrayFactory / zeros zeros abstract fun zeros(vararg lengths: Int ): NDArray < T > Generate a zero initialized ND container of the requested shape","title":"Zeros"},{"location":"Reference_API_Docs/koma.ndarray/-numerical-n-d-array-factory/zeros.html#zeros","text":"abstract fun zeros(vararg lengths: Int ): NDArray < T > Generate a zero initialized ND container of the requested shape","title":"zeros"},{"location":"Reference_API_Docs/koma.ndarray.default/index.html","text":"api / koma.ndarray.default Package koma.ndarray.default Type Aliases Name Summary DefaultDoubleNDArray typealias ~~DefaultDoubleNDArray~~ = DefaultDoubleNDArray DefaultFloatNDArray typealias ~~DefaultFloatNDArray~~ = DefaultFloatNDArray DefaultIntNDArray typealias ~~DefaultIntNDArray~~ = DefaultIntNDArray DefaultNDArray typealias ~~DefaultNDArray~~<T> = DefaultGenericNDArray < T >","title":"Index"},{"location":"Reference_API_Docs/koma.ndarray.default/index.html#package-komandarraydefault","text":"","title":"Package koma.ndarray.default"},{"location":"Reference_API_Docs/koma.ndarray.default/index.html#type-aliases","text":"Name Summary DefaultDoubleNDArray typealias ~~DefaultDoubleNDArray~~ = DefaultDoubleNDArray DefaultFloatNDArray typealias ~~DefaultFloatNDArray~~ = DefaultFloatNDArray DefaultIntNDArray typealias ~~DefaultIntNDArray~~ = DefaultIntNDArray DefaultNDArray typealias ~~DefaultNDArray~~<T> = DefaultGenericNDArray < T >","title":"Type Aliases"},{"location":"Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array.html","text":"api / koma.ndarray.default / DefaultDoubleNDArray DefaultDoubleNDArray typealias ~~DefaultDoubleNDArray~~ = DefaultDoubleNDArray Deprecated: Use NDArray.doubleFactory","title":" default double n d array"},{"location":"Reference_API_Docs/koma.ndarray.default/-default-double-n-d-array.html#defaultdoublendarray","text":"typealias ~~DefaultDoubleNDArray~~ = DefaultDoubleNDArray Deprecated: Use NDArray.doubleFactory","title":"DefaultDoubleNDArray"},{"location":"Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array.html","text":"api / koma.ndarray.default / DefaultFloatNDArray DefaultFloatNDArray typealias ~~DefaultFloatNDArray~~ = DefaultFloatNDArray Deprecated: Use NDArray.floatFactory","title":" default float n d array"},{"location":"Reference_API_Docs/koma.ndarray.default/-default-float-n-d-array.html#defaultfloatndarray","text":"typealias ~~DefaultFloatNDArray~~ = DefaultFloatNDArray Deprecated: Use NDArray.floatFactory","title":"DefaultFloatNDArray"},{"location":"Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array.html","text":"api / koma.ndarray.default / DefaultIntNDArray DefaultIntNDArray typealias ~~DefaultIntNDArray~~ = DefaultIntNDArray Deprecated: Use NDArray.intFactory","title":" default int n d array"},{"location":"Reference_API_Docs/koma.ndarray.default/-default-int-n-d-array.html#defaultintndarray","text":"typealias ~~DefaultIntNDArray~~ = DefaultIntNDArray Deprecated: Use NDArray.intFactory","title":"DefaultIntNDArray"},{"location":"Reference_API_Docs/koma.ndarray.default/-default-n-d-array.html","text":"api / koma.ndarray.default / DefaultNDArray DefaultNDArray typealias ~~DefaultNDArray~~<T> = DefaultGenericNDArray < T > Deprecated: Use NDArray.getGenericFactory<T>().create(...)","title":" default n d array"},{"location":"Reference_API_Docs/koma.ndarray.default/-default-n-d-array.html#defaultndarray","text":"typealias ~~DefaultNDArray~~<T> = DefaultGenericNDArray < T > Deprecated: Use NDArray.getGenericFactory<T>().create(...)","title":"DefaultNDArray"},{"location":"Reference_API_Docs/koma.util/index.html","text":"api / koma.util Package koma.util Types Name Summary IndexIterator data class IndexIterator : Iterator < IndexIterator > An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data. Functions Name Summary fromCollection fun fromCollection(collection: Collection < Double >): DoubleArray fun fromCollection(collection: Collection < Int >): IntArray Converts a collection into a primitive DoubleArray","title":"Index"},{"location":"Reference_API_Docs/koma.util/index.html#package-komautil","text":"","title":"Package koma.util"},{"location":"Reference_API_Docs/koma.util/index.html#types","text":"Name Summary IndexIterator data class IndexIterator : Iterator < IndexIterator > An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data.","title":"Types"},{"location":"Reference_API_Docs/koma.util/index.html#functions","text":"Name Summary fromCollection fun fromCollection(collection: Collection < Double >): DoubleArray fun fromCollection(collection: Collection < Int >): IntArray Converts a collection into a primitive DoubleArray","title":"Functions"},{"location":"Reference_API_Docs/koma.util/from-collection.html","text":"api / koma.util / fromCollection fromCollection fun fromCollection(collection: Collection < Double >): DoubleArray fun fromCollection(collection: Collection < Int >): IntArray Converts a collection into a primitive DoubleArray","title":"From collection"},{"location":"Reference_API_Docs/koma.util/from-collection.html#fromcollection","text":"fun fromCollection(collection: Collection < Double >): DoubleArray fun fromCollection(collection: Collection < Int >): IntArray Converts a collection into a primitive DoubleArray","title":"fromCollection"},{"location":"Reference_API_Docs/koma.util/-index-iterator/index.html","text":"api / koma.util / IndexIterator IndexIterator data class IndexIterator : Iterator < IndexIterator > An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data. Constructors Name Summary <init> IndexIterator(nd: IntArray , linear: Int = 0) An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data. Properties Name Summary linear var linear: Int nd var nd: IntArray Functions Name Summary hasNext fun hasNext(): Boolean next fun next(): IndexIterator Companion Object Functions Name Summary invoke operator fun invoke(shapeFactory: () -> IntArray ): Iterable < IndexIterator >","title":"Index"},{"location":"Reference_API_Docs/koma.util/-index-iterator/index.html#indexiterator","text":"data class IndexIterator : Iterator < IndexIterator > An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data.","title":"IndexIterator"},{"location":"Reference_API_Docs/koma.util/-index-iterator/index.html#constructors","text":"Name Summary <init> IndexIterator(nd: IntArray , linear: Int = 0) An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data.","title":"Constructors"},{"location":"Reference_API_Docs/koma.util/-index-iterator/index.html#properties","text":"Name Summary linear var linear: Int nd var nd: IntArray","title":"Properties"},{"location":"Reference_API_Docs/koma.util/-index-iterator/index.html#functions","text":"Name Summary hasNext fun hasNext(): Boolean next fun next(): IndexIterator","title":"Functions"},{"location":"Reference_API_Docs/koma.util/-index-iterator/index.html#companion-object-functions","text":"Name Summary invoke operator fun invoke(shapeFactory: () -> IntArray ): Iterable < IndexIterator >","title":"Companion Object Functions"},{"location":"Reference_API_Docs/koma.util/-index-iterator/-init-.html","text":"api / koma.util / IndexIterator / <init> <init> IndexIterator(nd: IntArray , linear: Int = 0) An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data.","title":" init "},{"location":"Reference_API_Docs/koma.util/-index-iterator/-init-.html#init","text":"IndexIterator(nd: IntArray , linear: Int = 0) An Iterator that counts indices of a given shape in row-major order, simultaneously in both array and linear form. Useful for stepping through N-dimensional data.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.util/-index-iterator/has-next.html","text":"api / koma.util / IndexIterator / hasNext hasNext fun hasNext(): Boolean","title":"Has next"},{"location":"Reference_API_Docs/koma.util/-index-iterator/has-next.html#hasnext","text":"fun hasNext(): Boolean","title":"hasNext"},{"location":"Reference_API_Docs/koma.util/-index-iterator/invoke.html","text":"api / koma.util / IndexIterator / invoke invoke operator fun invoke(shapeFactory: () -> IntArray ): Iterable < IndexIterator >","title":"Invoke"},{"location":"Reference_API_Docs/koma.util/-index-iterator/invoke.html#invoke","text":"operator fun invoke(shapeFactory: () -> IntArray ): Iterable < IndexIterator >","title":"invoke"},{"location":"Reference_API_Docs/koma.util/-index-iterator/linear.html","text":"api / koma.util / IndexIterator / linear linear var linear: Int","title":"Linear"},{"location":"Reference_API_Docs/koma.util/-index-iterator/linear.html#linear","text":"var linear: Int","title":"linear"},{"location":"Reference_API_Docs/koma.util/-index-iterator/nd.html","text":"api / koma.util / IndexIterator / nd nd var nd: IntArray","title":"Nd"},{"location":"Reference_API_Docs/koma.util/-index-iterator/nd.html#nd","text":"var nd: IntArray","title":"nd"},{"location":"Reference_API_Docs/koma.util/-index-iterator/next.html","text":"api / koma.util / IndexIterator / next next fun next(): IndexIterator","title":"Next"},{"location":"Reference_API_Docs/koma.util/-index-iterator/next.html#next","text":"fun next(): IndexIterator","title":"next"},{"location":"Reference_API_Docs/koma.util.test/index.html","text":"api / koma.util.test Package koma.util.test Functions Name Summary allBackends fun allBackends(f: () -> Unit ): Unit A helper function to run tests against all available backends in sequence. Sets koma.factory to each backend consecutively and then runs the passed in block of code. Note that code that manually sets its own backend (e.g. by creating a MTJMatrix instance explicitly) will not be affected by this function. Code that uses top-level functions and generic Matrix functions should work correctly. assertMatrixEquals fun <T : Number > assertMatrixEquals(expected: Matrix < T >, actual: Matrix < T >, eps: Double = 1e-6): Unit Asserts that a matrix expected , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/expected) roughly equals a matrix actual , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/actual). eps is the acceptable numerical error.","title":"Index"},{"location":"Reference_API_Docs/koma.util.test/index.html#package-komautiltest","text":"","title":"Package koma.util.test"},{"location":"Reference_API_Docs/koma.util.test/index.html#functions","text":"Name Summary allBackends fun allBackends(f: () -> Unit ): Unit A helper function to run tests against all available backends in sequence. Sets koma.factory to each backend consecutively and then runs the passed in block of code. Note that code that manually sets its own backend (e.g. by creating a MTJMatrix instance explicitly) will not be affected by this function. Code that uses top-level functions and generic Matrix functions should work correctly. assertMatrixEquals fun <T : Number > assertMatrixEquals(expected: Matrix < T >, actual: Matrix < T >, eps: Double = 1e-6): Unit Asserts that a matrix expected , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/expected) roughly equals a matrix actual , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/actual). eps is the acceptable numerical error.","title":"Functions"},{"location":"Reference_API_Docs/koma.util.test/all-backends.html","text":"api / koma.util.test / allBackends allBackends fun allBackends(f: () -> Unit ): Unit A helper function to run tests against all available backends in sequence. Sets koma.factory to each backend consecutively and then runs the passed in block of code. Note that code that manually sets its own backend (e.g. by creating a MTJMatrix instance explicitly) will not be affected by this function. Code that uses top-level functions and generic Matrix functions should work correctly. Note: this function sets koma.factory to an arbitrary backend, so reset it afterwards if needed.","title":"All backends"},{"location":"Reference_API_Docs/koma.util.test/all-backends.html#allbackends","text":"fun allBackends(f: () -> Unit ): Unit A helper function to run tests against all available backends in sequence. Sets koma.factory to each backend consecutively and then runs the passed in block of code. Note that code that manually sets its own backend (e.g. by creating a MTJMatrix instance explicitly) will not be affected by this function. Code that uses top-level functions and generic Matrix functions should work correctly. Note: this function sets koma.factory to an arbitrary backend, so reset it afterwards if needed.","title":"allBackends"},{"location":"Reference_API_Docs/koma.util.test/assert-matrix-equals.html","text":"api / koma.util.test / assertMatrixEquals assertMatrixEquals fun <T : Number > assertMatrixEquals(expected: Matrix < T >, actual: Matrix < T >, eps: Double = 1e-6): Unit Asserts that a matrix expected , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/expected) roughly equals a matrix actual , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/actual). eps is the acceptable numerical error.","title":"Assert matrix equals"},{"location":"Reference_API_Docs/koma.util.test/assert-matrix-equals.html#assertmatrixequals","text":"fun <T : Number > assertMatrixEquals(expected: Matrix < T >, actual: Matrix < T >, eps: Double = 1e-6): Unit Asserts that a matrix expected , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/expected) roughly equals a matrix actual , koma.matrix.Matrix((koma.util.test.assertMatrixEquals.T)), kotlin.Double)/actual). eps is the acceptable numerical error.","title":"assertMatrixEquals"},{"location":"Reference_API_Docs/koma.util.validation/index.html","text":"api / koma.util.validation Package koma.util.validation Types Name Summary ValidationContext class ValidationContext A lambda receiver with state and convenience methods for validating a group of matrices. Validator interface Validator Callback used by ValidationContext after evaluating all rules. Subclass this if your validation plugin needs to hold all validation until the end. Properties Name Summary max var ValidationContext .max: Double Maximum value for individual elements in the matrix. min var ValidationContext .min: Double Minimum value for individual elements in the matrix. symmetric val ValidationContext .symmetric: ValidationContext Require the current matrix to be symmetric. transposable val ValidationContext .transposable: ValidationContext Accept a transposed version of the matrix as satisfying the dimensions check. For example, allow a 1 x 3 matrix when dimensions are declared as 3 x 1. Functions Name Summary dim fun ValidationContext .dim(rows: Int , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of rows and columns. fun ValidationContext .dim(rows: Int , cols: Char ): ValidationContext Require the current matrix to have exactly the given number of rows and match the number of columns with other dimensions in other matrices based on the cols variable name. fun ValidationContext .dim(rows: Char , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of columns and match the number of rows with other dimensions in other matrices based on the rows variable name. fun ValidationContext .dim(rows: Char , cols: Char ): ValidationContext Require the current matrix's dimensions to correspond to the given variable names. Compares with other dimensions in other matrices in the context that are assigned the same variable name and raises an error if they don't all match. max fun ValidationContext .max(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. min fun ValidationContext .min(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. symmetric fun ValidationContext .symmetric(precision: Double = 1e-5): ValidationContext testMatrix fun testMatrix(matrix: Matrix < Double >): ValidationContext Return a validation context that can be used to validate the given matrix with the default name of \"matrix\". fun testMatrix(matrix: Matrix < Double >, name: String ): ValidationContext Return a validation context that can be used to validate the given matrix with the given name. validate fun validate(fn: ValidationContext .() -> Unit ): Unit Execute the given rules within a ValidationContext, letting you validate multiple matrices at once with interrelated dimensions, and return a list of matrices that match your validation rules. fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules.","title":"Index"},{"location":"Reference_API_Docs/koma.util.validation/index.html#package-komautilvalidation","text":"","title":"Package koma.util.validation"},{"location":"Reference_API_Docs/koma.util.validation/index.html#types","text":"Name Summary ValidationContext class ValidationContext A lambda receiver with state and convenience methods for validating a group of matrices. Validator interface Validator Callback used by ValidationContext after evaluating all rules. Subclass this if your validation plugin needs to hold all validation until the end.","title":"Types"},{"location":"Reference_API_Docs/koma.util.validation/index.html#properties","text":"Name Summary max var ValidationContext .max: Double Maximum value for individual elements in the matrix. min var ValidationContext .min: Double Minimum value for individual elements in the matrix. symmetric val ValidationContext .symmetric: ValidationContext Require the current matrix to be symmetric. transposable val ValidationContext .transposable: ValidationContext Accept a transposed version of the matrix as satisfying the dimensions check. For example, allow a 1 x 3 matrix when dimensions are declared as 3 x 1.","title":"Properties"},{"location":"Reference_API_Docs/koma.util.validation/index.html#functions","text":"Name Summary dim fun ValidationContext .dim(rows: Int , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of rows and columns. fun ValidationContext .dim(rows: Int , cols: Char ): ValidationContext Require the current matrix to have exactly the given number of rows and match the number of columns with other dimensions in other matrices based on the cols variable name. fun ValidationContext .dim(rows: Char , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of columns and match the number of rows with other dimensions in other matrices based on the rows variable name. fun ValidationContext .dim(rows: Char , cols: Char ): ValidationContext Require the current matrix's dimensions to correspond to the given variable names. Compares with other dimensions in other matrices in the context that are assigned the same variable name and raises an error if they don't all match. max fun ValidationContext .max(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. min fun ValidationContext .min(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. symmetric fun ValidationContext .symmetric(precision: Double = 1e-5): ValidationContext testMatrix fun testMatrix(matrix: Matrix < Double >): ValidationContext Return a validation context that can be used to validate the given matrix with the default name of \"matrix\". fun testMatrix(matrix: Matrix < Double >, name: String ): ValidationContext Return a validation context that can be used to validate the given matrix with the given name. validate fun validate(fn: ValidationContext .() -> Unit ): Unit Execute the given rules within a ValidationContext, letting you validate multiple matrices at once with interrelated dimensions, and return a list of matrices that match your validation rules. fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules.","title":"Functions"},{"location":"Reference_API_Docs/koma.util.validation/dim.html","text":"api / koma.util.validation / dim dim fun ValidationContext .dim(rows: Int , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of rows and columns. Parameters rows - Fixed number of rows to require. cols - Fixed number of columns to require. fun ValidationContext .dim(rows: Int , cols: Char ): ValidationContext Require the current matrix to have exactly the given number of rows and match the number of columns with other dimensions in other matrices based on the cols variable name. Parameters rows - Fixed number of rows to require. cols - Variable name for the number of cols in the matrix fun ValidationContext .dim(rows: Char , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of columns and match the number of rows with other dimensions in other matrices based on the rows variable name. Parameters rows - Variable name for the number of rows in the matrix cols - Fixed number of columns to require. fun ValidationContext .dim(rows: Char , cols: Char ): ValidationContext Require the current matrix's dimensions to correspond to the given variable names. Compares with other dimensions in other matrices in the context that are assigned the same variable name and raises an error if they don't all match. Parameters rows - Variable name for the number of rows in the matrix cols - Variable name for the number of cols in the matrix","title":"Dim"},{"location":"Reference_API_Docs/koma.util.validation/dim.html#dim","text":"fun ValidationContext .dim(rows: Int , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of rows and columns.","title":"dim"},{"location":"Reference_API_Docs/koma.util.validation/dim.html#parameters","text":"rows - Fixed number of rows to require. cols - Fixed number of columns to require. fun ValidationContext .dim(rows: Int , cols: Char ): ValidationContext Require the current matrix to have exactly the given number of rows and match the number of columns with other dimensions in other matrices based on the cols variable name.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/dim.html#parameters_1","text":"rows - Fixed number of rows to require. cols - Variable name for the number of cols in the matrix fun ValidationContext .dim(rows: Char , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of columns and match the number of rows with other dimensions in other matrices based on the rows variable name.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/dim.html#parameters_2","text":"rows - Variable name for the number of rows in the matrix cols - Fixed number of columns to require. fun ValidationContext .dim(rows: Char , cols: Char ): ValidationContext Require the current matrix's dimensions to correspond to the given variable names. Compares with other dimensions in other matrices in the context that are assigned the same variable name and raises an error if they don't all match.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/dim.html#parameters_3","text":"rows - Variable name for the number of rows in the matrix cols - Variable name for the number of cols in the matrix","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/max.html","text":"api / koma.util.validation / max max var ValidationContext .max: Double Maximum value for individual elements in the matrix. fun ValidationContext .max(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. Parameters value - The maximum value required of all elements in the matrix.","title":"Max"},{"location":"Reference_API_Docs/koma.util.validation/max.html#max","text":"var ValidationContext .max: Double Maximum value for individual elements in the matrix. fun ValidationContext .max(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value.","title":"max"},{"location":"Reference_API_Docs/koma.util.validation/max.html#parameters","text":"value - The maximum value required of all elements in the matrix.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/min.html","text":"api / koma.util.validation / min min var ValidationContext .min: Double Minimum value for individual elements in the matrix. fun ValidationContext .min(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. Parameters value - The minimum value required of all elements in the matrix.","title":"Min"},{"location":"Reference_API_Docs/koma.util.validation/min.html#min","text":"var ValidationContext .min: Double Minimum value for individual elements in the matrix. fun ValidationContext .min(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value.","title":"min"},{"location":"Reference_API_Docs/koma.util.validation/min.html#parameters","text":"value - The minimum value required of all elements in the matrix.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/symmetric.html","text":"api / koma.util.validation / symmetric symmetric fun ValidationContext .symmetric(precision: Double = 1e-5): ValidationContext val ValidationContext .symmetric: ValidationContext Require the current matrix to be symmetric.","title":"Symmetric"},{"location":"Reference_API_Docs/koma.util.validation/symmetric.html#symmetric","text":"fun ValidationContext .symmetric(precision: Double = 1e-5): ValidationContext val ValidationContext .symmetric: ValidationContext Require the current matrix to be symmetric.","title":"symmetric"},{"location":"Reference_API_Docs/koma.util.validation/test-matrix.html","text":"api / koma.util.validation / testMatrix testMatrix fun testMatrix(matrix: Matrix < Double >): ValidationContext Return a validation context that can be used to validate the given matrix with the default name of \"matrix\". In general it is preferable to use the other verison of this function that lets you specify a name. All matrices that are validated with this method will appear in the error message with the name \"matrix\" Parameters matrix - A matrix to validate. Returns A validation context that can be used to validate the given matrix. fun testMatrix(matrix: Matrix < Double >, name: String ): ValidationContext Return a validation context that can be used to validate the given matrix with the given name. Parameters matrix - A matrix to validate. name - The name of the matrix (used in displayed errors) Returns A validation context that can be used to validate the given matrix.","title":"Test matrix"},{"location":"Reference_API_Docs/koma.util.validation/test-matrix.html#testmatrix","text":"fun testMatrix(matrix: Matrix < Double >): ValidationContext Return a validation context that can be used to validate the given matrix with the default name of \"matrix\". In general it is preferable to use the other verison of this function that lets you specify a name. All matrices that are validated with this method will appear in the error message with the name \"matrix\"","title":"testMatrix"},{"location":"Reference_API_Docs/koma.util.validation/test-matrix.html#parameters","text":"matrix - A matrix to validate. Returns A validation context that can be used to validate the given matrix. fun testMatrix(matrix: Matrix < Double >, name: String ): ValidationContext Return a validation context that can be used to validate the given matrix with the given name.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/test-matrix.html#parameters_1","text":"matrix - A matrix to validate. name - The name of the matrix (used in displayed errors) Returns A validation context that can be used to validate the given matrix.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/transposable.html","text":"api / koma.util.validation / transposable transposable val ValidationContext .transposable: ValidationContext Accept a transposed version of the matrix as satisfying the dimensions check. For example, allow a 1 x 3 matrix when dimensions are declared as 3 x 1.","title":"Transposable"},{"location":"Reference_API_Docs/koma.util.validation/transposable.html#transposable","text":"val ValidationContext .transposable: ValidationContext Accept a transposed version of the matrix as satisfying the dimensions check. For example, allow a 1 x 3 matrix when dimensions are declared as 3 x 1.","title":"transposable"},{"location":"Reference_API_Docs/koma.util.validation/validate.html","text":"api / koma.util.validation / validate validate fun validate(fn: ValidationContext .() -> Unit ): Unit Execute the given rules within a ValidationContext, letting you validate multiple matrices at once with interrelated dimensions, and return a list of matrices that match your validation rules. fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. In general it is preferable to use the other verison of this function that lets you specify a name. All matrices that are validated with this method will appear in the error message with the name \"matrix\" Parameters fn - Validation rules for the matrix. See Also Matrix Returns Either a reference to the input matrix itself, or a transformed version. The return value is guaranteed to pass the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules. Parameters name - The name of the matrix (used in displayed errors) fn - Validation rules for the matrix.","title":"Validate"},{"location":"Reference_API_Docs/koma.util.validation/validate.html#validate","text":"fun validate(fn: ValidationContext .() -> Unit ): Unit Execute the given rules within a ValidationContext, letting you validate multiple matrices at once with interrelated dimensions, and return a list of matrices that match your validation rules. fun Matrix < Double >.validate(fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix. Return either the matrix itself or a copy that has been transformed to match the validation rules. In general it is preferable to use the other verison of this function that lets you specify a name. All matrices that are validated with this method will appear in the error message with the name \"matrix\"","title":"validate"},{"location":"Reference_API_Docs/koma.util.validation/validate.html#parameters","text":"fn - Validation rules for the matrix. See Also Matrix Returns Either a reference to the input matrix itself, or a transformed version. The return value is guaranteed to pass the validation rules. fun Matrix < Double >.validate(name: String , fn: ValidationContext .() -> Unit ): Unit Use the given fn to validate a matrix with the given name. Return either the matrix itself or a copy that has been transformed to match the validation rules.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/validate.html#parameters_1","text":"name - The name of the matrix (used in displayed errors) fn - Validation rules for the matrix.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/index.html","text":"api / koma.util.validation / ValidationContext ValidationContext class ValidationContext A lambda receiver with state and convenience methods for validating a group of matrices. In general there is no reason to instantiate this directly, instead @see validate(fn) for example usage. Constructors Name Summary <init> ValidationContext() A lambda receiver with state and convenience methods for validating a group of matrices. Properties Name Summary currentMatrix val currentMatrix: Matrix < Double > currentMatrixName val currentMatrixName: String matrices val matrices: MutableList < Matrix < Double >> matrixNames val matrixNames: MutableList < String > metadataStorage val metadataStorage: MutableMap < String , Any > Functions Name Summary addValidator fun addValidator(validator: Validator ): Unit Add a helper that will perform validation at the end of the block. invoke operator fun Matrix < Double >.invoke(fn: ValidationContext .() -> Unit ): ValidationContext Execute the given fn (which should contain validation rules) against the given matrix. operator fun Matrix < Double >.invoke(name: String , fn: ValidationContext .() -> Unit ): ValidationContext Execute the given fn (which should contain validation rules) against the given matrix with the given name. operator fun invoke(): ValidationContext metadata fun <T> metadata(key: String , factory: () -> T ): T validate fun validate(): Unit Check declared matrices against any rules that have been added with addValidator. fun validate(fn: ValidationContext .() -> Unit ): Unit Check declared matrices against any rules that have been added with addValidator, after running the given callback. x infix fun Int .x(cols: Int ): Unit infix fun Int .x(cols: Char ): Unit infix fun Char .x(cols: Int ): Unit infix fun Char .x(cols: Char ): Unit Extension Properties Name Summary max var ValidationContext .max: Double Maximum value for individual elements in the matrix. min var ValidationContext .min: Double Minimum value for individual elements in the matrix. symmetric val ValidationContext .symmetric: ValidationContext Require the current matrix to be symmetric. transposable val ValidationContext .transposable: ValidationContext Accept a transposed version of the matrix as satisfying the dimensions check. For example, allow a 1 x 3 matrix when dimensions are declared as 3 x 1. Extension Functions Name Summary dim fun ValidationContext .dim(rows: Int , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of rows and columns. fun ValidationContext .dim(rows: Int , cols: Char ): ValidationContext Require the current matrix to have exactly the given number of rows and match the number of columns with other dimensions in other matrices based on the cols variable name. fun ValidationContext .dim(rows: Char , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of columns and match the number of rows with other dimensions in other matrices based on the rows variable name. fun ValidationContext .dim(rows: Char , cols: Char ): ValidationContext Require the current matrix's dimensions to correspond to the given variable names. Compares with other dimensions in other matrices in the context that are assigned the same variable name and raises an error if they don't all match. max fun ValidationContext .max(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. min fun ValidationContext .min(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. symmetric fun ValidationContext .symmetric(precision: Double = 1e-5): ValidationContext","title":"Index"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/index.html#validationcontext","text":"class ValidationContext A lambda receiver with state and convenience methods for validating a group of matrices. In general there is no reason to instantiate this directly, instead @see validate(fn) for example usage.","title":"ValidationContext"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/index.html#constructors","text":"Name Summary <init> ValidationContext() A lambda receiver with state and convenience methods for validating a group of matrices.","title":"Constructors"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/index.html#properties","text":"Name Summary currentMatrix val currentMatrix: Matrix < Double > currentMatrixName val currentMatrixName: String matrices val matrices: MutableList < Matrix < Double >> matrixNames val matrixNames: MutableList < String > metadataStorage val metadataStorage: MutableMap < String , Any >","title":"Properties"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/index.html#functions","text":"Name Summary addValidator fun addValidator(validator: Validator ): Unit Add a helper that will perform validation at the end of the block. invoke operator fun Matrix < Double >.invoke(fn: ValidationContext .() -> Unit ): ValidationContext Execute the given fn (which should contain validation rules) against the given matrix. operator fun Matrix < Double >.invoke(name: String , fn: ValidationContext .() -> Unit ): ValidationContext Execute the given fn (which should contain validation rules) against the given matrix with the given name. operator fun invoke(): ValidationContext metadata fun <T> metadata(key: String , factory: () -> T ): T validate fun validate(): Unit Check declared matrices against any rules that have been added with addValidator. fun validate(fn: ValidationContext .() -> Unit ): Unit Check declared matrices against any rules that have been added with addValidator, after running the given callback. x infix fun Int .x(cols: Int ): Unit infix fun Int .x(cols: Char ): Unit infix fun Char .x(cols: Int ): Unit infix fun Char .x(cols: Char ): Unit","title":"Functions"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/index.html#extension-properties","text":"Name Summary max var ValidationContext .max: Double Maximum value for individual elements in the matrix. min var ValidationContext .min: Double Minimum value for individual elements in the matrix. symmetric val ValidationContext .symmetric: ValidationContext Require the current matrix to be symmetric. transposable val ValidationContext .transposable: ValidationContext Accept a transposed version of the matrix as satisfying the dimensions check. For example, allow a 1 x 3 matrix when dimensions are declared as 3 x 1.","title":"Extension Properties"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/index.html#extension-functions","text":"Name Summary dim fun ValidationContext .dim(rows: Int , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of rows and columns. fun ValidationContext .dim(rows: Int , cols: Char ): ValidationContext Require the current matrix to have exactly the given number of rows and match the number of columns with other dimensions in other matrices based on the cols variable name. fun ValidationContext .dim(rows: Char , cols: Int ): ValidationContext Require the current matrix to have exactly the given number of columns and match the number of rows with other dimensions in other matrices based on the rows variable name. fun ValidationContext .dim(rows: Char , cols: Char ): ValidationContext Require the current matrix's dimensions to correspond to the given variable names. Compares with other dimensions in other matrices in the context that are assigned the same variable name and raises an error if they don't all match. max fun ValidationContext .max(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. min fun ValidationContext .min(value: Double ): ValidationContext Ensure all of the elements in the current matrix are >= the given value. symmetric fun ValidationContext .symmetric(precision: Double = 1e-5): ValidationContext","title":"Extension Functions"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/-init-.html","text":"api / koma.util.validation / ValidationContext / <init> <init> ValidationContext() A lambda receiver with state and convenience methods for validating a group of matrices. In general there is no reason to instantiate this directly, instead @see validate(fn) for example usage.","title":" init "},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/-init-.html#init","text":"ValidationContext() A lambda receiver with state and convenience methods for validating a group of matrices. In general there is no reason to instantiate this directly, instead @see validate(fn) for example usage.","title":"&lt;init&gt;"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/add-validator.html","text":"api / koma.util.validation / ValidationContext / addValidator addValidator fun addValidator(validator: Validator ): Unit Add a helper that will perform validation at the end of the block.","title":"Add validator"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/add-validator.html#addvalidator","text":"fun addValidator(validator: Validator ): Unit Add a helper that will perform validation at the end of the block.","title":"addValidator"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/current-matrix-name.html","text":"api / koma.util.validation / ValidationContext / currentMatrixName currentMatrixName val currentMatrixName: String","title":"Current matrix name"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/current-matrix-name.html#currentmatrixname","text":"val currentMatrixName: String","title":"currentMatrixName"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/current-matrix.html","text":"api / koma.util.validation / ValidationContext / currentMatrix currentMatrix val currentMatrix: Matrix < Double >","title":"Current matrix"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/current-matrix.html#currentmatrix","text":"val currentMatrix: Matrix < Double >","title":"currentMatrix"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/invoke.html","text":"api / koma.util.validation / ValidationContext / invoke invoke operator fun Matrix < Double >.invoke(fn: ValidationContext .() -> Unit ): ValidationContext Execute the given fn (which should contain validation rules) against the given matrix. In general it is preferable to use the other verison of this function that lets you specify a name. All matrices that are validated with this method will appear in the error message with the name \"matrix\" operator fun Matrix < Double >.invoke(name: String , fn: ValidationContext .() -> Unit ): ValidationContext Execute the given fn (which should contain validation rules) against the given matrix with the given name. Parameters name - Name of the matrix to report in validation error messages. Returns this operator fun invoke(): ValidationContext","title":"Invoke"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/invoke.html#invoke","text":"operator fun Matrix < Double >.invoke(fn: ValidationContext .() -> Unit ): ValidationContext Execute the given fn (which should contain validation rules) against the given matrix. In general it is preferable to use the other verison of this function that lets you specify a name. All matrices that are validated with this method will appear in the error message with the name \"matrix\" operator fun Matrix < Double >.invoke(name: String , fn: ValidationContext .() -> Unit ): ValidationContext Execute the given fn (which should contain validation rules) against the given matrix with the given name.","title":"invoke"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/invoke.html#parameters","text":"name - Name of the matrix to report in validation error messages. Returns this operator fun invoke(): ValidationContext","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/matrices.html","text":"api / koma.util.validation / ValidationContext / matrices matrices val matrices: MutableList < Matrix < Double >>","title":"Matrices"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/matrices.html#matrices","text":"val matrices: MutableList < Matrix < Double >>","title":"matrices"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/matrix-names.html","text":"api / koma.util.validation / ValidationContext / matrixNames matrixNames val matrixNames: MutableList < String >","title":"Matrix names"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/matrix-names.html#matrixnames","text":"val matrixNames: MutableList < String >","title":"matrixNames"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/metadata-storage.html","text":"api / koma.util.validation / ValidationContext / metadataStorage metadataStorage val metadataStorage: MutableMap < String , Any >","title":"Metadata storage"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/metadata-storage.html#metadatastorage","text":"val metadataStorage: MutableMap < String , Any >","title":"metadataStorage"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/metadata.html","text":"api / koma.util.validation / ValidationContext / metadata metadata inline fun <reified T> metadata(key: String , factory: () -> T ): T","title":"Metadata"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/metadata.html#metadata","text":"inline fun <reified T> metadata(key: String , factory: () -> T ): T","title":"metadata"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/validate.html","text":"api / koma.util.validation / ValidationContext / validate validate fun validate(): Unit Check declared matrices against any rules that have been added with addValidator. fun validate(fn: ValidationContext .() -> Unit ): Unit Check declared matrices against any rules that have been added with addValidator, after running the given callback. Parameters fn - A function to execute before validating.","title":"Validate"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/validate.html#validate","text":"fun validate(): Unit Check declared matrices against any rules that have been added with addValidator. fun validate(fn: ValidationContext .() -> Unit ): Unit Check declared matrices against any rules that have been added with addValidator, after running the given callback.","title":"validate"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/validate.html#parameters","text":"fn - A function to execute before validating.","title":"Parameters"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/x.html","text":"api / koma.util.validation / ValidationContext / x x infix fun Int .x(cols: Int ): Unit infix fun Int .x(cols: Char ): Unit infix fun Char .x(cols: Int ): Unit infix fun Char .x(cols: Char ): Unit See Also dim","title":"X"},{"location":"Reference_API_Docs/koma.util.validation/-validation-context/x.html#x","text":"infix fun Int .x(cols: Int ): Unit infix fun Int .x(cols: Char ): Unit infix fun Char .x(cols: Int ): Unit infix fun Char .x(cols: Char ): Unit See Also dim","title":"x"},{"location":"Reference_API_Docs/koma.util.validation/-validator/index.html","text":"api / koma.util.validation / Validator Validator interface Validator Callback used by ValidationContext after evaluating all rules. Subclass this if your validation plugin needs to hold all validation until the end. Functions Name Summary performValidation abstract fun performValidation(context: ValidationContext ): Unit Validate all the matrices in the context according to your collected rules.","title":"Index"},{"location":"Reference_API_Docs/koma.util.validation/-validator/index.html#validator","text":"interface Validator Callback used by ValidationContext after evaluating all rules. Subclass this if your validation plugin needs to hold all validation until the end.","title":"Validator"},{"location":"Reference_API_Docs/koma.util.validation/-validator/index.html#functions","text":"Name Summary performValidation abstract fun performValidation(context: ValidationContext ): Unit Validate all the matrices in the context according to your collected rules.","title":"Functions"},{"location":"Reference_API_Docs/koma.util.validation/-validator/perform-validation.html","text":"api / koma.util.validation / Validator / performValidation performValidation abstract fun performValidation(context: ValidationContext ): Unit Validate all the matrices in the context according to your collected rules.","title":"Perform validation"},{"location":"Reference_API_Docs/koma.util.validation/-validator/perform-validation.html#performvalidation","text":"abstract fun performValidation(context: ValidationContext ): Unit Validate all the matrices in the context according to your collected rules.","title":"performValidation"}]}